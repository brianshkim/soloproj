{"ast":null,"code":"import { ValidationError } from \"../utils/validationError\";\nimport { csrfFetch } from './csrf';\nconst LOAD = \"song/LOAD\";\nconst ADD = \"song/ADD\";\nconst DELETE = \"song/DELETE\";\n\nconst load = list => ({\n  type: LOAD,\n  list\n});\n\nexport const getSongs = () => async dispatch => {\n  const response = await fetch(`/api/songs`);\n\n  if (response.ok) {\n    const list = await response.json();\n    dispatch(load(list));\n    return list;\n  }\n};\nexport const getSearch = payload => async dispatch => {\n  const response = await csrfFetch('api/search', {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  if (response.ok) {\n    const list = await response.json();\n    return dispatch(load(list));\n  }\n};\n\nconst addSong = song => {\n  return {\n    type: ADD,\n    song: song\n  };\n};\n\nexport const createSong = data => async dispatch => {\n  console.log(\"TOP OF THUNK IN STORE - data -> \", data);\n  const response = await csrfFetch(`/api/songs`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n  const song = await response.json();\n  dispatch(addSong(song));\n  return song;\n};\n\nconst sortList = list => {\n  return list.sort((a, b) => {\n    return a - b;\n  }).map(song => song.id);\n};\n\nconst initialState = {\n  list: []\n};\n\nconst songReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOAD:\n      const Songs = {};\n      action.list.forEach(song => {\n        Songs[song.id] = song;\n      });\n      return { ...Songs,\n        ...state,\n        list: sortList(action.list)\n      };\n\n    case ADD:\n      console.log('IN REDUCER ADD ONE CASE - ACTION -> ', action);\n\n      if (!state[action.song.id]) {\n        const newState = { ...state,\n          [action.song.id]: action.song\n        };\n        const songList = newState.list.map(id => newState[id]);\n        songList.push(action.song);\n        newState.list = sortList(songList);\n        return newState;\n      }\n\n      return { ...state,\n        [action.song.id]: { ...state[action.song.id],\n          ...action.song\n        }\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["ValidationError","csrfFetch","LOAD","ADD","DELETE","load","list","type","getSongs","dispatch","response","fetch","ok","json","getSearch","payload","method","headers","body","JSON","stringify","addSong","song","createSong","data","console","log","sortList","sort","a","b","map","id","initialState","songReducer","state","action","Songs","forEach","newState","songList","push"],"sources":["/home/brian/w15/practice-for-week-15-react-redux-authenticate-me-long-practice-main/authenticate-me/frontend/src/store/songs.js"],"sourcesContent":["import { ValidationError } from \"../utils/validationError\"\nimport { csrfFetch } from './csrf';\nconst LOAD = \"song/LOAD\";\nconst ADD = \"song/ADD\";\nconst DELETE= \"song/DELETE\"\n\n\n\nconst load = (list) => ({\n    type: LOAD,\n    list,\n  });\n\n  export const getSongs = () => async (dispatch) => {\n    const response = await fetch(`/api/songs`);\n\n    if (response.ok) {\n      const list = await response.json();\n      dispatch(load(list));\n      return list;\n    }\n  };\n\n  export const getSearch = (payload) => async(dispatch) =>{\n    const response = await csrfFetch('api/search',{\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(payload),\n    });\n\n\n\n    if (response.ok) {\n      const list = await response.json();\n     return dispatch(load(list));\n    }\n\n\n  }\n\n\n  const addSong= (song) => {\n\n    return {\n      type: ADD,\n      song:song,\n    };\n  };\n\n  export const createSong = (data) => async (dispatch) => {\n    console.log(\"TOP OF THUNK IN STORE - data -> \", data);\n\n      const response = await csrfFetch(`/api/songs`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n\n\n      const song = await response.json();\n\n\n\n    dispatch(addSong(song));\n    return song;\n\n};\n\n\n  const sortList = (list) => {\n    return list\n      .sort((a, b) => {\n        return a - b;\n      })\n      .map((song) => song.id);\n  };\n\n\n  const initialState = {list:[]}\n\n\nconst songReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOAD:\n            const Songs = {};\n            action.list.forEach((song) => {\n              Songs[song.id] = song\n            });\n            return {\n              ...Songs,\n              ...state,\n              list: sortList(action.list),\n            };\n            case ADD:\n                console.log('IN REDUCER ADD ONE CASE - ACTION -> ', action);\n                if (!state[action.song.id]) {\n                  const newState = {\n                    ...state,\n                    [action.song.id]: action.song,\n                  };\n                  const songList = newState.list.map((id) => newState[id]);\n                  songList.push(action.song);\n                  newState.list = sortList(songList);\n                  return newState;\n                }\n                return {\n                  ...state,\n                  [action.song.id]: {\n                    ...state[action.song.id],\n                    ...action.song,\n                  },\n                };\n\n        default:\n            return state;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}