{"ast":null,"code":"'use strict';\n\nconst AbstractQuery = require('../abstract/query');\n\nconst sequelizeErrors = require('../../errors');\n\nconst _ = require('lodash');\n\nconst DataTypes = require('../../data-types');\n\nconst Promise = require('../../promise');\n\nconst {\n  logger\n} = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext('sql:mariadb');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, Object.assign({\n      showWarnings: false\n    }, options));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n\n    const replacementFunc = (match, key, val) => {\n      if (val[key] !== undefined) {\n        bindParam.push(val[key]);\n        return '?';\n      }\n\n      return undefined;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    return Promise.resolve(connection.query(this.sql, parameters).then(results => {\n      complete(); // Log warnings if we've got them.\n\n      if (showWarnings && results && results.warningStatus > 0) {\n        return this.logWarnings(results);\n      }\n\n      return results;\n    }).catch(err => {\n      // MariaDB automatically rolls-back transactions in the event of a deadlock\n      if (options.transaction && err.errno === 1213) {\n        options.transaction.finished = 'rollback';\n      }\n\n      complete();\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err);\n    })) // Log warnings if we've got them.\n    .then(results => {\n      if (showWarnings && results && results.warningStatus > 0) {\n        return this.logWarnings(results);\n      }\n\n      return results;\n    }) // Return formatted results...\n    .then(results => this.formatResults(results));\n  }\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n\n\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery() || this.isUpsertQuery()) {\n      return data.affectedRows;\n    }\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          //ONLY TRUE IF @auto_increment_increment is set to 1 !!\n          //Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node ...\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = {\n              [pkField]: startId + i\n            };\n          }\n\n          return [result, data.affectedRows];\n        }\n\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra') && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n\n      return result;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n\n      if (modelField.type instanceof DataTypes.JSON) {\n        //value is return as String, no JSON\n        rows = rows.map(row => {\n          row[modelField.fieldName] = row[modelField.fieldName] ? JSON.parse(row[modelField.fieldName]) : null;\n\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options, row[modelField.fieldName]);\n          }\n\n          return row;\n        });\n      }\n    }\n  }\n\n  logWarnings(results) {\n    return this.run('SHOW WARNINGS').then(warningResults => {\n      const warningMessage = `MariaDB Warnings (${this.connection.uuid || 'default'}): `;\n      const messages = [];\n\n      for (const _warningRow of warningResults) {\n        if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n          continue;\n        }\n\n        for (const _warningResult of _warningRow) {\n          if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n            messages.push(_warningResult.Message);\n          } else {\n            for (const _objectKey of _warningResult.keys()) {\n              messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n            }\n          }\n        }\n      }\n\n      this.sequelize.log(warningMessage + messages.join('; '), this.options);\n      return results;\n    });\n  }\n\n  formatError(err) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n          let fields = {};\n          let message = 'Validation error';\n          const values = match ? match[1].split('-') : undefined;\n          const fieldKey = match ? match[2] : undefined;\n          const fieldVal = match ? match[1] : undefined;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n          if (uniqueKey) {\n            if (uniqueKey.msg) {\n              message = uniqueKey.msg;\n            }\n\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n\n          const errors = [];\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field, value, this.instance, 'not_unique'));\n          });\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : '`';\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: err.errno === 1451 ? 'parent' : 'child',\n            table: match ? match[4] : undefined,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n            index: match ? match[2] : undefined,\n            parent: err\n          });\n        }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === 'PRIMARY',\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n    });\n    return result;\n  }\n\n}\n\nmodule.exports = Query;","map":{"version":3,"names":["AbstractQuery","require","sequelizeErrors","_","DataTypes","Promise","logger","ER_DUP_ENTRY","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","Query","constructor","connection","sequelize","options","Object","assign","showWarnings","formatBindParameters","sql","values","dialect","bindParam","replacementFunc","match","key","val","undefined","push","length","run","parameters","complete","_logQuery","resolve","query","then","results","warningStatus","logWarnings","catch","err","transaction","errno","finished","formatError","formatResults","data","result","instance","isBulkUpdateQuery","isBulkDeleteQuery","isUpsertQuery","affectedRows","isInsertQuery","handleInsertQuery","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","Array","pkField","field","i","isSelectQuery","handleJsonSelectQuery","handleSelectQuery","isUpdateQuery","isCallQuery","isRawQuery","meta","isShowIndexesQuery","handleShowIndexesQuery","isForeignKeysQuery","isShowConstraintsQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Field","type","Type","toLowerCase","startsWith","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","prototype","hasOwnProperty","call","Extra","comment","Comment","isVersionQuery","version","rows","fieldRawAttributesMap","_field","keys","modelField","JSON","map","row","fieldName","parse","warningResults","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","join","log","message","fields","split","fieldKey","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","table","index","DatabaseError","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","currItem","forEach","item","name","Key_name","primary","Table","unique","Non_unique","Index_type","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","module","exports"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/mariadb/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst DataTypes = require('../../data-types');\nconst Promise = require('../../promise');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mariadb');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, Object.assign({ showWarnings: false }, options));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, val) => {\n      if (val[key] !== undefined) {\n        bindParam.push(val[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect,\n      replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings\n      || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n    return Promise.resolve(\n      connection.query(this.sql, parameters)\n        .then(results => {\n          complete();\n\n          // Log warnings if we've got them.\n          if (showWarnings && results && results.warningStatus > 0) {\n            return this.logWarnings(results);\n          }\n          return results;\n        })\n        .catch(err => {\n          // MariaDB automatically rolls-back transactions in the event of a deadlock\n          if (options.transaction && err.errno === 1213) {\n            options.transaction.finished = 'rollback';\n          }\n\n          complete();\n\n          err.sql = sql;\n          err.parameters = parameters;\n          throw this.formatError(err);\n        })\n    )\n      // Log warnings if we've got them.\n      .then(results => {\n        if (showWarnings && results && results.warningStatus > 0) {\n          return this.logWarnings(results);\n        }\n        return results;\n      })\n      // Return formatted results...\n      .then(results => this.formatResults(results));\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()\n      || this.isUpsertQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          //ONLY TRUE IF @auto_increment_increment is set to 1 !!\n          //Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node ...\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = { [pkField]: startId + i };\n          }\n          return [result, data.affectedRows];\n        }\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n      return this.handleSelectQuery(data);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i,\n            'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n      if (modelField.type instanceof DataTypes.JSON) {\n        //value is return as String, no JSON\n        rows = rows.map(row => {\n          row[modelField.fieldName] = row[modelField.fieldName] ? JSON.parse(\n            row[modelField.fieldName]) : null;\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options,\n              row[modelField.fieldName]);\n          }\n          return row;\n        });\n      }\n    }\n  }\n\n  logWarnings(results) {\n    return this.run('SHOW WARNINGS').then(warningResults => {\n      const warningMessage = `MariaDB Warnings (${this.connection.uuid\n      || 'default'}): `;\n      const messages = [];\n      for (const _warningRow of warningResults) {\n        if (_warningRow === undefined || typeof _warningRow[Symbol.iterator]\n          !== 'function') {\n          continue;\n        }\n        for (const _warningResult of _warningRow) {\n          if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n            messages.push(_warningResult.Message);\n          } else {\n            for (const _objectKey of _warningResult.keys()) {\n              messages.push(\n                [_objectKey, _warningResult[_objectKey]].join(': '));\n            }\n          }\n        }\n      }\n\n      this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n      return results;\n    });\n  }\n\n  formatError(err) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(\n          /Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) {\n            message = uniqueKey.msg;\n          }\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError(\n          { message, errors, parent: err, fields });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(\n          new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: err.errno === 1451 ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance\n            && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(data) {\n\n    let currItem;\n    const result = [];\n\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === 'PRIMARY',\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n    });\n\n    return result;\n  }\n}\n\nmodule.exports = Query;\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,mBAAD,CAA7B;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,cAAD,CAA/B;;AACA,MAAME,CAAC,GAAGF,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAM;EAAEK;AAAF,IAAaL,OAAO,CAAC,oBAAD,CAA1B;;AAEA,MAAMM,YAAY,GAAG,IAArB;AACA,MAAMC,oBAAoB,GAAG,IAA7B;AACA,MAAMC,oBAAoB,GAAG,IAA7B;AAEA,MAAMC,KAAK,GAAGJ,MAAM,CAACK,YAAP,CAAoB,aAApB,CAAd;;AAEA,MAAMC,KAAN,SAAoBZ,aAApB,CAAkC;EAChCa,WAAW,CAACC,UAAD,EAAaC,SAAb,EAAwBC,OAAxB,EAAiC;IAC1C,MAAMF,UAAN,EAAkBC,SAAlB,EAA6BE,MAAM,CAACC,MAAP,CAAc;MAAEC,YAAY,EAAE;IAAhB,CAAd,EAAuCH,OAAvC,CAA7B;EACD;;EAE0B,OAApBI,oBAAoB,CAACC,GAAD,EAAMC,MAAN,EAAcC,OAAd,EAAuB;IAChD,MAAMC,SAAS,GAAG,EAAlB;;IACA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,GAAR,EAAaC,GAAb,KAAqB;MAC3C,IAAIA,GAAG,CAACD,GAAD,CAAH,KAAaE,SAAjB,EAA4B;QAC1BL,SAAS,CAACM,IAAV,CAAeF,GAAG,CAACD,GAAD,CAAlB;QACA,OAAO,GAAP;MACD;;MACD,OAAOE,SAAP;IACD,CAND;;IAOAR,GAAG,GAAGrB,aAAa,CAACoB,oBAAd,CAAmCC,GAAnC,EAAwCC,MAAxC,EAAgDC,OAAhD,EACJE,eADI,EACa,CADb,CAAN;IAEA,OAAO,CAACJ,GAAD,EAAMG,SAAS,CAACO,MAAV,GAAmB,CAAnB,GAAuBP,SAAvB,GAAmCK,SAAzC,CAAP;EACD;;EAEDG,GAAG,CAACX,GAAD,EAAMY,UAAN,EAAkB;IACnB,KAAKZ,GAAL,GAAWA,GAAX;IACA,MAAM;MAAEP,UAAF;MAAcE;IAAd,IAA0B,IAAhC;IAEA,MAAMG,YAAY,GAAG,KAAKJ,SAAL,CAAeC,OAAf,CAAuBG,YAAvB,IAChBH,OAAO,CAACG,YADb;;IAGA,MAAMe,QAAQ,GAAG,KAAKC,SAAL,CAAed,GAAf,EAAoBX,KAApB,EAA2BuB,UAA3B,CAAjB;;IAEA,IAAIA,UAAJ,EAAgB;MACdvB,KAAK,CAAC,gBAAD,EAAmBuB,UAAnB,CAAL;IACD;;IACD,OAAO5B,OAAO,CAAC+B,OAAR,CACLtB,UAAU,CAACuB,KAAX,CAAiB,KAAKhB,GAAtB,EAA2BY,UAA3B,EACGK,IADH,CACQC,OAAO,IAAI;MACfL,QAAQ,GADO,CAGf;;MACA,IAAIf,YAAY,IAAIoB,OAAhB,IAA2BA,OAAO,CAACC,aAAR,GAAwB,CAAvD,EAA0D;QACxD,OAAO,KAAKC,WAAL,CAAiBF,OAAjB,CAAP;MACD;;MACD,OAAOA,OAAP;IACD,CATH,EAUGG,KAVH,CAUSC,GAAG,IAAI;MACZ;MACA,IAAI3B,OAAO,CAAC4B,WAAR,IAAuBD,GAAG,CAACE,KAAJ,KAAc,IAAzC,EAA+C;QAC7C7B,OAAO,CAAC4B,WAAR,CAAoBE,QAApB,GAA+B,UAA/B;MACD;;MAEDZ,QAAQ;MAERS,GAAG,CAACtB,GAAJ,GAAUA,GAAV;MACAsB,GAAG,CAACV,UAAJ,GAAiBA,UAAjB;MACA,MAAM,KAAKc,WAAL,CAAiBJ,GAAjB,CAAN;IACD,CArBH,CADK,EAwBL;IAxBK,CAyBJL,IAzBI,CAyBCC,OAAO,IAAI;MACf,IAAIpB,YAAY,IAAIoB,OAAhB,IAA2BA,OAAO,CAACC,aAAR,GAAwB,CAAvD,EAA0D;QACxD,OAAO,KAAKC,WAAL,CAAiBF,OAAjB,CAAP;MACD;;MACD,OAAOA,OAAP;IACD,CA9BI,EA+BL;IA/BK,CAgCJD,IAhCI,CAgCCC,OAAO,IAAI,KAAKS,aAAL,CAAmBT,OAAnB,CAhCZ,CAAP;EAiCD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACES,aAAa,CAACC,IAAD,EAAO;IAClB,IAAIC,MAAM,GAAG,KAAKC,QAAlB;;IAEA,IAAI,KAAKC,iBAAL,MAA4B,KAAKC,iBAAL,EAA5B,IACC,KAAKC,aAAL,EADL,EAC2B;MACzB,OAAOL,IAAI,CAACM,YAAZ;IACD;;IACD,IAAI,KAAKC,aAAL,CAAmBP,IAAnB,CAAJ,EAA8B;MAC5B,KAAKQ,iBAAL,CAAuBR,IAAvB;;MAEA,IAAI,CAAC,KAAKE,QAAV,EAAoB;QAClB;QACA,IAAI,KAAKO,KAAL,IACC,KAAKA,KAAL,CAAWC,sBADZ,IAEC,KAAKD,KAAL,CAAWC,sBAAX,KAAsC,KAAKD,KAAL,CAAWE,mBAFlD,IAGC,KAAKF,KAAL,CAAWG,aAAX,CAAyB,KAAKH,KAAL,CAAWE,mBAApC,CAHL,EAIE;UACA;UACA;UACA,MAAME,OAAO,GAAGb,IAAI,CAAC,KAAKc,gBAAL,EAAD,CAApB;UACAb,MAAM,GAAG,IAAIc,KAAJ,CAAUf,IAAI,CAACM,YAAf,CAAT;UACA,MAAMU,OAAO,GAAG,KAAKP,KAAL,CAAWG,aAAX,CAAyB,KAAKH,KAAL,CAAWE,mBAApC,EAAyDM,KAAzE;;UACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,IAAI,CAACM,YAAzB,EAAuCY,CAAC,EAAxC,EAA4C;YAC1CjB,MAAM,CAACiB,CAAD,CAAN,GAAY;cAAE,CAACF,OAAD,GAAWH,OAAO,GAAGK;YAAvB,CAAZ;UACD;;UACD,OAAO,CAACjB,MAAD,EAASD,IAAI,CAACM,YAAd,CAAP;QACD;;QACD,OAAO,CAACN,IAAI,CAAC,KAAKc,gBAAL,EAAD,CAAL,EAAgCd,IAAI,CAACM,YAArC,CAAP;MACD;IACF;;IAED,IAAI,KAAKa,aAAL,EAAJ,EAA0B;MACxB,KAAKC,qBAAL,CAA2BpB,IAA3B;MACA,OAAO,KAAKqB,iBAAL,CAAuBrB,IAAvB,CAAP;IACD;;IACD,IAAI,KAAKO,aAAL,MAAwB,KAAKe,aAAL,EAA5B,EAAkD;MAChD,OAAO,CAACrB,MAAD,EAASD,IAAI,CAACM,YAAd,CAAP;IACD;;IACD,IAAI,KAAKiB,WAAL,EAAJ,EAAwB;MACtB,OAAOvB,IAAI,CAAC,CAAD,CAAX;IACD;;IACD,IAAI,KAAKwB,UAAL,EAAJ,EAAuB;MACrB,MAAMC,IAAI,GAAGzB,IAAI,CAACyB,IAAlB;MACA,OAAOzB,IAAI,CAACyB,IAAZ;MACA,OAAO,CAACzB,IAAD,EAAOyB,IAAP,CAAP;IACD;;IACD,IAAI,KAAKC,kBAAL,EAAJ,EAA+B;MAC7B,OAAO,KAAKC,sBAAL,CAA4B3B,IAA5B,CAAP;IACD;;IACD,IAAI,KAAK4B,kBAAL,MAA6B,KAAKC,sBAAL,EAAjC,EAAgE;MAC9D,OAAO7B,IAAP;IACD;;IACD,IAAI,KAAK8B,iBAAL,EAAJ,EAA8B;MAC5B,OAAO,KAAKC,qBAAL,CAA2B/B,IAA3B,CAAP;IACD;;IACD,IAAI,KAAKgC,eAAL,EAAJ,EAA4B;MAC1B/B,MAAM,GAAG,EAAT;;MAEA,KAAK,MAAMgC,OAAX,IAAsBjC,IAAtB,EAA4B;QAC1BC,MAAM,CAACgC,OAAO,CAACC,KAAT,CAAN,GAAwB;UACtBC,IAAI,EAAEF,OAAO,CAACG,IAAR,CAAaC,WAAb,GAA2BC,UAA3B,CAAsC,MAAtC,IAAgDL,OAAO,CAACG,IAAR,CAAaG,OAAb,CAAqB,QAArB,EACpD,MADoD,CAAhD,GACMN,OAAO,CAACG,IAAR,CAAaI,WAAb,EAFU;UAGtBC,SAAS,EAAER,OAAO,CAACS,IAAR,KAAiB,KAHN;UAItBC,YAAY,EAAEV,OAAO,CAACW,OAJA;UAKtBC,UAAU,EAAEZ,OAAO,CAACa,GAAR,KAAgB,KALN;UAMtBC,aAAa,EAAE/E,MAAM,CAACgF,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCjB,OAArC,EAA8C,OAA9C,KACVA,OAAO,CAACkB,KAAR,CAAcd,WAAd,OAAgC,gBAPf;UAQtBe,OAAO,EAAEnB,OAAO,CAACoB,OAAR,GAAkBpB,OAAO,CAACoB,OAA1B,GAAoC;QARvB,CAAxB;MAUD;;MACD,OAAOpD,MAAP;IACD;;IACD,IAAI,KAAKqD,cAAL,EAAJ,EAA2B;MACzB,OAAOtD,IAAI,CAAC,CAAD,CAAJ,CAAQuD,OAAf;IACD;;IAED,OAAOtD,MAAP;EACD;;EAEDmB,qBAAqB,CAACoC,IAAD,EAAO;IAC1B,IAAI,CAAC,KAAK/C,KAAN,IAAe,CAAC,KAAKA,KAAL,CAAWgD,qBAA/B,EAAsD;MACpD;IACD;;IACD,KAAK,MAAMC,MAAX,IAAqB1F,MAAM,CAAC2F,IAAP,CAAY,KAAKlD,KAAL,CAAWgD,qBAAvB,CAArB,EAAoE;MAClE,MAAMG,UAAU,GAAG,KAAKnD,KAAL,CAAWgD,qBAAX,CAAiCC,MAAjC,CAAnB;;MACA,IAAIE,UAAU,CAACzB,IAAX,YAA2BhF,SAAS,CAAC0G,IAAzC,EAA+C;QAC7C;QACAL,IAAI,GAAGA,IAAI,CAACM,GAAL,CAASC,GAAG,IAAI;UACrBA,GAAG,CAACH,UAAU,CAACI,SAAZ,CAAH,GAA4BD,GAAG,CAACH,UAAU,CAACI,SAAZ,CAAH,GAA4BH,IAAI,CAACI,KAAL,CACtDF,GAAG,CAACH,UAAU,CAACI,SAAZ,CADmD,CAA5B,GACG,IAD/B;;UAEA,IAAI7G,SAAS,CAAC0G,IAAV,CAAeI,KAAnB,EAA0B;YACxB,OAAO9G,SAAS,CAAC0G,IAAV,CAAeI,KAAf,CAAqBL,UAArB,EAAiC,KAAK9F,SAAL,CAAeC,OAAhD,EACLgG,GAAG,CAACH,UAAU,CAACI,SAAZ,CADE,CAAP;UAED;;UACD,OAAOD,GAAP;QACD,CARM,CAAP;MASD;IACF;EACF;;EAEDvE,WAAW,CAACF,OAAD,EAAU;IACnB,OAAO,KAAKP,GAAL,CAAS,eAAT,EAA0BM,IAA1B,CAA+B6E,cAAc,IAAI;MACtD,MAAMC,cAAc,GAAI,qBAAoB,KAAKtG,UAAL,CAAgBuG,IAAhB,IACzC,SAAU,KADb;MAEA,MAAMC,QAAQ,GAAG,EAAjB;;MACA,KAAK,MAAMC,WAAX,IAA0BJ,cAA1B,EAA0C;QACxC,IAAII,WAAW,KAAK1F,SAAhB,IAA6B,OAAO0F,WAAW,CAACC,MAAM,CAACC,QAAR,CAAlB,KAC3B,UADN,EACkB;UAChB;QACD;;QACD,KAAK,MAAMC,cAAX,IAA6BH,WAA7B,EAA0C;UACxC,IAAItG,MAAM,CAACgF,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCuB,cAArC,EAAqD,SAArD,CAAJ,EAAqE;YACnEJ,QAAQ,CAACxF,IAAT,CAAc4F,cAAc,CAACC,OAA7B;UACD,CAFD,MAEO;YACL,KAAK,MAAMC,UAAX,IAAyBF,cAAc,CAACd,IAAf,EAAzB,EAAgD;cAC9CU,QAAQ,CAACxF,IAAT,CACE,CAAC8F,UAAD,EAAaF,cAAc,CAACE,UAAD,CAA3B,EAAyCC,IAAzC,CAA8C,IAA9C,CADF;YAED;UACF;QACF;MACF;;MAED,KAAK9G,SAAL,CAAe+G,GAAf,CAAmBV,cAAc,GAAGE,QAAQ,CAACO,IAAT,CAAc,IAAd,CAApC,EAAyD,KAAK7G,OAA9D;MAEA,OAAOuB,OAAP;IACD,CAxBM,CAAP;EAyBD;;EAEDQ,WAAW,CAACJ,GAAD,EAAM;IACf,QAAQA,GAAG,CAACE,KAAZ;MACE,KAAKtC,YAAL;QAAmB;UACjB,MAAMmB,KAAK,GAAGiB,GAAG,CAACoF,OAAJ,CAAYrG,KAAZ,CACZ,yDADY,CAAd;UAGA,IAAIsG,MAAM,GAAG,EAAb;UACA,IAAID,OAAO,GAAG,kBAAd;UACA,MAAMzG,MAAM,GAAGI,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAL,CAASuG,KAAT,CAAe,GAAf,CAAH,GAAyBpG,SAA7C;UACA,MAAMqG,QAAQ,GAAGxG,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAR,GAAcG,SAApC;UACA,MAAMsG,QAAQ,GAAGzG,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAR,GAAcG,SAApC;UACA,MAAMuG,SAAS,GAAG,KAAK1E,KAAL,IAAc,KAAKA,KAAL,CAAW2E,UAAX,CAAsBH,QAAtB,CAAhC;;UAEA,IAAIE,SAAJ,EAAe;YACb,IAAIA,SAAS,CAACE,GAAd,EAAmB;cACjBP,OAAO,GAAGK,SAAS,CAACE,GAApB;YACD;;YACDN,MAAM,GAAG7H,CAAC,CAACoI,SAAF,CAAYH,SAAS,CAACJ,MAAtB,EAA8B1G,MAA9B,CAAT;UACD,CALD,MAKO;YACL0G,MAAM,CAACE,QAAD,CAAN,GAAmBC,QAAnB;UACD;;UAED,MAAMK,MAAM,GAAG,EAAf;;UACArI,CAAC,CAACsI,MAAF,CAAST,MAAT,EAAiB,CAACU,KAAD,EAAQxE,KAAR,KAAkB;YACjCsE,MAAM,CAAC1G,IAAP,CAAY,IAAI5B,eAAe,CAACyI,mBAApB,CACV,KAAKC,+BAAL,CAAqC1E,KAArC,CADU,EAEV,kBAFU,EAEU;YACpBA,KAHU,EAIVwE,KAJU,EAKV,KAAKvF,QALK,EAMV,YANU,CAAZ;UAQD,CATD;;UAWA,OAAO,IAAIjD,eAAe,CAAC2I,qBAApB,CACL;YAAEd,OAAF;YAAWS,MAAX;YAAmBM,MAAM,EAAEnG,GAA3B;YAAgCqF;UAAhC,CADK,CAAP;QAED;;MAED,KAAKxH,oBAAL;MACA,KAAKC,oBAAL;QAA2B;UACzB;UACA,MAAMiB,KAAK,GAAGiB,GAAG,CAACoF,OAAJ,CAAYrG,KAAZ,CACZ,mFADY,CAAd;UAEA,MAAMqH,SAAS,GAAGrH,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAR,GAAc,GAArC;UACA,MAAMsG,MAAM,GAAGtG,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAL,CAASuG,KAAT,CACrB,IAAIe,MAAJ,CAAY,GAAED,SAAU,MAAKA,SAAU,EAAvC,CADqB,CAAH,GAC2BlH,SAD/C;UAEA,OAAO,IAAI3B,eAAe,CAAC+I,yBAApB,CAA8C;YACnDC,OAAO,EAAEvG,GAAG,CAACE,KAAJ,KAAc,IAAd,GAAqB,QAArB,GAAgC,OADU;YAEnDsG,KAAK,EAAEzH,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAR,GAAcG,SAFyB;YAGnDmG,MAHmD;YAInDU,KAAK,EAAEV,MAAM,IAAIA,MAAM,CAACjG,MAAjB,IAA2B,KAAKoB,QAAhC,IACF,KAAKA,QAAL,CAAc6E,MAAM,CAAC,CAAD,CAApB,CADE,IAC0BnG,SALkB;YAMnDuH,KAAK,EAAE1H,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAR,GAAcG,SANyB;YAOnDiH,MAAM,EAAEnG;UAP2C,CAA9C,CAAP;QASD;;MAED;QACE,OAAO,IAAIzC,eAAe,CAACmJ,aAApB,CAAkC1G,GAAlC,CAAP;IAzDJ;EA2DD;;EAEDqC,qBAAqB,CAACzC,OAAD,EAAU;IAC7B,OAAOA,OAAO,CAACwE,GAAR,CAAYuC,SAAS,KAAK;MAC/BC,SAAS,EAAED,SAAS,CAACE,UADU;MAE/BC,MAAM,EAAEH,SAAS,CAACI;IAFa,CAAL,CAArB,CAAP;EAID;;EAED9E,sBAAsB,CAAC3B,IAAD,EAAO;IAE3B,IAAI0G,QAAJ;IACA,MAAMzG,MAAM,GAAG,EAAf;IAEAD,IAAI,CAAC2G,OAAL,CAAaC,IAAI,IAAI;MACnB,IAAI,CAACF,QAAD,IAAaA,QAAQ,CAACG,IAAT,KAAkBD,IAAI,CAACE,QAAxC,EAAkD;QAChDJ,QAAQ,GAAG;UACTK,OAAO,EAAEH,IAAI,CAACE,QAAL,KAAkB,SADlB;UAET/B,MAAM,EAAE,EAFC;UAGT8B,IAAI,EAAED,IAAI,CAACE,QAHF;UAITR,SAAS,EAAEM,IAAI,CAACI,KAJP;UAKTC,MAAM,EAAEL,IAAI,CAACM,UAAL,KAAoB,CALnB;UAMT/E,IAAI,EAAEyE,IAAI,CAACO;QANF,CAAX;QAQAlH,MAAM,CAACpB,IAAP,CAAY6H,QAAZ;MACD;;MAEDA,QAAQ,CAAC3B,MAAT,CAAgB6B,IAAI,CAACQ,YAAL,GAAoB,CAApC,IAAyC;QACvCC,SAAS,EAAET,IAAI,CAACU,WADuB;QAEvCxI,MAAM,EAAE8H,IAAI,CAACW,QAAL,IAAiB3I,SAFc;QAGvC4I,KAAK,EAAEZ,IAAI,CAACa,SAAL,KAAmB,GAAnB,GAAyB,KAAzB,GAAiC7I;MAHD,CAAzC;IAKD,CAlBD;IAoBA,OAAOqB,MAAP;EACD;;AAlT+B;;AAqTlCyH,MAAM,CAACC,OAAP,GAAiBhK,KAAjB"},"metadata":{},"sourceType":"script"}