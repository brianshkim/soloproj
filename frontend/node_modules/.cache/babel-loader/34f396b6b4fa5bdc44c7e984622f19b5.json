{"ast":null,"code":"'use strict';\n\nconst uuidv4 = require('uuid').v4;\n\nconst TransactionQueries = {\n  /**\n   * Returns a query that sets the transaction isolation level.\n   *\n   * @param  {string} value   The isolation level.\n   * @param  {Object} options An object with options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  setIsolationLevelQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    return `SET TRANSACTION ISOLATION LEVEL ${value};`;\n  },\n\n  generateTransactionId() {\n    return uuidv4();\n  },\n\n  /**\n   * Returns a query that starts a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;\n    }\n\n    return 'START TRANSACTION;';\n  },\n\n  deferConstraintsQuery() {},\n\n  setConstraintQuery() {},\n\n  setDeferredQuery() {},\n\n  setImmediateQuery() {},\n\n  /**\n   * Returns a query that commits a transaction.\n   *\n   * @param  {Transaction} transaction An object with options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT;';\n  },\n\n  /**\n   * Returns a query that rollbacks a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return `ROLLBACK TO SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;\n    }\n\n    return 'ROLLBACK;';\n  }\n\n};\nmodule.exports = TransactionQueries;","map":{"version":3,"names":["uuidv4","require","v4","TransactionQueries","setIsolationLevelQuery","value","options","parent","generateTransactionId","startTransactionQuery","transaction","quoteIdentifier","name","deferConstraintsQuery","setConstraintQuery","setDeferredQuery","setImmediateQuery","commitTransactionQuery","rollbackTransactionQuery","module","exports"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/abstract/query-generator/transaction.js"],"sourcesContent":["'use strict';\n\nconst uuidv4 = require('uuid').v4;\n\nconst TransactionQueries = {\n  /**\n   * Returns a query that sets the transaction isolation level.\n   *\n   * @param  {string} value   The isolation level.\n   * @param  {Object} options An object with options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  setIsolationLevelQuery(value, options) {\n    if (options.parent) {\n      return;\n    }\n\n    return `SET TRANSACTION ISOLATION LEVEL ${value};`;\n  },\n\n  generateTransactionId() {\n    return uuidv4();\n  },\n\n  /**\n   * Returns a query that starts a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;\n    }\n\n    return 'START TRANSACTION;';\n  },\n\n  deferConstraintsQuery() {},\n\n  setConstraintQuery() {},\n  setDeferredQuery() {},\n  setImmediateQuery() {},\n\n  /**\n   * Returns a query that commits a transaction.\n   *\n   * @param  {Transaction} transaction An object with options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT;';\n  },\n\n  /**\n   * Returns a query that rollbacks a transaction.\n   *\n   * @param  {Transaction} transaction\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      // force quoting of savepoint identifiers for postgres\n      return `ROLLBACK TO SAVEPOINT ${this.quoteIdentifier(transaction.name, true)};`;\n    }\n\n    return 'ROLLBACK;';\n  }\n};\n\nmodule.exports = TransactionQueries;\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBC,EAA/B;;AAEA,MAAMC,kBAAkB,GAAG;EACzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,sBAAsB,CAACC,KAAD,EAAQC,OAAR,EAAiB;IACrC,IAAIA,OAAO,CAACC,MAAZ,EAAoB;MAClB;IACD;;IAED,OAAQ,mCAAkCF,KAAM,GAAhD;EACD,CAfwB;;EAiBzBG,qBAAqB,GAAG;IACtB,OAAOR,MAAM,EAAb;EACD,CAnBwB;;EAqBzB;AACF;AACA;AACA;AACA;AACA;AACA;EACES,qBAAqB,CAACC,WAAD,EAAc;IACjC,IAAIA,WAAW,CAACH,MAAhB,EAAwB;MACtB;MACA,OAAQ,aAAY,KAAKI,eAAL,CAAqBD,WAAW,CAACE,IAAjC,EAAuC,IAAvC,CAA6C,GAAjE;IACD;;IAED,OAAO,oBAAP;EACD,CAnCwB;;EAqCzBC,qBAAqB,GAAG,CAAE,CArCD;;EAuCzBC,kBAAkB,GAAG,CAAE,CAvCE;;EAwCzBC,gBAAgB,GAAG,CAAE,CAxCI;;EAyCzBC,iBAAiB,GAAG,CAAE,CAzCG;;EA2CzB;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,sBAAsB,CAACP,WAAD,EAAc;IAClC,IAAIA,WAAW,CAACH,MAAhB,EAAwB;MACtB;IACD;;IAED,OAAO,SAAP;EACD,CAxDwB;;EA0DzB;AACF;AACA;AACA;AACA;AACA;AACA;EACEW,wBAAwB,CAACR,WAAD,EAAc;IACpC,IAAIA,WAAW,CAACH,MAAhB,EAAwB;MACtB;MACA,OAAQ,yBAAwB,KAAKI,eAAL,CAAqBD,WAAW,CAACE,IAAjC,EAAuC,IAAvC,CAA6C,GAA7E;IACD;;IAED,OAAO,WAAP;EACD;;AAxEwB,CAA3B;AA2EAO,MAAM,CAACC,OAAP,GAAiBjB,kBAAjB"},"metadata":{},"sourceType":"script"}