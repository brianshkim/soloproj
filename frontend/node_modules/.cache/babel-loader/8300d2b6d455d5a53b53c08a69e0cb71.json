{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst validator = _.cloneDeep(require('validator'));\n\nconst moment = require('moment');\n\nconst extensions = {\n  extend(name, fn) {\n    this[name] = fn;\n    return this;\n  },\n\n  notEmpty(str) {\n    return !str.match(/^[\\s\\t\\r\\n]*$/);\n  },\n\n  len(str, min, max) {\n    return this.isLength(str, min, max);\n  },\n\n  isUrl(str) {\n    return this.isURL(str);\n  },\n\n  isIPv6(str) {\n    return this.isIP(str, 6);\n  },\n\n  isIPv4(str) {\n    return this.isIP(str, 4);\n  },\n\n  notIn(str, values) {\n    return !this.isIn(str, values);\n  },\n\n  regex(str, pattern, modifiers) {\n    str += '';\n\n    if (Object.prototype.toString.call(pattern).slice(8, -1) !== 'RegExp') {\n      pattern = new RegExp(pattern, modifiers);\n    }\n\n    return str.match(pattern);\n  },\n\n  notRegex(str, pattern, modifiers) {\n    return !this.regex(str, pattern, modifiers);\n  },\n\n  isDecimal(str) {\n    return str !== '' && !!str.match(/^(?:-?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][+-]?(?:[0-9]+))?$/);\n  },\n\n  min(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number >= val;\n  },\n\n  max(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number <= val;\n  },\n\n  not(str, pattern, modifiers) {\n    return this.notRegex(str, pattern, modifiers);\n  },\n\n  contains(str, elem) {\n    return !!elem && str.includes(elem);\n  },\n\n  notContains(str, elem) {\n    return !this.contains(str, elem);\n  },\n\n  is(str, pattern, modifiers) {\n    return this.regex(str, pattern, modifiers);\n  }\n\n};\nexports.extensions = extensions; // instance based validators\n\nvalidator.isImmutable = function (value, validatorArgs, field, modelInstance) {\n  return modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field];\n}; // extra validators\n\n\nvalidator.notNull = function (val) {\n  return val !== null && val !== undefined;\n}; // https://github.com/chriso/validator.js/blob/6.2.0/validator.js\n\n\n_.forEach(extensions, (extend, key) => {\n  validator[key] = extend;\n}); // map isNull to isEmpty\n// https://github.com/chriso/validator.js/commit/e33d38a26ee2f9666b319adb67c7fc0d3dea7125\n\n\nvalidator.isNull = validator.isEmpty; // isDate removed in 7.0.0\n// https://github.com/chriso/validator.js/commit/095509fc707a4dc0e99f85131df1176ad6389fc9\n\nvalidator.isDate = function (dateString) {\n  // avoid http://momentjs.com/guides/#/warnings/js-date/\n  // by doing a preliminary check on `dateString`\n  const parsed = Date.parse(dateString);\n\n  if (isNaN(parsed)) {\n    // fail if we can't parse it\n    return false;\n  } // otherwise convert to ISO 8601 as moment prefers\n  // http://momentjs.com/docs/#/parsing/string/\n\n\n  const date = new Date(parsed);\n  return moment(date.toISOString()).isValid();\n};\n\nexports.validator = validator;","map":{"version":3,"names":["_","require","validator","cloneDeep","moment","extensions","extend","name","fn","notEmpty","str","match","len","min","max","isLength","isUrl","isURL","isIPv6","isIP","isIPv4","notIn","values","isIn","regex","pattern","modifiers","Object","prototype","toString","call","slice","RegExp","notRegex","isDecimal","val","number","parseFloat","isNaN","not","contains","elem","includes","notContains","is","exports","isImmutable","value","validatorArgs","field","modelInstance","isNewRecord","dataValues","_previousDataValues","notNull","undefined","forEach","key","isNull","isEmpty","isDate","dateString","parsed","Date","parse","date","toISOString","isValid"],"sources":["/home/brian/node_modules/sequelize/lib/utils/validator-extras.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst validator = _.cloneDeep(require('validator'));\nconst moment = require('moment');\n\nconst extensions = {\n  extend(name, fn) {\n    this[name] = fn;\n\n    return this;\n  },\n  notEmpty(str) {\n    return !str.match(/^[\\s\\t\\r\\n]*$/);\n  },\n  len(str, min, max) {\n    return this.isLength(str, min, max);\n  },\n  isUrl(str) {\n    return this.isURL(str);\n  },\n  isIPv6(str) {\n    return this.isIP(str, 6);\n  },\n  isIPv4(str) {\n    return this.isIP(str, 4);\n  },\n  notIn(str, values) {\n    return !this.isIn(str, values);\n  },\n  regex(str, pattern, modifiers) {\n    str += '';\n    if (Object.prototype.toString.call(pattern).slice(8, -1) !== 'RegExp') {\n      pattern = new RegExp(pattern, modifiers);\n    }\n    return str.match(pattern);\n  },\n  notRegex(str, pattern, modifiers) {\n    return !this.regex(str, pattern, modifiers);\n  },\n  isDecimal(str) {\n    return str !== '' && !!str.match(/^(?:-?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][+-]?(?:[0-9]+))?$/);\n  },\n  min(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number >= val;\n  },\n  max(str, val) {\n    const number = parseFloat(str);\n    return isNaN(number) || number <= val;\n  },\n  not(str, pattern, modifiers) {\n    return this.notRegex(str, pattern, modifiers);\n  },\n  contains(str, elem) {\n    return !!elem && str.includes(elem);\n  },\n  notContains(str, elem) {\n    return !this.contains(str, elem);\n  },\n  is(str, pattern, modifiers) {\n    return this.regex(str, pattern, modifiers);\n  }\n};\nexports.extensions = extensions;\n\n// instance based validators\nvalidator.isImmutable = function(value, validatorArgs, field, modelInstance) {\n  return modelInstance.isNewRecord || modelInstance.dataValues[field] === modelInstance._previousDataValues[field];\n};\n\n// extra validators\nvalidator.notNull = function(val) {\n  return val !== null && val !== undefined;\n};\n\n// https://github.com/chriso/validator.js/blob/6.2.0/validator.js\n_.forEach(extensions, (extend, key) => {\n  validator[key] = extend;\n});\n\n// map isNull to isEmpty\n// https://github.com/chriso/validator.js/commit/e33d38a26ee2f9666b319adb67c7fc0d3dea7125\nvalidator.isNull = validator.isEmpty;\n\n// isDate removed in 7.0.0\n// https://github.com/chriso/validator.js/commit/095509fc707a4dc0e99f85131df1176ad6389fc9\nvalidator.isDate = function(dateString) {\n  // avoid http://momentjs.com/guides/#/warnings/js-date/\n  // by doing a preliminary check on `dateString`\n  const parsed = Date.parse(dateString);\n  if (isNaN(parsed)) {\n    // fail if we can't parse it\n    return false;\n  }\n  // otherwise convert to ISO 8601 as moment prefers\n  // http://momentjs.com/docs/#/parsing/string/\n  const date = new Date(parsed);\n  return moment(date.toISOString()).isValid();\n};\n\nexports.validator = validator;\n"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,SAAS,GAAGF,CAAC,CAACG,SAAF,CAAYF,OAAO,CAAC,WAAD,CAAnB,CAAlB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMI,UAAU,GAAG;EACjBC,MAAM,CAACC,IAAD,EAAOC,EAAP,EAAW;IACf,KAAKD,IAAL,IAAaC,EAAb;IAEA,OAAO,IAAP;EACD,CALgB;;EAMjBC,QAAQ,CAACC,GAAD,EAAM;IACZ,OAAO,CAACA,GAAG,CAACC,KAAJ,CAAU,eAAV,CAAR;EACD,CARgB;;EASjBC,GAAG,CAACF,GAAD,EAAMG,GAAN,EAAWC,GAAX,EAAgB;IACjB,OAAO,KAAKC,QAAL,CAAcL,GAAd,EAAmBG,GAAnB,EAAwBC,GAAxB,CAAP;EACD,CAXgB;;EAYjBE,KAAK,CAACN,GAAD,EAAM;IACT,OAAO,KAAKO,KAAL,CAAWP,GAAX,CAAP;EACD,CAdgB;;EAejBQ,MAAM,CAACR,GAAD,EAAM;IACV,OAAO,KAAKS,IAAL,CAAUT,GAAV,EAAe,CAAf,CAAP;EACD,CAjBgB;;EAkBjBU,MAAM,CAACV,GAAD,EAAM;IACV,OAAO,KAAKS,IAAL,CAAUT,GAAV,EAAe,CAAf,CAAP;EACD,CApBgB;;EAqBjBW,KAAK,CAACX,GAAD,EAAMY,MAAN,EAAc;IACjB,OAAO,CAAC,KAAKC,IAAL,CAAUb,GAAV,EAAeY,MAAf,CAAR;EACD,CAvBgB;;EAwBjBE,KAAK,CAACd,GAAD,EAAMe,OAAN,EAAeC,SAAf,EAA0B;IAC7BhB,GAAG,IAAI,EAAP;;IACA,IAAIiB,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,OAA/B,EAAwCM,KAAxC,CAA8C,CAA9C,EAAiD,CAAC,CAAlD,MAAyD,QAA7D,EAAuE;MACrEN,OAAO,GAAG,IAAIO,MAAJ,CAAWP,OAAX,EAAoBC,SAApB,CAAV;IACD;;IACD,OAAOhB,GAAG,CAACC,KAAJ,CAAUc,OAAV,CAAP;EACD,CA9BgB;;EA+BjBQ,QAAQ,CAACvB,GAAD,EAAMe,OAAN,EAAeC,SAAf,EAA0B;IAChC,OAAO,CAAC,KAAKF,KAAL,CAAWd,GAAX,EAAgBe,OAAhB,EAAyBC,SAAzB,CAAR;EACD,CAjCgB;;EAkCjBQ,SAAS,CAACxB,GAAD,EAAM;IACb,OAAOA,GAAG,KAAK,EAAR,IAAc,CAAC,CAACA,GAAG,CAACC,KAAJ,CAAU,0DAAV,CAAvB;EACD,CApCgB;;EAqCjBE,GAAG,CAACH,GAAD,EAAMyB,GAAN,EAAW;IACZ,MAAMC,MAAM,GAAGC,UAAU,CAAC3B,GAAD,CAAzB;IACA,OAAO4B,KAAK,CAACF,MAAD,CAAL,IAAiBA,MAAM,IAAID,GAAlC;EACD,CAxCgB;;EAyCjBrB,GAAG,CAACJ,GAAD,EAAMyB,GAAN,EAAW;IACZ,MAAMC,MAAM,GAAGC,UAAU,CAAC3B,GAAD,CAAzB;IACA,OAAO4B,KAAK,CAACF,MAAD,CAAL,IAAiBA,MAAM,IAAID,GAAlC;EACD,CA5CgB;;EA6CjBI,GAAG,CAAC7B,GAAD,EAAMe,OAAN,EAAeC,SAAf,EAA0B;IAC3B,OAAO,KAAKO,QAAL,CAAcvB,GAAd,EAAmBe,OAAnB,EAA4BC,SAA5B,CAAP;EACD,CA/CgB;;EAgDjBc,QAAQ,CAAC9B,GAAD,EAAM+B,IAAN,EAAY;IAClB,OAAO,CAAC,CAACA,IAAF,IAAU/B,GAAG,CAACgC,QAAJ,CAAaD,IAAb,CAAjB;EACD,CAlDgB;;EAmDjBE,WAAW,CAACjC,GAAD,EAAM+B,IAAN,EAAY;IACrB,OAAO,CAAC,KAAKD,QAAL,CAAc9B,GAAd,EAAmB+B,IAAnB,CAAR;EACD,CArDgB;;EAsDjBG,EAAE,CAAClC,GAAD,EAAMe,OAAN,EAAeC,SAAf,EAA0B;IAC1B,OAAO,KAAKF,KAAL,CAAWd,GAAX,EAAgBe,OAAhB,EAAyBC,SAAzB,CAAP;EACD;;AAxDgB,CAAnB;AA0DAmB,OAAO,CAACxC,UAAR,GAAqBA,UAArB,C,CAEA;;AACAH,SAAS,CAAC4C,WAAV,GAAwB,UAASC,KAAT,EAAgBC,aAAhB,EAA+BC,KAA/B,EAAsCC,aAAtC,EAAqD;EAC3E,OAAOA,aAAa,CAACC,WAAd,IAA6BD,aAAa,CAACE,UAAd,CAAyBH,KAAzB,MAAoCC,aAAa,CAACG,mBAAd,CAAkCJ,KAAlC,CAAxE;AACD,CAFD,C,CAIA;;;AACA/C,SAAS,CAACoD,OAAV,GAAoB,UAASnB,GAAT,EAAc;EAChC,OAAOA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKoB,SAA/B;AACD,CAFD,C,CAIA;;;AACAvD,CAAC,CAACwD,OAAF,CAAUnD,UAAV,EAAsB,CAACC,MAAD,EAASmD,GAAT,KAAiB;EACrCvD,SAAS,CAACuD,GAAD,CAAT,GAAiBnD,MAAjB;AACD,CAFD,E,CAIA;AACA;;;AACAJ,SAAS,CAACwD,MAAV,GAAmBxD,SAAS,CAACyD,OAA7B,C,CAEA;AACA;;AACAzD,SAAS,CAAC0D,MAAV,GAAmB,UAASC,UAAT,EAAqB;EACtC;EACA;EACA,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,UAAX,CAAf;;EACA,IAAIvB,KAAK,CAACwB,MAAD,CAAT,EAAmB;IACjB;IACA,OAAO,KAAP;EACD,CAPqC,CAQtC;EACA;;;EACA,MAAMG,IAAI,GAAG,IAAIF,IAAJ,CAASD,MAAT,CAAb;EACA,OAAO1D,MAAM,CAAC6D,IAAI,CAACC,WAAL,EAAD,CAAN,CAA2BC,OAA3B,EAAP;AACD,CAZD;;AAcAtB,OAAO,CAAC3C,SAAR,GAAoBA,SAApB"},"metadata":{},"sourceType":"script"}