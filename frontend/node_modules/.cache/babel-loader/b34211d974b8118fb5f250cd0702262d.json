{"ast":null,"code":"const LOAD = \"song/LOAD\";\nconst LOAD_TYPES = \"song/LOAD_TYPES\";\nconst ADD_ONE = \"song/ADD_ONE\";\n\nconst load = list => ({\n  type: LOAD,\n  list\n});\n\nexport const getSongs = () => async dispatch => {\n  const response = await fetch(`/api/songs`);\n\n  if (response.ok) {\n    const list = await response.json();\n    dispatch(load(list));\n  }\n};\n\nconst sortList = list => {\n  return list.sort((pokemonA, pokemonB) => {\n    return pokemonA.number - pokemonB.number;\n  }).map(pokemon => pokemon.id);\n};\n\nconst initialState = {\n  list: []\n};\n\nconst songReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOAD:\n      const Songs = {};\n      action.list.forEach(song => {\n        Songs[song.id] = song;\n      });\n      return { ...Songs,\n        ...state,\n        list: sortList(action.list)\n      };\n\n    case LOAD_TYPES:\n      return { ...state,\n        types: action.types\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["LOAD","LOAD_TYPES","ADD_ONE","load","list","type","getSongs","dispatch","response","fetch","ok","json","sortList","sort","pokemonA","pokemonB","number","map","pokemon","id","initialState","songReducer","state","action","Songs","forEach","song","types"],"sources":["/home/brian/w15/practice-for-week-15-react-redux-authenticate-me-long-practice-main/authenticate-me/frontend/src/store/songs.js"],"sourcesContent":["\nconst LOAD = \"song/LOAD\";\nconst LOAD_TYPES = \"song/LOAD_TYPES\";\nconst ADD_ONE = \"song/ADD_ONE\";\n\n\n\nconst load = (list) => ({\n    type: LOAD,\n    list,\n  });\n\n  export const getSongs = () => async (dispatch) => {\n    const response = await fetch(`/api/songs`);\n\n    if (response.ok) {\n      const list = await response.json();\n      dispatch(load(list));\n    }\n  };\n\n  const sortList = (list) => {\n    return list\n      .sort((pokemonA, pokemonB) => {\n        return pokemonA.number - pokemonB.number;\n      })\n      .map((pokemon) => pokemon.id);\n  };\n\n\n  const initialState = {list:[]}\n\n\nconst songReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOAD:\n            const Songs = {};\n            action.list.forEach((song) => {\n              Songs[song.id] = song\n            });\n            return {\n              ...Songs,\n              ...state,\n              list: sortList(action.list),\n            };\n          case LOAD_TYPES:\n            return {\n              ...state,\n              types: action.types,\n            };\n        default:\n            return state;\n    }\n}\n"],"mappings":"AACA,MAAMA,IAAI,GAAG,WAAb;AACA,MAAMC,UAAU,GAAG,iBAAnB;AACA,MAAMC,OAAO,GAAG,cAAhB;;AAIA,MAAMC,IAAI,GAAIC,IAAD,KAAW;EACpBC,IAAI,EAAEL,IADc;EAEpBI;AAFoB,CAAX,CAAb;;AAKE,OAAO,MAAME,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;EAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,YAAF,CAA5B;;EAEA,IAAID,QAAQ,CAACE,EAAb,EAAiB;IACf,MAAMN,IAAI,GAAG,MAAMI,QAAQ,CAACG,IAAT,EAAnB;IACAJ,QAAQ,CAACJ,IAAI,CAACC,IAAD,CAAL,CAAR;EACD;AACF,CAPM;;AASP,MAAMQ,QAAQ,GAAIR,IAAD,IAAU;EACzB,OAAOA,IAAI,CACRS,IADI,CACC,CAACC,QAAD,EAAWC,QAAX,KAAwB;IAC5B,OAAOD,QAAQ,CAACE,MAAT,GAAkBD,QAAQ,CAACC,MAAlC;EACD,CAHI,EAIJC,GAJI,CAICC,OAAD,IAAaA,OAAO,CAACC,EAJrB,CAAP;AAKD,CAND;;AASA,MAAMC,YAAY,GAAG;EAAChB,IAAI,EAAC;AAAN,CAArB;;AAGF,MAAMiB,WAAW,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBF,YAAyB;EAAA,IAAXG,MAAW;;EAClD,QAAQA,MAAM,CAAClB,IAAf;IACI,KAAKL,IAAL;MACI,MAAMwB,KAAK,GAAG,EAAd;MACAD,MAAM,CAACnB,IAAP,CAAYqB,OAAZ,CAAqBC,IAAD,IAAU;QAC5BF,KAAK,CAACE,IAAI,CAACP,EAAN,CAAL,GAAiBO,IAAjB;MACD,CAFD;MAGA,OAAO,EACL,GAAGF,KADE;QAEL,GAAGF,KAFE;QAGLlB,IAAI,EAAEQ,QAAQ,CAACW,MAAM,CAACnB,IAAR;MAHT,CAAP;;IAKF,KAAKH,UAAL;MACE,OAAO,EACL,GAAGqB,KADE;QAELK,KAAK,EAAEJ,MAAM,CAACI;MAFT,CAAP;;IAIJ;MACI,OAAOL,KAAP;EAjBR;AAmBH,CApBD"},"metadata":{},"sourceType":"module"}