{"ast":null,"code":"'use strict';\n\nconst Utils = require('./../utils');\n\nconst Helpers = require('./helpers');\n\nconst _ = require('lodash');\n\nconst Association = require('./base');\n\nconst Op = require('../operators');\n/**\n * One-to-many association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasMany(Project)` the getter will be `user.getProjects()`.\n * If the association is aliased, use the alias instead, e.g. `User.hasMany(Project, { as: 'jobs' })` will be `user.getJobs()`.\n *\n * @see {@link Model.hasMany}\n */\n\n\nclass HasMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = 'HasMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.isMultiAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.options.through) {\n      throw new Error('N:M associations are not supported with hasMany. Use belongsToMany instead');\n    }\n    /*\n    * If self association, this is the target association\n    */\n\n\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n    /*\n     * Foreign key setup\n     */\n\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([this.source.options.name.singular, this.source.primaryKeyAttribute].join('_'));\n    }\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n      this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n    /*\n     * Source key setup\n     */\n\n\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n\n    if (this.source.rawAttributes[this.sourceKey]) {\n      this.sourceKeyAttribute = this.sourceKey;\n      this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    } else {\n      this.sourceKeyAttribute = this.source.primaryKeyAttribute;\n      this.sourceKeyField = this.source.primaryKeyField;\n    } // Get singular and plural names\n    // try to uppercase the first letter, unless the model forbids it\n\n\n    const plural = _.upperFirst(this.options.name.plural);\n\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.associationAccessor = this.as;\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  } // the id is in the target table\n  // or in an extra table which connects two tables\n\n\n  _injectAttributes() {\n    const newAttributes = {}; // Create a new options object for use with addForeignKeyConstraints, to avoid polluting this.options in case it is later used for a n:m\n\n    const constraintOptions = _.clone(this.options);\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      constraintOptions.onUpdate = constraintOptions.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n    this.target.refreshAttributes();\n    this.source.refreshAttributes();\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {Object} [options] find options\n   * @param {Object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findAll}  for a full explanation of options\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n\n\n  get(instances) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const where = {};\n    let Model = this.target;\n    let instance;\n    let values;\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    options = Object.assign({}, options);\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    if (instances) {\n      values = instances.map(instance => instance.get(this.sourceKey, {\n        raw: true\n      }));\n\n      if (options.limit && instances.length > 1) {\n        options.groupedLimit = {\n          limit: options.limit,\n          on: this,\n          // association\n          values\n        };\n        delete options.limit;\n      } else {\n        where[this.foreignKey] = {\n          [Op.in]: values\n        };\n        delete options.groupedLimit;\n      }\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey, {\n        raw: true\n      });\n    }\n\n    options.where = options.where ? {\n      [Op.and]: [where, options.where]\n    } : where;\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Model = Model.unscoped();\n      } else {\n        Model = Model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Model = Model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    return Model.findAll(options).then(results => {\n      if (instance) return results;\n      const result = {};\n\n      for (const instance of instances) {\n        result[instance.get(this.sourceKey, {\n          raw: true\n        })] = [];\n      }\n\n      for (const instance of results) {\n        result[instance.get(this.foreignKey, {\n          raw: true\n        })].push(instance);\n      }\n\n      return result;\n    });\n  }\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model}        instance the source instance\n   * @param {Object}         [options] find & count options\n   * @param {Object}         [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n\n\n  count(instance, options) {\n    options = Utils.cloneDeep(options);\n    options.attributes = [[this.sequelize.fn('COUNT', this.sequelize.col(`${this.target.name}.${this.target.primaryKeyField}`)), 'count']];\n    options.raw = true;\n    options.plain = true;\n    return this.get(instance, options).then(result => parseInt(result.count, 10));\n  }\n  /**\n   * Check if one or more rows are associated with `this`.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] Can be an array of instances or their primary keys\n   * @param {Object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise}\n   */\n\n\n  has(sourceInstance, targetInstances, options) {\n    const where = {};\n\n    if (!Array.isArray(targetInstances)) {\n      targetInstances = [targetInstances];\n    }\n\n    options = Object.assign({}, options, {\n      scope: false,\n      attributes: [this.target.primaryKeyAttribute],\n      raw: true\n    });\n    where[Op.or] = targetInstances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n\n      return {\n        [this.target.primaryKeyAttribute]: instance\n      };\n    });\n    options.where = {\n      [Op.and]: [where, options.where]\n    };\n    return this.get(sourceInstance, options).then(associatedObjects => associatedObjects.length === targetInstances.length);\n  }\n  /**\n   * Set the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] An array of persisted instances or primary key of instances to associate with this. Pass `null` or `undefined` to remove all associations.\n   * @param {Object} [options] Options passed to `target.findAll` and `update`.\n   * @param {Object} [options.validate] Run validation for the join model\n   *\n   * @returns {Promise}\n   */\n\n\n  set(sourceInstance, targetInstances, options) {\n    if (targetInstances === null) {\n      targetInstances = [];\n    } else {\n      targetInstances = this.toInstanceArray(targetInstances);\n    }\n\n    return this.get(sourceInstance, _.defaults({\n      scope: false,\n      raw: true\n    }, options)).then(oldAssociations => {\n      const promises = [];\n      const obsoleteAssociations = oldAssociations.filter(old => !targetInstances.find(obj => obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]));\n      const unassociatedObjects = targetInstances.filter(obj => !oldAssociations.find(old => obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]));\n      let updateWhere;\n      let update;\n\n      if (obsoleteAssociations.length > 0) {\n        update = {};\n        update[this.foreignKey] = null;\n        updateWhere = {\n          [this.target.primaryKeyAttribute]: obsoleteAssociations.map(associatedObject => associatedObject[this.target.primaryKeyAttribute])\n        };\n        promises.push(this.target.unscoped().update(update, _.defaults({\n          where: updateWhere\n        }, options)));\n      }\n\n      if (unassociatedObjects.length > 0) {\n        updateWhere = {};\n        update = {};\n        update[this.foreignKey] = sourceInstance.get(this.sourceKey);\n        Object.assign(update, this.scope);\n        updateWhere[this.target.primaryKeyAttribute] = unassociatedObjects.map(unassociatedObject => unassociatedObject[this.target.primaryKeyAttribute]);\n        promises.push(this.target.unscoped().update(update, _.defaults({\n          where: updateWhere\n        }, options)));\n      }\n\n      return Utils.Promise.all(promises).return(sourceInstance);\n    });\n  }\n  /**\n   * Associate one or more target rows with `this`. This method accepts a Model / string / number to associate a single row,\n   * or a mixed array of Model / string / numbers to associate multiple rows.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {Object} [options] Options passed to `target.update`.\n   *\n   * @returns {Promise}\n   */\n\n\n  add(sourceInstance, targetInstances) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!targetInstances) return Utils.Promise.resolve();\n    const update = {};\n    targetInstances = this.toInstanceArray(targetInstances);\n    update[this.foreignKey] = sourceInstance.get(this.sourceKey);\n    Object.assign(update, this.scope);\n    const where = {\n      [this.target.primaryKeyAttribute]: targetInstances.map(unassociatedObject => unassociatedObject.get(this.target.primaryKeyAttribute))\n    };\n    return this.target.unscoped().update(update, _.defaults({\n      where\n    }, options)).return(sourceInstance);\n  }\n  /**\n   * Un-associate one or several target rows.\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [targetInstances] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {Object} [options] Options passed to `target.update`\n   *\n   * @returns {Promise}\n   */\n\n\n  remove(sourceInstance, targetInstances) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const update = {\n      [this.foreignKey]: null\n    };\n    targetInstances = this.toInstanceArray(targetInstances);\n    const where = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      [this.target.primaryKeyAttribute]: targetInstances.map(targetInstance => targetInstance.get(this.target.primaryKeyAttribute))\n    };\n    return this.target.unscoped().update(update, _.defaults({\n      where\n    }, options)).return(this);\n  }\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {Object} [values] values for target model instance\n   * @param {Object} [options] Options passed to `target.create`\n   *\n   * @returns {Promise}\n   */\n\n\n  create(sourceInstance, values) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (values === undefined) {\n      values = {};\n    }\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) options.fields.push(attribute);\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKey);\n    if (options.fields) options.fields.push(this.foreignKey);\n    return this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n\n}\n\nmodule.exports = HasMany;\nmodule.exports.HasMany = HasMany;\nmodule.exports.default = HasMany;","map":{"version":3,"names":["Utils","require","Helpers","_","Association","Op","HasMany","constructor","source","target","options","associationType","targetAssociation","sequelize","isMultiAssociation","foreignKeyAttribute","through","Error","isSelfAssociation","as","isAliased","isPlainObject","name","plural","singular","singularize","isObject","foreignKey","fieldName","camelize","primaryKeyAttribute","join","rawAttributes","identifierField","field","foreignKeyField","sourceKey","sourceKeyAttribute","sourceKeyField","primaryKeyField","upperFirst","associationAccessor","accessors","get","set","addMultiple","add","create","remove","removeMultiple","hasSingle","hasAll","count","_injectAttributes","newAttributes","constraintOptions","clone","defaults","type","keyType","allowNull","constraints","onDelete","onUpdate","addForeignKeyConstraints","mergeDefaults","refreshAttributes","checkNamingCollision","mixin","obj","methods","aliases","mixinMethods","instances","where","Model","instance","values","Array","isArray","undefined","Object","assign","scope","map","raw","limit","length","groupedLimit","on","in","and","prototype","hasOwnProperty","call","unscoped","schema","schemaDelimiter","findAll","then","results","result","push","cloneDeep","attributes","fn","col","plain","parseInt","has","sourceInstance","targetInstances","or","associatedObjects","toInstanceArray","oldAssociations","promises","obsoleteAssociations","filter","old","find","unassociatedObjects","updateWhere","update","associatedObject","unassociatedObject","Promise","all","return","resolve","targetInstance","fields","attribute","keys","verifyAssociationAlias","alias","module","exports","default"],"sources":["/home/brian/node_modules/sequelize/lib/associations/has-many.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-many association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasMany(Project)` the getter will be `user.getProjects()`.\n * If the association is aliased, use the alias instead, e.g. `User.hasMany(Project, { as: 'jobs' })` will be `user.getJobs()`.\n *\n * @see {@link Model.hasMany}\n */\nclass HasMany extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'HasMany';\n    this.targetAssociation = null;\n    this.sequelize = source.sequelize;\n    this.isMultiAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.options.through) {\n      throw new Error('N:M associations are not supported with hasMany. Use belongsToMany instead');\n    }\n\n    /*\n    * If self association, this is the target association\n    */\n    if (this.isSelfAssociation) {\n      this.targetAssociation = this;\n    }\n\n    if (this.as) {\n      this.isAliased = true;\n\n      if (_.isPlainObject(this.as)) {\n        this.options.name = this.as;\n        this.as = this.as.plural;\n      } else {\n        this.options.name = {\n          plural: this.as,\n          singular: Utils.singularize(this.as)\n        };\n      }\n    } else {\n      this.as = this.target.options.name.plural;\n      this.options.name = this.target.options.name;\n    }\n\n    /*\n     * Foreign key setup\n     */\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          this.source.options.name.singular,\n          this.source.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n      this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    /*\n     * Source key setup\n     */\n    this.sourceKey = this.options.sourceKey || this.source.primaryKeyAttribute;\n\n    if (this.source.rawAttributes[this.sourceKey]) {\n      this.sourceKeyAttribute = this.sourceKey;\n      this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    } else {\n      this.sourceKeyAttribute = this.source.primaryKeyAttribute;\n      this.sourceKeyField = this.source.primaryKeyField;\n    }\n\n    // Get singular and plural names\n    // try to uppercase the first letter, unless the model forbids it\n    const plural = _.upperFirst(this.options.name.plural);\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.associationAccessor = this.as;\n    this.accessors = {\n      get: `get${plural}`,\n      set: `set${plural}`,\n      addMultiple: `add${plural}`,\n      add: `add${singular}`,\n      create: `create${singular}`,\n      remove: `remove${singular}`,\n      removeMultiple: `remove${plural}`,\n      hasSingle: `has${singular}`,\n      hasAll: `has${plural}`,\n      count: `count${plural}`\n    };\n  }\n\n  // the id is in the target table\n  // or in an extra table which connects two tables\n  _injectAttributes() {\n    const newAttributes = {};\n    // Create a new options object for use with addForeignKeyConstraints, to avoid polluting this.options in case it is later used for a n:m\n    const constraintOptions = _.clone(this.options);\n\n    newAttributes[this.foreignKey] = _.defaults({}, this.foreignKeyAttribute, {\n      type: this.options.keyType || this.source.rawAttributes[this.sourceKeyAttribute].type,\n      allowNull: true\n    });\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      constraintOptions.onDelete = constraintOptions.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      constraintOptions.onUpdate = constraintOptions.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, constraintOptions, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n\n    this.target.refreshAttributes();\n    this.source.refreshAttributes();\n\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.foreignKeyField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'];\n    const aliases = {\n      hasSingle: 'has',\n      hasAll: 'has',\n      addMultiple: 'add',\n      removeMultiple: 'remove'\n    };\n\n    Helpers.mixinMethods(this, obj, methods, aliases);\n  }\n\n  /**\n   * Get everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {Object} [options] find options\n   * @param {Object} [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findAll}  for a full explanation of options\n   *\n   * @returns {Promise<Array<Model>>}\n   */\n  get(instances, options = {}) {\n    const where = {};\n\n    let Model = this.target;\n    let instance;\n    let values;\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    options = Object.assign({}, options);\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    if (instances) {\n      values = instances.map(instance => instance.get(this.sourceKey, { raw: true }));\n\n      if (options.limit && instances.length > 1) {\n        options.groupedLimit = {\n          limit: options.limit,\n          on: this, // association\n          values\n        };\n\n        delete options.limit;\n      } else {\n        where[this.foreignKey] = {\n          [Op.in]: values\n        };\n        delete options.groupedLimit;\n      }\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey, { raw: true });\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Model = Model.unscoped();\n      } else {\n        Model = Model.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Model = Model.schema(options.schema, options.schemaDelimiter);\n    }\n\n    return Model.findAll(options).then(results => {\n      if (instance) return results;\n\n      const result = {};\n      for (const instance of instances) {\n        result[instance.get(this.sourceKey, { raw: true })] = [];\n      }\n\n      for (const instance of results) {\n        result[instance.get(this.foreignKey, { raw: true })].push(instance);\n      }\n\n      return result;\n    });\n  }\n\n  /**\n   * Count everything currently associated with this, using an optional where clause.\n   *\n   * @param {Model}        instance the source instance\n   * @param {Object}         [options] find & count options\n   * @param {Object}         [options.where] An optional where clause to limit the associated models\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   *\n   * @returns {Promise<number>}\n   */\n  count(instance, options) {\n    options = Utils.cloneDeep(options);\n\n    options.attributes = [\n      [\n        this.sequelize.fn(\n          'COUNT',\n          this.sequelize.col(`${this.target.name}.${this.target.primaryKeyField}`)\n        ),\n        'count'\n      ]\n    ];\n    options.raw = true;\n    options.plain = true;\n\n    return this.get(instance, options).then(result => parseInt(result.count, 10));\n  }\n\n  /**\n   * Check if one or more rows are associated with `this`.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] Can be an array of instances or their primary keys\n   * @param {Object} [options] Options passed to getAssociations\n   *\n   * @returns {Promise}\n   */\n  has(sourceInstance, targetInstances, options) {\n    const where = {};\n\n    if (!Array.isArray(targetInstances)) {\n      targetInstances = [targetInstances];\n    }\n\n    options = Object.assign({}, options, {\n      scope: false,\n      attributes: [this.target.primaryKeyAttribute],\n      raw: true\n    });\n\n    where[Op.or] = targetInstances.map(instance => {\n      if (instance instanceof this.target) {\n        return instance.where();\n      }\n      return {\n        [this.target.primaryKeyAttribute]: instance\n      };\n    });\n\n    options.where = {\n      [Op.and]: [\n        where,\n        options.where\n      ]\n    };\n\n    return this.get(sourceInstance, options).then(associatedObjects => associatedObjects.length === targetInstances.length);\n  }\n\n  /**\n   * Set the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated\n   *\n   * @param {Model} sourceInstance source instance to associate new instances with\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] An array of persisted instances or primary key of instances to associate with this. Pass `null` or `undefined` to remove all associations.\n   * @param {Object} [options] Options passed to `target.findAll` and `update`.\n   * @param {Object} [options.validate] Run validation for the join model\n   *\n   * @returns {Promise}\n   */\n  set(sourceInstance, targetInstances, options) {\n    if (targetInstances === null) {\n      targetInstances = [];\n    } else {\n      targetInstances = this.toInstanceArray(targetInstances);\n    }\n\n    return this.get(sourceInstance, _.defaults({ scope: false, raw: true }, options)).then(oldAssociations => {\n      const promises = [];\n      const obsoleteAssociations = oldAssociations.filter(old =>\n        !targetInstances.find(obj =>\n          obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]\n        )\n      );\n      const unassociatedObjects = targetInstances.filter(obj =>\n        !oldAssociations.find(old =>\n          obj[this.target.primaryKeyAttribute] === old[this.target.primaryKeyAttribute]\n        )\n      );\n      let updateWhere;\n      let update;\n\n      if (obsoleteAssociations.length > 0) {\n        update = {};\n        update[this.foreignKey] = null;\n\n        updateWhere = {\n          [this.target.primaryKeyAttribute]: obsoleteAssociations.map(associatedObject =>\n            associatedObject[this.target.primaryKeyAttribute]\n          )\n        };\n\n\n        promises.push(this.target.unscoped().update(\n          update,\n          _.defaults({\n            where: updateWhere\n          }, options)\n        ));\n      }\n\n      if (unassociatedObjects.length > 0) {\n        updateWhere = {};\n\n        update = {};\n        update[this.foreignKey] = sourceInstance.get(this.sourceKey);\n\n        Object.assign(update, this.scope);\n        updateWhere[this.target.primaryKeyAttribute] = unassociatedObjects.map(unassociatedObject =>\n          unassociatedObject[this.target.primaryKeyAttribute]\n        );\n\n        promises.push(this.target.unscoped().update(\n          update,\n          _.defaults({\n            where: updateWhere\n          }, options)\n        ));\n      }\n\n      return Utils.Promise.all(promises).return(sourceInstance);\n    });\n  }\n\n  /**\n   * Associate one or more target rows with `this`. This method accepts a Model / string / number to associate a single row,\n   * or a mixed array of Model / string / numbers to associate multiple rows.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {Model|Model[]|string[]|string|number[]|number} [targetInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\n   * @param {Object} [options] Options passed to `target.update`.\n   *\n   * @returns {Promise}\n   */\n  add(sourceInstance, targetInstances, options = {}) {\n    if (!targetInstances) return Utils.Promise.resolve();\n\n    const update = {};\n\n    targetInstances = this.toInstanceArray(targetInstances);\n\n    update[this.foreignKey] = sourceInstance.get(this.sourceKey);\n    Object.assign(update, this.scope);\n\n    const where = {\n      [this.target.primaryKeyAttribute]: targetInstances.map(unassociatedObject =>\n        unassociatedObject.get(this.target.primaryKeyAttribute)\n      )\n    };\n\n    return this.target.unscoped().update(update, _.defaults({ where }, options)).return(sourceInstance);\n  }\n\n  /**\n   * Un-associate one or several target rows.\n   *\n   * @param {Model} sourceInstance instance to un associate instances with\n   * @param {Model|Model[]|string|string[]|number|number[]} [targetInstances] Can be an Instance or its primary key, or a mixed array of instances and primary keys\n   * @param {Object} [options] Options passed to `target.update`\n   *\n   * @returns {Promise}\n   */\n  remove(sourceInstance, targetInstances, options = {}) {\n    const update = {\n      [this.foreignKey]: null\n    };\n\n    targetInstances = this.toInstanceArray(targetInstances);\n\n    const where = {\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\n      [this.target.primaryKeyAttribute]: targetInstances.map(targetInstance =>\n        targetInstance.get(this.target.primaryKeyAttribute)\n      )\n    };\n\n    return this.target.unscoped().update(update, _.defaults({ where }, options)).return(this);\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance source instance\n   * @param {Object} [values] values for target model instance\n   * @param {Object} [options] Options passed to `target.create`\n   *\n   * @returns {Promise}\n   */\n  create(sourceInstance, values, options = {}) {\n    if (Array.isArray(options)) {\n      options = {\n        fields: options\n      };\n    }\n\n    if (values === undefined) {\n      values = {};\n    }\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) options.fields.push(attribute);\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKey);\n    if (options.fields) options.fields.push(this.foreignKey);\n    return this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.plural) {\n      return this.as === alias.plural;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = HasMany;\nmodule.exports.HasMany = HasMany;\nmodule.exports.default = HasMany;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}