{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst {\n  logger\n} = require('./utils/logger');\n\nconst Promise = require('./promise');\n\nconst debug = logger.debugContext('hooks');\nconst hookTypes = {\n  beforeValidate: {\n    params: 2\n  },\n  afterValidate: {\n    params: 2\n  },\n  validationFailed: {\n    params: 3\n  },\n  beforeCreate: {\n    params: 2\n  },\n  afterCreate: {\n    params: 2\n  },\n  beforeDestroy: {\n    params: 2\n  },\n  afterDestroy: {\n    params: 2\n  },\n  beforeRestore: {\n    params: 2\n  },\n  afterRestore: {\n    params: 2\n  },\n  beforeUpdate: {\n    params: 2\n  },\n  afterUpdate: {\n    params: 2\n  },\n  beforeSave: {\n    params: 2,\n    proxies: ['beforeUpdate', 'beforeCreate']\n  },\n  afterSave: {\n    params: 2,\n    proxies: ['afterUpdate', 'afterCreate']\n  },\n  beforeUpsert: {\n    params: 2\n  },\n  afterUpsert: {\n    params: 2\n  },\n  beforeBulkCreate: {\n    params: 2\n  },\n  afterBulkCreate: {\n    params: 2\n  },\n  beforeBulkDestroy: {\n    params: 1\n  },\n  afterBulkDestroy: {\n    params: 1\n  },\n  beforeBulkRestore: {\n    params: 1\n  },\n  afterBulkRestore: {\n    params: 1\n  },\n  beforeBulkUpdate: {\n    params: 1\n  },\n  afterBulkUpdate: {\n    params: 1\n  },\n  beforeFind: {\n    params: 1\n  },\n  beforeFindAfterExpandIncludeAll: {\n    params: 1\n  },\n  beforeFindAfterOptions: {\n    params: 1\n  },\n  afterFind: {\n    params: 2\n  },\n  beforeCount: {\n    params: 1\n  },\n  beforeDefine: {\n    params: 2,\n    sync: true,\n    noModel: true\n  },\n  afterDefine: {\n    params: 1,\n    sync: true,\n    noModel: true\n  },\n  beforeInit: {\n    params: 2,\n    sync: true,\n    noModel: true\n  },\n  afterInit: {\n    params: 1,\n    sync: true,\n    noModel: true\n  },\n  beforeAssociate: {\n    params: 2,\n    sync: true\n  },\n  afterAssociate: {\n    params: 2,\n    sync: true\n  },\n  beforeConnect: {\n    params: 1,\n    noModel: true\n  },\n  afterConnect: {\n    params: 2,\n    noModel: true\n  },\n  beforeDisconnect: {\n    params: 1,\n    noModel: true\n  },\n  afterDisconnect: {\n    params: 1,\n    noModel: true\n  },\n  beforeSync: {\n    params: 1\n  },\n  afterSync: {\n    params: 1\n  },\n  beforeBulkSync: {\n    params: 1\n  },\n  afterBulkSync: {\n    params: 1\n  },\n  beforeQuery: {\n    params: 2\n  },\n  afterQuery: {\n    params: 2\n  }\n};\nexports.hooks = hookTypes;\n/**\n * get array of current hook and its proxies combined\n *\n * @param {string} hookType any hook type @see {@link hookTypes}\n *\n * @private\n */\n\nconst getProxiedHooks = hookType => hookTypes[hookType].proxies ? hookTypes[hookType].proxies.concat(hookType) : [hookType];\n\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\n\nconst Hooks = {\n  /**\n   * Process user supplied hooks definition\n   *\n   * @param {Object} hooks hooks definition\n   *\n   * @private\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n\n  runHooks(hooks) {\n    for (var _len = arguments.length, hookArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      hookArgs[_key - 1] = arguments[_key];\n    }\n\n    if (!hooks) throw new Error('runHooks requires at least 1 argument');\n    let hookType;\n\n    if (typeof hooks === 'string') {\n      hookType = hooks;\n      hooks = getHooks(this, hookType);\n\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\n      }\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    } // synchronous hooks\n\n\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === 'object') {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n\n      return;\n    } // asynchronous hooks (default)\n\n\n    return Promise.each(hooks, hook => {\n      if (typeof hook === 'object') {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      return hook.apply(this, hookArgs);\n    }).return();\n  },\n\n  /**\n   * Add a hook to the model\n   *\n   * @param {string}          hookType hook name @see {@link hookTypes}\n   * @param {string|Function} [name] Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n   * @param {Function}        fn The hook function\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  addHook(hookType, name, fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`); // check for proxies, add them too\n\n    hookType = getProxiedHooks(hookType);\n    hookType.forEach(type => {\n      const hooks = getHooks(this, type);\n      hooks.push(name ? {\n        name,\n        fn\n      } : fn);\n      this.options.hooks[type] = hooks;\n    });\n    return this;\n  },\n\n  /**\n   * Remove hook from the model\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   * @param {string|Function} name name of hook or function reference which was attached\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  removeHook(hookType, name) {\n    const isReference = typeof name === 'function' ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    debug(`removing hook ${hookType}`); // check for proxies, add them too\n\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === 'function') {\n          return hook !== name; // check if same method\n        }\n\n        if (!isReference && typeof hook === 'object') {\n          return hook.name !== name;\n        }\n\n        return true;\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Check whether the mode has any hooks of this type\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   *\n   * @alias hasHooks\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n\n};\nHooks.hasHooks = Hooks.hasHook;\n\nfunction applyTo(target) {\n  let isModel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  _.mixin(target, Hooks);\n\n  for (const hook of Object.keys(hookTypes)) {\n    if (isModel && hookTypes[hook].noModel) {\n      continue;\n    }\n\n    target[hook] = function (name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\n\nexports.applyTo = applyTo;\n/**\n * A hook that is run before validation\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after validation\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run when validation fails\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\n * @name validationFailed\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeSave\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before upserting\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after upserting\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the result of upsert(), options\n * @name afterUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with attributes, options\n  * @name afterSave\n  * @memberof Sequelize.Model\n  */\n\n/**\n * A hook that is run before destroying a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name beforeBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name afterBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before destroying instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name afterBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterExpandIncludeAll\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after all option parsing is complete\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterOptions\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after a find (select) query\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance(s), options\n * @name afterFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a count query\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeCount\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a define call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a define call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with factory\n * @name afterDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Sequelize() call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config, options\n * @name beforeInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Sequelize() call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with sequelize\n * @name afterInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is created\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforeConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is created\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object and the config passed to connection\n * @name afterConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is disconnected\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name beforeDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is disconnected\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name afterDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Model.sync call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name beforeSync\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Model.sync call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name afterSync\n * @memberof Sequelize\n */\n\n/**\n  * A hook that is run before sequelize.sync call\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name beforeBulkSync\n  * @memberof Sequelize\n  */\n\n/**\n  * A hook that is run after sequelize.sync call\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name afterBulkSync\n  * @memberof Sequelize\n  */","map":{"version":3,"names":["_","require","logger","Promise","debug","debugContext","hookTypes","beforeValidate","params","afterValidate","validationFailed","beforeCreate","afterCreate","beforeDestroy","afterDestroy","beforeRestore","afterRestore","beforeUpdate","afterUpdate","beforeSave","proxies","afterSave","beforeUpsert","afterUpsert","beforeBulkCreate","afterBulkCreate","beforeBulkDestroy","afterBulkDestroy","beforeBulkRestore","afterBulkRestore","beforeBulkUpdate","afterBulkUpdate","beforeFind","beforeFindAfterExpandIncludeAll","beforeFindAfterOptions","afterFind","beforeCount","beforeDefine","sync","noModel","afterDefine","beforeInit","afterInit","beforeAssociate","afterAssociate","beforeConnect","afterConnect","beforeDisconnect","afterDisconnect","beforeSync","afterSync","beforeBulkSync","afterBulkSync","beforeQuery","afterQuery","exports","hooks","getProxiedHooks","hookType","concat","getHooks","hooked","options","Hooks","_setupHooks","map","hooksArray","hookName","Array","isArray","forEach","hookFn","addHook","runHooks","hookArgs","Error","sequelize","hook","fn","apply","each","return","name","type","push","removeHook","isReference","hasHook","filter","length","hasHooks","applyTo","target","isModel","mixin","Object","keys","callback"],"sources":["/home/brian/node_modules/sequelize/lib/hooks.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst { logger } = require('./utils/logger');\nconst Promise = require('./promise');\nconst debug = logger.debugContext('hooks');\n\nconst hookTypes = {\n  beforeValidate: { params: 2 },\n  afterValidate: { params: 2 },\n  validationFailed: { params: 3 },\n  beforeCreate: { params: 2 },\n  afterCreate: { params: 2 },\n  beforeDestroy: { params: 2 },\n  afterDestroy: { params: 2 },\n  beforeRestore: { params: 2 },\n  afterRestore: { params: 2 },\n  beforeUpdate: { params: 2 },\n  afterUpdate: { params: 2 },\n  beforeSave: { params: 2, proxies: ['beforeUpdate', 'beforeCreate'] },\n  afterSave: { params: 2, proxies: ['afterUpdate', 'afterCreate'] },\n  beforeUpsert: { params: 2 },\n  afterUpsert: { params: 2 },\n  beforeBulkCreate: { params: 2 },\n  afterBulkCreate: { params: 2 },\n  beforeBulkDestroy: { params: 1 },\n  afterBulkDestroy: { params: 1 },\n  beforeBulkRestore: { params: 1 },\n  afterBulkRestore: { params: 1 },\n  beforeBulkUpdate: { params: 1 },\n  afterBulkUpdate: { params: 1 },\n  beforeFind: { params: 1 },\n  beforeFindAfterExpandIncludeAll: { params: 1 },\n  beforeFindAfterOptions: { params: 1 },\n  afterFind: { params: 2 },\n  beforeCount: { params: 1 },\n  beforeDefine: { params: 2, sync: true, noModel: true },\n  afterDefine: { params: 1, sync: true, noModel: true },\n  beforeInit: { params: 2, sync: true, noModel: true },\n  afterInit: { params: 1, sync: true, noModel: true },\n  beforeAssociate: { params: 2, sync: true },\n  afterAssociate: { params: 2, sync: true },\n  beforeConnect: { params: 1, noModel: true },\n  afterConnect: { params: 2, noModel: true },\n  beforeDisconnect: { params: 1, noModel: true },\n  afterDisconnect: { params: 1, noModel: true },\n  beforeSync: { params: 1 },\n  afterSync: { params: 1 },\n  beforeBulkSync: { params: 1 },\n  afterBulkSync: { params: 1 },\n  beforeQuery: { params: 2 },\n  afterQuery: { params: 2 }\n};\nexports.hooks = hookTypes;\n\n\n/**\n * get array of current hook and its proxies combined\n *\n * @param {string} hookType any hook type @see {@link hookTypes}\n *\n * @private\n */\nconst getProxiedHooks = hookType =>\n  hookTypes[hookType].proxies\n    ? hookTypes[hookType].proxies.concat(hookType)\n    : [hookType]\n;\n\nfunction getHooks(hooked, hookType) {\n  return (hooked.options.hooks || {})[hookType] || [];\n}\n\nconst Hooks = {\n  /**\n   * Process user supplied hooks definition\n   *\n   * @param {Object} hooks hooks definition\n   *\n   * @private\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  _setupHooks(hooks) {\n    this.options.hooks = {};\n    _.map(hooks || {}, (hooksArray, hookName) => {\n      if (!Array.isArray(hooksArray)) hooksArray = [hooksArray];\n      hooksArray.forEach(hookFn => this.addHook(hookName, hookFn));\n    });\n  },\n\n  runHooks(hooks, ...hookArgs) {\n    if (!hooks) throw new Error('runHooks requires at least 1 argument');\n\n    let hookType;\n\n    if (typeof hooks === 'string') {\n      hookType = hooks;\n      hooks = getHooks(this, hookType);\n\n      if (this.sequelize) {\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\n      }\n    }\n\n    if (!Array.isArray(hooks)) {\n      hooks = [hooks];\n    }\n\n    // synchronous hooks\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\n      for (let hook of hooks) {\n        if (typeof hook === 'object') {\n          hook = hook.fn;\n        }\n\n        debug(`running hook(sync) ${hookType}`);\n        hook.apply(this, hookArgs);\n      }\n      return;\n    }\n\n    // asynchronous hooks (default)\n    return Promise.each(hooks, hook => {\n      if (typeof hook === 'object') {\n        hook = hook.fn;\n      }\n\n      debug(`running hook ${hookType}`);\n      return hook.apply(this, hookArgs);\n    }).return();\n  },\n\n  /**\n   * Add a hook to the model\n   *\n   * @param {string}          hookType hook name @see {@link hookTypes}\n   * @param {string|Function} [name] Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\n   * @param {Function}        fn The hook function\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  addHook(hookType, name, fn) {\n    if (typeof name === 'function') {\n      fn = name;\n      name = null;\n    }\n\n    debug(`adding hook ${hookType}`);\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    hookType.forEach(type => {\n      const hooks = getHooks(this, type);\n      hooks.push(name ? { name, fn } : fn);\n      this.options.hooks[type] = hooks;\n    });\n\n    return this;\n  },\n\n  /**\n   * Remove hook from the model\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   * @param {string|Function} name name of hook or function reference which was attached\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  removeHook(hookType, name) {\n    const isReference = typeof name === 'function' ? true : false;\n\n    if (!this.hasHook(hookType)) {\n      return this;\n    }\n\n    debug(`removing hook ${hookType}`);\n\n    // check for proxies, add them too\n    hookType = getProxiedHooks(hookType);\n\n    for (const type of hookType) {\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\n        if (isReference && typeof hook === 'function') {\n          return hook !== name; // check if same method\n        }\n        if (!isReference && typeof hook === 'object') {\n          return hook.name !== name;\n        }\n        return true;\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Check whether the mode has any hooks of this type\n   *\n   * @param {string} hookType @see {@link hookTypes}\n   *\n   * @alias hasHooks\n   *\n   * @memberof Sequelize\n   * @memberof Sequelize.Model\n   */\n  hasHook(hookType) {\n    return this.options.hooks[hookType] && !!this.options.hooks[hookType].length;\n  }\n};\nHooks.hasHooks = Hooks.hasHook;\n\n\nfunction applyTo(target, isModel = false) {\n  _.mixin(target, Hooks);\n\n  for (const hook of Object.keys(hookTypes)) {\n    if (isModel && hookTypes[hook].noModel) {\n      continue;\n    }\n    target[hook] = function(name, callback) {\n      return this.addHook(hook, name, callback);\n    };\n  }\n}\nexports.applyTo = applyTo;\n\n/**\n * A hook that is run before validation\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after validation\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterValidate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run when validation fails\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\n * @name validationFailed\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name afterCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeSave\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before upserting\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after upserting\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the result of upsert(), options\n * @name afterUpsert\n * @memberof Sequelize.Model\n */\n\n/**\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with attributes, options\n  * @name afterSave\n  * @memberof Sequelize.Model\n  */\n\n/**\n * A hook that is run before destroying a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name beforeRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n *\n * @name afterRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name beforeUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating a single instance\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance, options\n * @name afterUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before creating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name beforeBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after creating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instances, options\n * @name afterBulkCreate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before destroying instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after destroying instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkDestroy\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before restoring instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name beforeBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after restoring instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n *\n * @name afterBulkRestore\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before updating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after updating instances in bulk\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name afterBulkUpdate\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterExpandIncludeAll\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a find (select) query, after all option parsing is complete\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeFindAfterOptions\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run after a find (select) query\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with instance(s), options\n * @name afterFind\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a count query\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options\n * @name beforeCount\n * @memberof Sequelize.Model\n */\n\n/**\n * A hook that is run before a define call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with attributes, options\n * @name beforeDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a define call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with factory\n * @name afterDefine\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Sequelize() call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config, options\n * @name beforeInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Sequelize() call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with sequelize\n * @name afterInit\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is created\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with config passed to connection\n * @name beforeConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is created\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object and the config passed to connection\n * @name afterConnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before a connection is disconnected\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name beforeDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after a connection is disconnected\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with the connection object\n * @name afterDisconnect\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run before Model.sync call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name beforeSync\n * @memberof Sequelize\n */\n\n/**\n * A hook that is run after Model.sync call\n * @param {string}   name\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\n * @name afterSync\n * @memberof Sequelize\n */\n\n/**\n  * A hook that is run before sequelize.sync call\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name beforeBulkSync\n  * @memberof Sequelize\n  */\n\n/**\n  * A hook that is run after sequelize.sync call\n  * @param {string}   name\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\n  * @name afterBulkSync\n  * @memberof Sequelize\n  */\n"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAM;EAAEC;AAAF,IAAaD,OAAO,CAAC,gBAAD,CAA1B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMG,KAAK,GAAGF,MAAM,CAACG,YAAP,CAAoB,OAApB,CAAd;AAEA,MAAMC,SAAS,GAAG;EAChBC,cAAc,EAAE;IAAEC,MAAM,EAAE;EAAV,CADA;EAEhBC,aAAa,EAAE;IAAED,MAAM,EAAE;EAAV,CAFC;EAGhBE,gBAAgB,EAAE;IAAEF,MAAM,EAAE;EAAV,CAHF;EAIhBG,YAAY,EAAE;IAAEH,MAAM,EAAE;EAAV,CAJE;EAKhBI,WAAW,EAAE;IAAEJ,MAAM,EAAE;EAAV,CALG;EAMhBK,aAAa,EAAE;IAAEL,MAAM,EAAE;EAAV,CANC;EAOhBM,YAAY,EAAE;IAAEN,MAAM,EAAE;EAAV,CAPE;EAQhBO,aAAa,EAAE;IAAEP,MAAM,EAAE;EAAV,CARC;EAShBQ,YAAY,EAAE;IAAER,MAAM,EAAE;EAAV,CATE;EAUhBS,YAAY,EAAE;IAAET,MAAM,EAAE;EAAV,CAVE;EAWhBU,WAAW,EAAE;IAAEV,MAAM,EAAE;EAAV,CAXG;EAYhBW,UAAU,EAAE;IAAEX,MAAM,EAAE,CAAV;IAAaY,OAAO,EAAE,CAAC,cAAD,EAAiB,cAAjB;EAAtB,CAZI;EAahBC,SAAS,EAAE;IAAEb,MAAM,EAAE,CAAV;IAAaY,OAAO,EAAE,CAAC,aAAD,EAAgB,aAAhB;EAAtB,CAbK;EAchBE,YAAY,EAAE;IAAEd,MAAM,EAAE;EAAV,CAdE;EAehBe,WAAW,EAAE;IAAEf,MAAM,EAAE;EAAV,CAfG;EAgBhBgB,gBAAgB,EAAE;IAAEhB,MAAM,EAAE;EAAV,CAhBF;EAiBhBiB,eAAe,EAAE;IAAEjB,MAAM,EAAE;EAAV,CAjBD;EAkBhBkB,iBAAiB,EAAE;IAAElB,MAAM,EAAE;EAAV,CAlBH;EAmBhBmB,gBAAgB,EAAE;IAAEnB,MAAM,EAAE;EAAV,CAnBF;EAoBhBoB,iBAAiB,EAAE;IAAEpB,MAAM,EAAE;EAAV,CApBH;EAqBhBqB,gBAAgB,EAAE;IAAErB,MAAM,EAAE;EAAV,CArBF;EAsBhBsB,gBAAgB,EAAE;IAAEtB,MAAM,EAAE;EAAV,CAtBF;EAuBhBuB,eAAe,EAAE;IAAEvB,MAAM,EAAE;EAAV,CAvBD;EAwBhBwB,UAAU,EAAE;IAAExB,MAAM,EAAE;EAAV,CAxBI;EAyBhByB,+BAA+B,EAAE;IAAEzB,MAAM,EAAE;EAAV,CAzBjB;EA0BhB0B,sBAAsB,EAAE;IAAE1B,MAAM,EAAE;EAAV,CA1BR;EA2BhB2B,SAAS,EAAE;IAAE3B,MAAM,EAAE;EAAV,CA3BK;EA4BhB4B,WAAW,EAAE;IAAE5B,MAAM,EAAE;EAAV,CA5BG;EA6BhB6B,YAAY,EAAE;IAAE7B,MAAM,EAAE,CAAV;IAAa8B,IAAI,EAAE,IAAnB;IAAyBC,OAAO,EAAE;EAAlC,CA7BE;EA8BhBC,WAAW,EAAE;IAAEhC,MAAM,EAAE,CAAV;IAAa8B,IAAI,EAAE,IAAnB;IAAyBC,OAAO,EAAE;EAAlC,CA9BG;EA+BhBE,UAAU,EAAE;IAAEjC,MAAM,EAAE,CAAV;IAAa8B,IAAI,EAAE,IAAnB;IAAyBC,OAAO,EAAE;EAAlC,CA/BI;EAgChBG,SAAS,EAAE;IAAElC,MAAM,EAAE,CAAV;IAAa8B,IAAI,EAAE,IAAnB;IAAyBC,OAAO,EAAE;EAAlC,CAhCK;EAiChBI,eAAe,EAAE;IAAEnC,MAAM,EAAE,CAAV;IAAa8B,IAAI,EAAE;EAAnB,CAjCD;EAkChBM,cAAc,EAAE;IAAEpC,MAAM,EAAE,CAAV;IAAa8B,IAAI,EAAE;EAAnB,CAlCA;EAmChBO,aAAa,EAAE;IAAErC,MAAM,EAAE,CAAV;IAAa+B,OAAO,EAAE;EAAtB,CAnCC;EAoChBO,YAAY,EAAE;IAAEtC,MAAM,EAAE,CAAV;IAAa+B,OAAO,EAAE;EAAtB,CApCE;EAqChBQ,gBAAgB,EAAE;IAAEvC,MAAM,EAAE,CAAV;IAAa+B,OAAO,EAAE;EAAtB,CArCF;EAsChBS,eAAe,EAAE;IAAExC,MAAM,EAAE,CAAV;IAAa+B,OAAO,EAAE;EAAtB,CAtCD;EAuChBU,UAAU,EAAE;IAAEzC,MAAM,EAAE;EAAV,CAvCI;EAwChB0C,SAAS,EAAE;IAAE1C,MAAM,EAAE;EAAV,CAxCK;EAyChB2C,cAAc,EAAE;IAAE3C,MAAM,EAAE;EAAV,CAzCA;EA0ChB4C,aAAa,EAAE;IAAE5C,MAAM,EAAE;EAAV,CA1CC;EA2ChB6C,WAAW,EAAE;IAAE7C,MAAM,EAAE;EAAV,CA3CG;EA4ChB8C,UAAU,EAAE;IAAE9C,MAAM,EAAE;EAAV;AA5CI,CAAlB;AA8CA+C,OAAO,CAACC,KAAR,GAAgBlD,SAAhB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMmD,eAAe,GAAGC,QAAQ,IAC9BpD,SAAS,CAACoD,QAAD,CAAT,CAAoBtC,OAApB,GACId,SAAS,CAACoD,QAAD,CAAT,CAAoBtC,OAApB,CAA4BuC,MAA5B,CAAmCD,QAAnC,CADJ,GAEI,CAACA,QAAD,CAHN;;AAMA,SAASE,QAAT,CAAkBC,MAAlB,EAA0BH,QAA1B,EAAoC;EAClC,OAAO,CAACG,MAAM,CAACC,OAAP,CAAeN,KAAf,IAAwB,EAAzB,EAA6BE,QAA7B,KAA0C,EAAjD;AACD;;AAED,MAAMK,KAAK,GAAG;EACZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACR,KAAD,EAAQ;IACjB,KAAKM,OAAL,CAAaN,KAAb,GAAqB,EAArB;;IACAxD,CAAC,CAACiE,GAAF,CAAMT,KAAK,IAAI,EAAf,EAAmB,CAACU,UAAD,EAAaC,QAAb,KAA0B;MAC3C,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,UAAd,CAAL,EAAgCA,UAAU,GAAG,CAACA,UAAD,CAAb;MAChCA,UAAU,CAACI,OAAX,CAAmBC,MAAM,IAAI,KAAKC,OAAL,CAAaL,QAAb,EAAuBI,MAAvB,CAA7B;IACD,CAHD;EAID,CAhBW;;EAkBZE,QAAQ,CAACjB,KAAD,EAAqB;IAAA,kCAAVkB,QAAU;MAAVA,QAAU;IAAA;;IAC3B,IAAI,CAAClB,KAAL,EAAY,MAAM,IAAImB,KAAJ,CAAU,uCAAV,CAAN;IAEZ,IAAIjB,QAAJ;;IAEA,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;MAC7BE,QAAQ,GAAGF,KAAX;MACAA,KAAK,GAAGI,QAAQ,CAAC,IAAD,EAAOF,QAAP,CAAhB;;MAEA,IAAI,KAAKkB,SAAT,EAAoB;QAClBpB,KAAK,GAAGA,KAAK,CAACG,MAAN,CAAaC,QAAQ,CAAC,KAAKgB,SAAN,EAAiBlB,QAAjB,CAArB,CAAR;MACD;IACF;;IAED,IAAI,CAACU,KAAK,CAACC,OAAN,CAAcb,KAAd,CAAL,EAA2B;MACzBA,KAAK,GAAG,CAACA,KAAD,CAAR;IACD,CAhB0B,CAkB3B;;;IACA,IAAIlD,SAAS,CAACoD,QAAD,CAAT,IAAuBpD,SAAS,CAACoD,QAAD,CAAT,CAAoBpB,IAA/C,EAAqD;MACnD,KAAK,IAAIuC,IAAT,IAAiBrB,KAAjB,EAAwB;QACtB,IAAI,OAAOqB,IAAP,KAAgB,QAApB,EAA8B;UAC5BA,IAAI,GAAGA,IAAI,CAACC,EAAZ;QACD;;QAED1E,KAAK,CAAE,sBAAqBsD,QAAS,EAAhC,CAAL;QACAmB,IAAI,CAACE,KAAL,CAAW,IAAX,EAAiBL,QAAjB;MACD;;MACD;IACD,CA7B0B,CA+B3B;;;IACA,OAAOvE,OAAO,CAAC6E,IAAR,CAAaxB,KAAb,EAAoBqB,IAAI,IAAI;MACjC,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;QAC5BA,IAAI,GAAGA,IAAI,CAACC,EAAZ;MACD;;MAED1E,KAAK,CAAE,gBAAesD,QAAS,EAA1B,CAAL;MACA,OAAOmB,IAAI,CAACE,KAAL,CAAW,IAAX,EAAiBL,QAAjB,CAAP;IACD,CAPM,EAOJO,MAPI,EAAP;EAQD,CA1DW;;EA4DZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACET,OAAO,CAACd,QAAD,EAAWwB,IAAX,EAAiBJ,EAAjB,EAAqB;IAC1B,IAAI,OAAOI,IAAP,KAAgB,UAApB,EAAgC;MAC9BJ,EAAE,GAAGI,IAAL;MACAA,IAAI,GAAG,IAAP;IACD;;IAED9E,KAAK,CAAE,eAAcsD,QAAS,EAAzB,CAAL,CAN0B,CAO1B;;IACAA,QAAQ,GAAGD,eAAe,CAACC,QAAD,CAA1B;IAEAA,QAAQ,CAACY,OAAT,CAAiBa,IAAI,IAAI;MACvB,MAAM3B,KAAK,GAAGI,QAAQ,CAAC,IAAD,EAAOuB,IAAP,CAAtB;MACA3B,KAAK,CAAC4B,IAAN,CAAWF,IAAI,GAAG;QAAEA,IAAF;QAAQJ;MAAR,CAAH,GAAkBA,EAAjC;MACA,KAAKhB,OAAL,CAAaN,KAAb,CAAmB2B,IAAnB,IAA2B3B,KAA3B;IACD,CAJD;IAMA,OAAO,IAAP;EACD,CAvFW;;EAyFZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE6B,UAAU,CAAC3B,QAAD,EAAWwB,IAAX,EAAiB;IACzB,MAAMI,WAAW,GAAG,OAAOJ,IAAP,KAAgB,UAAhB,GAA6B,IAA7B,GAAoC,KAAxD;;IAEA,IAAI,CAAC,KAAKK,OAAL,CAAa7B,QAAb,CAAL,EAA6B;MAC3B,OAAO,IAAP;IACD;;IAEDtD,KAAK,CAAE,iBAAgBsD,QAAS,EAA3B,CAAL,CAPyB,CASzB;;IACAA,QAAQ,GAAGD,eAAe,CAACC,QAAD,CAA1B;;IAEA,KAAK,MAAMyB,IAAX,IAAmBzB,QAAnB,EAA6B;MAC3B,KAAKI,OAAL,CAAaN,KAAb,CAAmB2B,IAAnB,IAA2B,KAAKrB,OAAL,CAAaN,KAAb,CAAmB2B,IAAnB,EAAyBK,MAAzB,CAAgCX,IAAI,IAAI;QACjE,IAAIS,WAAW,IAAI,OAAOT,IAAP,KAAgB,UAAnC,EAA+C;UAC7C,OAAOA,IAAI,KAAKK,IAAhB,CAD6C,CACvB;QACvB;;QACD,IAAI,CAACI,WAAD,IAAgB,OAAOT,IAAP,KAAgB,QAApC,EAA8C;UAC5C,OAAOA,IAAI,CAACK,IAAL,KAAcA,IAArB;QACD;;QACD,OAAO,IAAP;MACD,CAR0B,CAA3B;IASD;;IAED,OAAO,IAAP;EACD,CA3HW;;EA6HZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,OAAO,CAAC7B,QAAD,EAAW;IAChB,OAAO,KAAKI,OAAL,CAAaN,KAAb,CAAmBE,QAAnB,KAAgC,CAAC,CAAC,KAAKI,OAAL,CAAaN,KAAb,CAAmBE,QAAnB,EAA6B+B,MAAtE;EACD;;AAzIW,CAAd;AA2IA1B,KAAK,CAAC2B,QAAN,GAAiB3B,KAAK,CAACwB,OAAvB;;AAGA,SAASI,OAAT,CAAiBC,MAAjB,EAA0C;EAAA,IAAjBC,OAAiB,uEAAP,KAAO;;EACxC7F,CAAC,CAAC8F,KAAF,CAAQF,MAAR,EAAgB7B,KAAhB;;EAEA,KAAK,MAAMc,IAAX,IAAmBkB,MAAM,CAACC,IAAP,CAAY1F,SAAZ,CAAnB,EAA2C;IACzC,IAAIuF,OAAO,IAAIvF,SAAS,CAACuE,IAAD,CAAT,CAAgBtC,OAA/B,EAAwC;MACtC;IACD;;IACDqD,MAAM,CAACf,IAAD,CAAN,GAAe,UAASK,IAAT,EAAee,QAAf,EAAyB;MACtC,OAAO,KAAKzB,OAAL,CAAaK,IAAb,EAAmBK,IAAnB,EAAyBe,QAAzB,CAAP;IACD,CAFD;EAGD;AACF;;AACD1C,OAAO,CAACoC,OAAR,GAAkBA,OAAl},"metadata":{},"sourceType":"script"}