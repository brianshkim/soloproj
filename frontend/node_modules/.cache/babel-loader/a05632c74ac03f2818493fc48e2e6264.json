{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst wkx = require('wkx');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'http://www.postgresql.org/docs/9.4/static/datatype.html');\n  /**\n   * Removes unsupported Postgres options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {Object} dataType The base integer data type.\n   * @private\n   */\n\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`PostgresSQL does not support '${dataType.key}' with LENGTH, UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n  /**\n   * types:\n   * {\n   *   oids: [oid],\n   *   array_oids: [oid]\n   * }\n   * @see oid here https://github.com/lib/pq/blob/master/oid/types.go\n   */\n\n\n  BaseTypes.UUID.types.postgres = ['uuid'];\n  BaseTypes.CIDR.types.postgres = ['cidr'];\n  BaseTypes.INET.types.postgres = ['inet'];\n  BaseTypes.MACADDR.types.postgres = ['macaddr'];\n  BaseTypes.JSON.types.postgres = ['json'];\n  BaseTypes.JSONB.types.postgres = ['jsonb'];\n  BaseTypes.TIME.types.postgres = ['time'];\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return 'Infinity';\n      }\n\n      if (value === -Infinity) {\n        return '-Infinity';\n      }\n\n      return super._stringify(value, options);\n    }\n\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && value !== Infinity && value !== -Infinity) {\n        if (typeof value === 'string') {\n          const lower = value.toLowerCase();\n\n          if (lower === 'infinity') {\n            return Infinity;\n          }\n\n          if (lower === '-infinity') {\n            return -Infinity;\n          }\n        }\n\n        return super._sanitize(value);\n      }\n\n      return value;\n    }\n\n    static parse(value) {\n      if (value === 'infinity') {\n        return Infinity;\n      }\n\n      if (value === '-infinity') {\n        return -Infinity;\n      }\n\n      return value;\n    }\n\n  }\n\n  BaseTypes.DATEONLY.types.postgres = ['date'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    static parse(value) {\n      return value;\n    }\n\n  } // numeric\n\n\n  BaseTypes.DECIMAL.types.postgres = ['numeric'];\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return 'BYTEA';\n      }\n\n      return super.toSql();\n    }\n\n  }\n\n  BaseTypes.STRING.types.postgres = ['varchar'];\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n\n      return 'TEXT';\n    }\n\n  }\n\n  BaseTypes.TEXT.types.postgres = ['text'];\n\n  class CITEXT extends BaseTypes.CITEXT {\n    static parse(value) {\n      return value;\n    }\n\n  }\n\n  BaseTypes.CITEXT.types.postgres = ['citext'];\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return 'BYTEA';\n      }\n\n      return super.toSql();\n    }\n\n  }\n\n  BaseTypes.CHAR.types.postgres = ['char', 'bpchar'];\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n\n    _sanitize(value) {\n      if (value !== null && value !== undefined) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          // Bit fields are returned as buffers\n          value = value[0];\n        }\n\n        if (typeof value === 'string') {\n          // Only take action on valid boolean strings.\n          return value === 'true' || value === 't' ? true : value === 'false' || value === 'f' ? false : value;\n        }\n\n        if (typeof value === 'number') {\n          // Only take action on valid boolean integers.\n          return value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n\n      return value;\n    }\n\n  }\n\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n  BaseTypes.BOOLEAN.types.postgres = ['bool'];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP WITH TIME ZONE';\n    }\n\n    validate(value) {\n      if (value !== Infinity && value !== -Infinity) {\n        return super.validate(value);\n      }\n\n      return true;\n    }\n\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return 'Infinity';\n      }\n\n      if (value === -Infinity) {\n        return '-Infinity';\n      }\n\n      return super._stringify(value, options);\n    }\n\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && !(value instanceof Date) && !!value && value !== Infinity && value !== -Infinity) {\n        if (typeof value === 'string') {\n          const lower = value.toLowerCase();\n\n          if (lower === 'infinity') {\n            return Infinity;\n          }\n\n          if (lower === '-infinity') {\n            return -Infinity;\n          }\n        }\n\n        return new Date(value);\n      }\n\n      return value;\n    }\n\n  }\n\n  BaseTypes.DATE.types.postgres = ['timestamptz'];\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  } // int2\n\n\n  BaseTypes.TINYINT.types.postgres = ['int2'];\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  } // int2\n\n\n  BaseTypes.SMALLINT.types.postgres = ['int2'];\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  }\n\n  INTEGER.parse = function parse(value) {\n    return parseInt(value, 10);\n  }; // int4\n\n\n  BaseTypes.INTEGER.types.postgres = ['int4'];\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  } // int8\n\n\n  BaseTypes.BIGINT.types.postgres = ['int8'];\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  } // float4\n\n\n  BaseTypes.REAL.types.postgres = ['float4'];\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n  } // float8\n\n\n  BaseTypes.DOUBLE.types.postgres = ['float8'];\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals); // POSTGRES does only support lengths as parameter.\n      // Values between 1-24 result in REAL\n      // Values between 25-53 result in DOUBLE PRECISION\n      // If decimals are provided remove these and print a warning\n\n      if (this._decimals) {\n        warn('PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._decimals = undefined;\n      }\n\n      if (this._unsigned) {\n        warn('PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n\n      if (this._zerofill) {\n        warn('PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n\n  }\n\n  delete FLOAT.parse; // Float has no separate type in PG\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        warn('PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.');\n        this._length = undefined;\n      }\n\n      return 'BYTEA';\n    }\n\n    _hexify(hex) {\n      // bytea hex format http://www.postgresql.org/docs/current/static/datatype-binary.html\n      return `E'\\\\\\\\x${hex}'`;\n    }\n\n  }\n\n  BaseTypes.BLOB.types.postgres = ['bytea'];\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    toSql() {\n      let result = this.key;\n\n      if (this.type) {\n        result += `(${this.type}`;\n\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n\n        result += ')';\n      }\n\n      return result;\n    }\n\n    static parse(value) {\n      const b = Buffer.from(value, 'hex');\n      return wkx.Geometry.parse(b).toGeoJSON();\n    }\n\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n\n    _bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n\n  }\n\n  BaseTypes.GEOMETRY.types.postgres = ['geometry'];\n\n  class GEOGRAPHY extends BaseTypes.GEOGRAPHY {\n    toSql() {\n      let result = 'GEOGRAPHY';\n\n      if (this.type) {\n        result += `(${this.type}`;\n\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n\n        result += ')';\n      }\n\n      return result;\n    }\n\n    static parse(value) {\n      const b = Buffer.from(value, 'hex');\n      return wkx.Geometry.parse(b).toGeoJSON();\n    }\n\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n\n    bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n\n  }\n\n  BaseTypes.GEOGRAPHY.types.postgres = ['geography'];\n  let hstore;\n\n  class HSTORE extends BaseTypes.HSTORE {\n    constructor() {\n      super();\n\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n    }\n\n    _value(value) {\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n\n      return hstore.stringify(value);\n    }\n\n    _stringify(value) {\n      return `'${this._value(value)}'`;\n    }\n\n    _bindParam(value, options) {\n      return options.bindParam(this._value(value));\n    }\n\n    static parse(value) {\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n\n      return hstore.parse(value);\n    }\n\n  }\n\n  HSTORE.prototype.escape = false;\n  BaseTypes.HSTORE.types.postgres = ['hstore'];\n\n  class RANGE extends BaseTypes.RANGE {\n    _value(values, options) {\n      if (!Array.isArray(values)) {\n        return this.options.subtype.stringify(values, options);\n      }\n\n      const valueInclusivity = [true, false];\n      const valuesStringified = values.map((value, index) => {\n        if (_.isObject(value) && Object.prototype.hasOwnProperty.call(value, 'value')) {\n          if (Object.prototype.hasOwnProperty.call(value, 'inclusive')) {\n            valueInclusivity[index] = value.inclusive;\n          }\n\n          value = value.value;\n        }\n\n        if (value === null || value === -Infinity || value === Infinity) {\n          // Pass through \"unbounded\" bounds unchanged\n          return value;\n        }\n\n        if (this.options.subtype.stringify) {\n          return this.options.subtype.stringify(value, options);\n        }\n\n        return options.escape(value);\n      }); // Array.map does not preserve extra array properties\n\n      valuesStringified.inclusive = valueInclusivity;\n      return range.stringify(valuesStringified);\n    }\n\n    _stringify(values, options) {\n      const value = this._value(values, options);\n\n      if (!Array.isArray(values)) {\n        return `'${value}'::${this.toCastType()}`;\n      }\n\n      return `'${value}'`;\n    }\n\n    _bindParam(values, options) {\n      const value = this._value(values, options);\n\n      if (!Array.isArray(values)) {\n        return `${options.bindParam(value)}::${this.toCastType()}`;\n      }\n\n      return options.bindParam(value);\n    }\n\n    toSql() {\n      return BaseTypes.RANGE.types.postgres.subtypes[this._subtype.toLowerCase()];\n    }\n\n    toCastType() {\n      return BaseTypes.RANGE.types.postgres.castTypes[this._subtype.toLowerCase()];\n    }\n\n    static parse(value) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        parser: val => val\n      };\n      return range.parse(value, options.parser);\n    }\n\n  }\n\n  const range = require('./range');\n\n  RANGE.prototype.escape = false;\n  BaseTypes.RANGE.types.postgres = {\n    subtypes: {\n      integer: 'int4range',\n      decimal: 'numrange',\n      date: 'tstzrange',\n      dateonly: 'daterange',\n      bigint: 'int8range'\n    },\n    castTypes: {\n      integer: 'int4',\n      decimal: 'numeric',\n      date: 'timestamptz',\n      dateonly: 'date',\n      bigint: 'int8'\n    }\n  }; // TODO: Why are base types being manipulated??\n\n  BaseTypes.ARRAY.prototype.escape = false;\n\n  BaseTypes.ARRAY.prototype._value = function _value(values, options) {\n    return values.map(value => {\n      if (options && options.bindParam && this.type && this.type._value) {\n        return this.type._value(value, options);\n      }\n\n      if (this.type && this.type.stringify) {\n        value = this.type.stringify(value, options);\n\n        if (this.type.escape === false) {\n          return value;\n        }\n      }\n\n      return options.escape(value);\n    }, this);\n  };\n\n  BaseTypes.ARRAY.prototype._stringify = function _stringify(values, options) {\n    let str = `ARRAY[${this._value(values, options).join(',')}]`;\n\n    if (this.type) {\n      const Utils = require('../../utils');\n\n      let castKey = this.toSql();\n\n      if (this.type instanceof BaseTypes.ENUM) {\n        castKey = `${Utils.addTicks(Utils.generateEnumName(options.field.Model.getTableName(), options.field.fieldName), '\"')}[]`;\n      }\n\n      str += `::${castKey}`;\n    }\n\n    return str;\n  };\n\n  BaseTypes.ARRAY.prototype._bindParam = function _bindParam(values, options) {\n    return options.bindParam(this._value(values, options));\n  };\n\n  class ENUM extends BaseTypes.ENUM {\n    static parse(value) {\n      return value;\n    }\n\n  }\n\n  BaseTypes.ENUM.types.postgres = [null];\n  return {\n    DECIMAL,\n    BLOB,\n    STRING,\n    CHAR,\n    TEXT,\n    CITEXT,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    BOOLEAN,\n    DATE,\n    DATEONLY,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    FLOAT,\n    GEOMETRY,\n    GEOGRAPHY,\n    HSTORE,\n    RANGE,\n    ENUM\n  };\n};","map":{"version":3,"names":["_","require","wkx","module","exports","BaseTypes","warn","ABSTRACT","bind","undefined","removeUnsupportedIntegerOptions","dataType","_length","options","length","_unsigned","_zerofill","key","UUID","types","postgres","CIDR","INET","MACADDR","JSON","JSONB","TIME","DATEONLY","_stringify","value","Infinity","_sanitize","raw","lower","toLowerCase","parse","DECIMAL","STRING","toSql","_binary","TEXT","CITEXT","CHAR","BOOLEAN","Buffer","isBuffer","prototype","DATE","validate","Date","TINYINT","constructor","SMALLINT","INTEGER","parseInt","BIGINT","REAL","DOUBLE","FLOAT","decimals","_decimals","BLOB","_hexify","hex","GEOMETRY","result","type","srid","b","from","Geometry","toGeoJSON","escape","stringify","_bindParam","bindParam","GEOGRAPHY","hstore","HSTORE","_value","RANGE","values","Array","isArray","subtype","valueInclusivity","valuesStringified","map","index","isObject","Object","hasOwnProperty","call","inclusive","range","toCastType","subtypes","_subtype","castTypes","parser","val","integer","decimal","date","dateonly","bigint","ARRAY","str","join","Utils","castKey","ENUM","addTicks","generateEnumName","field","Model","getTableName","fieldName"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/postgres/data-types.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst wkx = require('wkx');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'http://www.postgresql.org/docs/9.4/static/datatype.html');\n\n  /**\n   * Removes unsupported Postgres options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {Object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._unsigned || dataType._zerofill) {\n      warn(`PostgresSQL does not support '${dataType.key}' with LENGTH, UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * types:\n   * {\n   *   oids: [oid],\n   *   array_oids: [oid]\n   * }\n   * @see oid here https://github.com/lib/pq/blob/master/oid/types.go\n   */\n\n  BaseTypes.UUID.types.postgres = ['uuid'];\n  BaseTypes.CIDR.types.postgres = ['cidr'];\n  BaseTypes.INET.types.postgres = ['inet'];\n  BaseTypes.MACADDR.types.postgres = ['macaddr'];\n  BaseTypes.JSON.types.postgres = ['json'];\n  BaseTypes.JSONB.types.postgres = ['jsonb'];\n  BaseTypes.TIME.types.postgres = ['time'];\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return 'Infinity';\n      }\n      if (value === -Infinity) {\n        return '-Infinity';\n      }\n      return super._stringify(value, options);\n    }\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && value !== Infinity && value !== -Infinity) {\n        if (typeof value === 'string') {\n          const lower = value.toLowerCase();\n          if (lower === 'infinity') {\n            return Infinity;\n          }\n          if (lower === '-infinity') {\n            return -Infinity;\n          }\n        }\n        return super._sanitize(value);\n      }\n      return value;\n    }\n    static parse(value) {\n      if (value === 'infinity') {\n        return Infinity;\n      }\n      if (value === '-infinity') {\n        return -Infinity;\n      }\n      return value;\n    }\n  }\n\n  BaseTypes.DATEONLY.types.postgres = ['date'];\n\n  class DECIMAL extends BaseTypes.DECIMAL {\n    static parse(value) {\n      return value;\n    }\n  }\n\n  // numeric\n  BaseTypes.DECIMAL.types.postgres = ['numeric'];\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return 'BYTEA';\n      }\n      return super.toSql();\n    }\n  }\n\n  BaseTypes.STRING.types.postgres = ['varchar'];\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('PostgreSQL does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n      return 'TEXT';\n    }\n  }\n\n  BaseTypes.TEXT.types.postgres = ['text'];\n\n  class CITEXT extends BaseTypes.CITEXT {\n    static parse(value) {\n      return value;\n    }\n  }\n\n  BaseTypes.CITEXT.types.postgres = ['citext'];\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return 'BYTEA';\n      }\n      return super.toSql();\n    }\n  }\n\n  BaseTypes.CHAR.types.postgres = ['char', 'bpchar'];\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n    _sanitize(value) {\n      if (value !== null && value !== undefined) {\n        if (Buffer.isBuffer(value) && value.length === 1) {\n          // Bit fields are returned as buffers\n          value = value[0];\n        }\n        if (typeof value === 'string') {\n          // Only take action on valid boolean strings.\n          return value === 'true' || value === 't' ? true : value === 'false' || value === 'f' ? false : value;\n        }\n        if (typeof value === 'number') {\n          // Only take action on valid boolean integers.\n          return value === 1 ? true : value === 0 ? false : value;\n        }\n      }\n      return value;\n    }\n  }\n\n  BOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n  BaseTypes.BOOLEAN.types.postgres = ['bool'];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP WITH TIME ZONE';\n    }\n    validate(value) {\n      if (value !== Infinity && value !== -Infinity) {\n        return super.validate(value);\n      }\n      return true;\n    }\n    _stringify(value, options) {\n      if (value === Infinity) {\n        return 'Infinity';\n      }\n      if (value === -Infinity) {\n        return '-Infinity';\n      }\n      return super._stringify(value, options);\n    }\n    _sanitize(value, options) {\n      if ((!options || options && !options.raw) && !(value instanceof Date) && !!value && value !== Infinity && value !== -Infinity) {\n        if (typeof value === 'string') {\n          const lower = value.toLowerCase();\n          if (lower === 'infinity') {\n            return Infinity;\n          }\n          if (lower === '-infinity') {\n            return -Infinity;\n          }\n        }\n        return new Date(value);\n      }\n      return value;\n    }\n  }\n\n  BaseTypes.DATE.types.postgres = ['timestamptz'];\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // int2\n  BaseTypes.TINYINT.types.postgres = ['int2'];\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // int2\n  BaseTypes.SMALLINT.types.postgres = ['int2'];\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  INTEGER.parse = function parse(value) {\n    return parseInt(value, 10);\n  };\n\n  // int4\n  BaseTypes.INTEGER.types.postgres = ['int4'];\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // int8\n  BaseTypes.BIGINT.types.postgres = ['int8'];\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // float4\n  BaseTypes.REAL.types.postgres = ['float4'];\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  // float8\n  BaseTypes.DOUBLE.types.postgres = ['float8'];\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      // POSTGRES does only support lengths as parameter.\n      // Values between 1-24 result in REAL\n      // Values between 25-53 result in DOUBLE PRECISION\n      // If decimals are provided remove these and print a warning\n      if (this._decimals) {\n        warn('PostgreSQL does not support FLOAT with decimals. Plain `FLOAT` will be used instead.');\n        this._length = undefined;\n        this.options.length = undefined;\n        this._decimals = undefined;\n      }\n      if (this._unsigned) {\n        warn('PostgreSQL does not support FLOAT unsigned. `UNSIGNED` was removed.');\n        this._unsigned = undefined;\n      }\n      if (this._zerofill) {\n        warn('PostgreSQL does not support FLOAT zerofill. `ZEROFILL` was removed.');\n        this._zerofill = undefined;\n      }\n    }\n  }\n  delete FLOAT.parse; // Float has no separate type in PG\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        warn('PostgreSQL does not support BLOB (BYTEA) with options. Plain `BYTEA` will be used instead.');\n        this._length = undefined;\n      }\n      return 'BYTEA';\n    }\n    _hexify(hex) {\n      // bytea hex format http://www.postgresql.org/docs/current/static/datatype-binary.html\n      return `E'\\\\\\\\x${hex}'`;\n    }\n  }\n\n  BaseTypes.BLOB.types.postgres = ['bytea'];\n\n  class GEOMETRY extends BaseTypes.GEOMETRY {\n    toSql() {\n      let result = this.key;\n      if (this.type) {\n        result += `(${this.type}`;\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n    static parse(value) {\n      const b = Buffer.from(value, 'hex');\n      return wkx.Geometry.parse(b).toGeoJSON();\n    }\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n    _bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n  }\n\n  BaseTypes.GEOMETRY.types.postgres = ['geometry'];\n\n\n  class GEOGRAPHY extends BaseTypes.GEOGRAPHY {\n    toSql() {\n      let result = 'GEOGRAPHY';\n      if (this.type) {\n        result += `(${this.type}`;\n        if (this.srid) {\n          result += `,${this.srid}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n    static parse(value) {\n      const b = Buffer.from(value, 'hex');\n      return wkx.Geometry.parse(b).toGeoJSON();\n    }\n    _stringify(value, options) {\n      return `ST_GeomFromGeoJSON(${options.escape(JSON.stringify(value))})`;\n    }\n    bindParam(value, options) {\n      return `ST_GeomFromGeoJSON(${options.bindParam(value)})`;\n    }\n  }\n\n  BaseTypes.GEOGRAPHY.types.postgres = ['geography'];\n\n  let hstore;\n\n  class HSTORE extends BaseTypes.HSTORE {\n    constructor() {\n      super();\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n    }\n    _value(value) {\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n      return hstore.stringify(value);\n    }\n    _stringify(value) {\n      return `'${this._value(value)}'`;\n    }\n    _bindParam(value, options) {\n      return options.bindParam(this._value(value));\n    }\n    static parse(value) {\n      if (!hstore) {\n        // All datatype files are loaded at import - make sure we don't load the hstore parser before a hstore is instantiated\n        hstore = require('./hstore');\n      }\n      return hstore.parse(value);\n    }\n  }\n\n  HSTORE.prototype.escape = false;\n\n  BaseTypes.HSTORE.types.postgres = ['hstore'];\n\n  class RANGE extends BaseTypes.RANGE {\n    _value(values, options) {\n      if (!Array.isArray(values)) {\n        return this.options.subtype.stringify(values, options);\n      }\n      const valueInclusivity = [true, false];\n      const valuesStringified = values.map((value, index) => {\n        if (_.isObject(value) && Object.prototype.hasOwnProperty.call(value, 'value')) {\n          if (Object.prototype.hasOwnProperty.call(value, 'inclusive')) {\n            valueInclusivity[index] = value.inclusive;\n          }\n          value = value.value;\n        }\n        if (value === null || value === -Infinity || value === Infinity) {\n          // Pass through \"unbounded\" bounds unchanged\n          return value;\n        }\n        if (this.options.subtype.stringify) {\n          return this.options.subtype.stringify(value, options);\n        }\n        return options.escape(value);\n      });\n      // Array.map does not preserve extra array properties\n      valuesStringified.inclusive = valueInclusivity;\n      return range.stringify(valuesStringified);\n    }\n    _stringify(values, options) {\n      const value = this._value(values, options);\n      if (!Array.isArray(values)) {\n        return `'${value}'::${this.toCastType()}`;\n      }\n      return `'${value}'`;\n    }\n    _bindParam(values, options) {\n      const value = this._value(values, options);\n      if (!Array.isArray(values)) {\n        return `${options.bindParam(value)}::${this.toCastType()}`;\n      }\n      return options.bindParam(value);\n    }\n    toSql() {\n      return BaseTypes.RANGE.types.postgres.subtypes[this._subtype.toLowerCase()];\n    }\n    toCastType() {\n      return BaseTypes.RANGE.types.postgres.castTypes[this._subtype.toLowerCase()];\n    }\n    static parse(value, options = { parser: val => val }) {\n      return range.parse(value, options.parser);\n    }\n  }\n  const range = require('./range');\n\n  RANGE.prototype.escape = false;\n\n  BaseTypes.RANGE.types.postgres = {\n    subtypes: {\n      integer: 'int4range',\n      decimal: 'numrange',\n      date: 'tstzrange',\n      dateonly: 'daterange',\n      bigint: 'int8range'\n    },\n    castTypes: {\n      integer: 'int4',\n      decimal: 'numeric',\n      date: 'timestamptz',\n      dateonly: 'date',\n      bigint: 'int8'\n    }\n  };\n\n  // TODO: Why are base types being manipulated??\n  BaseTypes.ARRAY.prototype.escape = false;\n  BaseTypes.ARRAY.prototype._value = function _value(values, options) {\n    return values.map(value => {\n      if (options && options.bindParam && this.type && this.type._value) {\n        return this.type._value(value, options);\n      }\n      if (this.type && this.type.stringify) {\n        value = this.type.stringify(value, options);\n\n        if (this.type.escape === false) {\n          return value;\n        }\n      }\n      return options.escape(value);\n    }, this);\n  };\n  BaseTypes.ARRAY.prototype._stringify = function _stringify(values, options) {\n    let str = `ARRAY[${this._value(values, options).join(',')}]`;\n\n    if (this.type) {\n      const Utils = require('../../utils');\n      let castKey = this.toSql();\n\n      if (this.type instanceof BaseTypes.ENUM) {\n        castKey = `${Utils.addTicks(\n          Utils.generateEnumName(options.field.Model.getTableName(), options.field.fieldName),\n          '\"'\n        ) }[]`;\n      }\n\n      str += `::${castKey}`;\n    }\n\n    return str;\n  };\n  BaseTypes.ARRAY.prototype._bindParam = function _bindParam(values, options) {\n    return options.bindParam(this._value(values, options));\n  };\n\n  class ENUM extends BaseTypes.ENUM {\n    static parse(value) {\n      return value;\n    }\n  }\n\n  BaseTypes.ENUM.types.postgres = [null];\n\n  return {\n    DECIMAL,\n    BLOB,\n    STRING,\n    CHAR,\n    TEXT,\n    CITEXT,\n    TINYINT,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    BOOLEAN,\n    DATE,\n    DATEONLY,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    FLOAT,\n    GEOMETRY,\n    GEOGRAPHY,\n    HSTORE,\n    RANGE,\n    ENUM\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}