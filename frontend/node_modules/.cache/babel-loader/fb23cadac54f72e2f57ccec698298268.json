{"ast":null,"code":"/**\n * Quote helpers implement quote ability for all dialects.\n * These are basic block of query building\n *\n * Its better to implement all dialect implementation together here. Which will allow\n * even abstract generator to use them by just specifying dialect type.\n *\n * Defining these helpers in each query dialect will leave\n * code in dual dependency of abstract <-> specific dialect\n */\n'use strict';\n\nconst Utils = require('../../../../utils');\n/**\n * list of reserved words in PostgreSQL 10\n * source: https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html\n *\n * @private\n */\n\n\nconst postgresReservedWords = 'all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with'.split(',');\n/**\n *\n * @param {string}  dialect         Dialect name\n * @param {string}  identifier      Identifier to quote\n * @param {Object}  [options]\n * @param {boolean} [options.force=false]\n * @param {boolean} [options.quoteIdentifiers=true]\n *\n * @returns {string}\n * @private\n */\n\nfunction quoteIdentifier(dialect, identifier, options) {\n  if (identifier === '*') return identifier;\n  options = Utils.defaults(options || {}, {\n    force: false,\n    quoteIdentifiers: true\n  });\n\n  switch (dialect) {\n    case 'sqlite':\n    case 'mariadb':\n    case 'mysql':\n      return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n\n    case 'postgres':\n      const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n      if (options.force !== true && options.quoteIdentifiers === false && !identifier.includes('.') && !identifier.includes('->') && !postgresReservedWords.includes(rawIdentifier.toLowerCase())) {\n        // In Postgres, if tables or attributes are created double-quoted,\n        // they are also case sensitive. If they contain any uppercase\n        // characters, they must always be double-quoted. This makes it\n        // impossible to write queries in portable SQL if tables are created in\n        // this way. Hence, we strip quotes if we don't want case sensitivity.\n        return rawIdentifier;\n      }\n\n      return Utils.addTicks(rawIdentifier, '\"');\n\n    case 'mssql':\n      return `[${identifier.replace(/[[\\]']+/g, '')}]`;\n\n    default:\n      throw new Error(`Dialect \"${dialect}\" is not supported`);\n  }\n}\n\nmodule.exports.quoteIdentifier = quoteIdentifier;\n/**\n * Test if a give string is already quoted\n *\n * @param {string} identifier\n *\n * @returns {boolean}\n * @private\n */\n\nfunction isIdentifierQuoted(identifier) {\n  return /^\\s*(?:([`\"'])(?:(?!\\1).|\\1{2})*\\1\\.?)+\\s*$/i.test(identifier);\n}\n\nmodule.exports.isIdentifierQuoted = isIdentifierQuoted;","map":{"version":3,"names":["Utils","require","postgresReservedWords","split","quoteIdentifier","dialect","identifier","options","defaults","force","quoteIdentifiers","addTicks","removeTicks","rawIdentifier","includes","toLowerCase","replace","Error","module","exports","isIdentifierQuoted","test"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/abstract/query-generator/helpers/quote.js"],"sourcesContent":["/**\n * Quote helpers implement quote ability for all dialects.\n * These are basic block of query building\n *\n * Its better to implement all dialect implementation together here. Which will allow\n * even abstract generator to use them by just specifying dialect type.\n *\n * Defining these helpers in each query dialect will leave\n * code in dual dependency of abstract <-> specific dialect\n */\n\n'use strict';\n\nconst Utils = require('../../../../utils');\n\n/**\n * list of reserved words in PostgreSQL 10\n * source: https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html\n *\n * @private\n */\nconst postgresReservedWords = 'all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with'.split(',');\n\n/**\n *\n * @param {string}  dialect         Dialect name\n * @param {string}  identifier      Identifier to quote\n * @param {Object}  [options]\n * @param {boolean} [options.force=false]\n * @param {boolean} [options.quoteIdentifiers=true]\n *\n * @returns {string}\n * @private\n */\nfunction quoteIdentifier(dialect, identifier, options) {\n  if (identifier === '*') return identifier;\n\n  options = Utils.defaults(options || {}, {\n    force: false,\n    quoteIdentifiers: true\n  });\n\n  switch (dialect) {\n    case 'sqlite':\n    case 'mariadb':\n    case 'mysql':\n      return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\n\n    case 'postgres':\n      const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n      if (\n        options.force !== true &&\n        options.quoteIdentifiers === false &&\n        !identifier.includes('.') &&\n        !identifier.includes('->') &&\n        !postgresReservedWords.includes(rawIdentifier.toLowerCase())\n      ) {\n        // In Postgres, if tables or attributes are created double-quoted,\n        // they are also case sensitive. If they contain any uppercase\n        // characters, they must always be double-quoted. This makes it\n        // impossible to write queries in portable SQL if tables are created in\n        // this way. Hence, we strip quotes if we don't want case sensitivity.\n        return rawIdentifier;\n      }\n      return Utils.addTicks(rawIdentifier, '\"');\n    case 'mssql':\n      return `[${identifier.replace(/[[\\]']+/g, '')}]`;\n\n    default:\n      throw new Error(`Dialect \"${dialect}\" is not supported`);\n  }\n}\nmodule.exports.quoteIdentifier = quoteIdentifier;\n\n/**\n * Test if a give string is already quoted\n *\n * @param {string} identifier\n *\n * @returns {boolean}\n * @private\n */\nfunction isIdentifierQuoted(identifier) {\n  return /^\\s*(?:([`\"'])(?:(?!\\1).|\\1{2})*\\1\\.?)+\\s*$/i.test(identifier);\n}\nmodule.exports.isIdentifierQuoted = isIdentifierQuoted;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,qBAAqB,GAAG,iuBAAiuBC,KAAjuB,CAAuuB,GAAvuB,CAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,UAAlC,EAA8CC,OAA9C,EAAuD;EACrD,IAAID,UAAU,KAAK,GAAnB,EAAwB,OAAOA,UAAP;EAExBC,OAAO,GAAGP,KAAK,CAACQ,QAAN,CAAeD,OAAO,IAAI,EAA1B,EAA8B;IACtCE,KAAK,EAAE,KAD+B;IAEtCC,gBAAgB,EAAE;EAFoB,CAA9B,CAAV;;EAKA,QAAQL,OAAR;IACE,KAAK,QAAL;IACA,KAAK,SAAL;IACA,KAAK,OAAL;MACE,OAAOL,KAAK,CAACW,QAAN,CAAeX,KAAK,CAACY,WAAN,CAAkBN,UAAlB,EAA8B,GAA9B,CAAf,EAAmD,GAAnD,CAAP;;IAEF,KAAK,UAAL;MACE,MAAMO,aAAa,GAAGb,KAAK,CAACY,WAAN,CAAkBN,UAAlB,EAA8B,GAA9B,CAAtB;;MAEA,IACEC,OAAO,CAACE,KAAR,KAAkB,IAAlB,IACAF,OAAO,CAACG,gBAAR,KAA6B,KAD7B,IAEA,CAACJ,UAAU,CAACQ,QAAX,CAAoB,GAApB,CAFD,IAGA,CAACR,UAAU,CAACQ,QAAX,CAAoB,IAApB,CAHD,IAIA,CAACZ,qBAAqB,CAACY,QAAtB,CAA+BD,aAAa,CAACE,WAAd,EAA/B,CALH,EAME;QACA;QACA;QACA;QACA;QACA;QACA,OAAOF,aAAP;MACD;;MACD,OAAOb,KAAK,CAACW,QAAN,CAAeE,aAAf,EAA8B,GAA9B,CAAP;;IACF,KAAK,OAAL;MACE,OAAQ,IAAGP,UAAU,CAACU,OAAX,CAAmB,UAAnB,EAA+B,EAA/B,CAAmC,GAA9C;;IAEF;MACE,MAAM,IAAIC,KAAJ,CAAW,YAAWZ,OAAQ,oBAA9B,CAAN;EA5BJ;AA8BD;;AACDa,MAAM,CAACC,OAAP,CAAef,eAAf,GAAiCA,eAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASgB,kBAAT,CAA4Bd,UAA5B,EAAwC;EACtC,OAAO,+CAA+Ce,IAA/C,CAAoDf,UAApD,CAAP;AACD;;AACDY,MAAM,CAACC,OAAP,CAAeC,kBAAf,GAAoCA,kBAApC"},"metadata":{},"sourceType":"script"}