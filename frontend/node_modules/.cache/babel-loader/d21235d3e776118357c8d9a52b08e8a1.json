{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst Result = require('./result');\n\nconst utils = require('./utils');\n\nclass Query extends EventEmitter {\n  constructor(config, values, callback) {\n    super();\n    config = utils.normalizeQueryConfig(config, values, callback);\n    this.text = config.text;\n    this.values = config.values;\n    this.rows = config.rows;\n    this.types = config.types;\n    this.name = config.name;\n    this.binary = config.binary; // use unique portal name each time\n\n    this.portal = config.portal || '';\n    this.callback = config.callback;\n    this._rowMode = config.rowMode;\n\n    if (process.domain && config.callback) {\n      this.callback = process.domain.bind(config.callback);\n    }\n\n    this._result = new Result(this._rowMode, this.types); // potential for multiple results\n\n    this._results = this._result;\n    this.isPreparedStatement = false;\n    this._canceledDueToError = false;\n    this._promise = null;\n  }\n\n  requiresPreparation() {\n    // named queries must always be prepared\n    if (this.name) {\n      return true;\n    } // always prepare if there are max number of rows expected per\n    // portal execution\n\n\n    if (this.rows) {\n      return true;\n    } // don't prepare empty text queries\n\n\n    if (!this.text) {\n      return false;\n    } // prepare if there are values\n\n\n    if (!this.values) {\n      return false;\n    }\n\n    return this.values.length > 0;\n  }\n\n  _checkForMultirow() {\n    // if we already have a result with a command property\n    // then we've already executed one query in a multi-statement simple query\n    // turn our results into an array of results\n    if (this._result.command) {\n      if (!Array.isArray(this._results)) {\n        this._results = [this._result];\n      }\n\n      this._result = new Result(this._rowMode, this.types);\n\n      this._results.push(this._result);\n    }\n  } // associates row metadata from the supplied\n  // message with this query object\n  // metadata used when parsing row results\n\n\n  handleRowDescription(msg) {\n    this._checkForMultirow();\n\n    this._result.addFields(msg.fields);\n\n    this._accumulateRows = this.callback || !this.listeners('row').length;\n  }\n\n  handleDataRow(msg) {\n    let row;\n\n    if (this._canceledDueToError) {\n      return;\n    }\n\n    try {\n      row = this._result.parseRow(msg.fields);\n    } catch (err) {\n      this._canceledDueToError = err;\n      return;\n    }\n\n    this.emit('row', row, this._result);\n\n    if (this._accumulateRows) {\n      this._result.addRow(row);\n    }\n  }\n\n  handleCommandComplete(msg, connection) {\n    this._checkForMultirow();\n\n    this._result.addCommandComplete(msg); // need to sync after each command complete of a prepared statement\n    // if we were using a row count which results in multiple calls to _getRows\n\n\n    if (this.rows) {\n      connection.sync();\n    }\n  } // if a named prepared statement is created with empty query text\n  // the backend will send an emptyQuery message but *not* a command complete message\n  // since we pipeline sync immediately after execute we don't need to do anything here\n  // unless we have rows specified, in which case we did not pipeline the intial sync call\n\n\n  handleEmptyQuery(connection) {\n    if (this.rows) {\n      connection.sync();\n    }\n  }\n\n  handleError(err, connection) {\n    // need to sync after error during a prepared statement\n    if (this._canceledDueToError) {\n      err = this._canceledDueToError;\n      this._canceledDueToError = false;\n    } // if callback supplied do not emit error event as uncaught error\n    // events will bubble up to node process\n\n\n    if (this.callback) {\n      return this.callback(err);\n    }\n\n    this.emit('error', err);\n  }\n\n  handleReadyForQuery(con) {\n    if (this._canceledDueToError) {\n      return this.handleError(this._canceledDueToError, con);\n    }\n\n    if (this.callback) {\n      this.callback(null, this._results);\n    }\n\n    this.emit('end', this._results);\n  }\n\n  submit(connection) {\n    if (typeof this.text !== 'string' && typeof this.name !== 'string') {\n      return new Error('A query must have either text or a name. Supplying neither is unsupported.');\n    }\n\n    const previous = connection.parsedStatements[this.name];\n\n    if (this.text && previous && this.text !== previous) {\n      return new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`);\n    }\n\n    if (this.values && !Array.isArray(this.values)) {\n      return new Error('Query values must be an array');\n    }\n\n    if (this.requiresPreparation()) {\n      this.prepare(connection);\n    } else {\n      connection.query(this.text);\n    }\n\n    return null;\n  }\n\n  hasBeenParsed(connection) {\n    return this.name && connection.parsedStatements[this.name];\n  }\n\n  handlePortalSuspended(connection) {\n    this._getRows(connection, this.rows);\n  }\n\n  _getRows(connection, rows) {\n    connection.execute({\n      portal: this.portal,\n      rows: rows\n    }); // if we're not reading pages of rows send the sync command\n    // to indicate the pipeline is finished\n\n    if (!rows) {\n      connection.sync();\n    } else {\n      // otherwise flush the call out to read more rows\n      connection.flush();\n    }\n  } // http://developer.postgresql.org/pgdocs/postgres/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY\n\n\n  prepare(connection) {\n    // prepared statements need sync to be called after each command\n    // complete or when an error is encountered\n    this.isPreparedStatement = true; // TODO refactor this poor encapsulation\n\n    if (!this.hasBeenParsed(connection)) {\n      connection.parse({\n        text: this.text,\n        name: this.name,\n        types: this.types\n      });\n    } // because we're mapping user supplied values to\n    // postgres wire protocol compatible values it could\n    // throw an exception, so try/catch this section\n\n\n    try {\n      connection.bind({\n        portal: this.portal,\n        statement: this.name,\n        values: this.values,\n        binary: this.binary,\n        valueMapper: utils.prepareValue\n      });\n    } catch (err) {\n      this.handleError(err, connection);\n      return;\n    }\n\n    connection.describe({\n      type: 'P',\n      name: this.portal || ''\n    });\n\n    this._getRows(connection, this.rows);\n  }\n\n  handleCopyInResponse(connection) {\n    connection.sendCopyFail('No source stream defined');\n  } // eslint-disable-next-line no-unused-vars\n\n\n  handleCopyData(msg, connection) {// noop\n  }\n\n}\n\nmodule.exports = Query;","map":{"version":3,"names":["EventEmitter","require","Result","utils","Query","constructor","config","values","callback","normalizeQueryConfig","text","rows","types","name","binary","portal","_rowMode","rowMode","process","domain","bind","_result","_results","isPreparedStatement","_canceledDueToError","_promise","requiresPreparation","length","_checkForMultirow","command","Array","isArray","push","handleRowDescription","msg","addFields","fields","_accumulateRows","listeners","handleDataRow","row","parseRow","err","emit","addRow","handleCommandComplete","connection","addCommandComplete","sync","handleEmptyQuery","handleError","handleReadyForQuery","con","submit","Error","previous","parsedStatements","prepare","query","hasBeenParsed","handlePortalSuspended","_getRows","execute","flush","parse","statement","valueMapper","prepareValue","describe","type","handleCopyInResponse","sendCopyFail","handleCopyData","module","exports"],"sources":["/home/brian/node_modules/pg/lib/query.js"],"sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\n\nconst Result = require('./result')\nconst utils = require('./utils')\n\nclass Query extends EventEmitter {\n  constructor(config, values, callback) {\n    super()\n\n    config = utils.normalizeQueryConfig(config, values, callback)\n\n    this.text = config.text\n    this.values = config.values\n    this.rows = config.rows\n    this.types = config.types\n    this.name = config.name\n    this.binary = config.binary\n    // use unique portal name each time\n    this.portal = config.portal || ''\n    this.callback = config.callback\n    this._rowMode = config.rowMode\n    if (process.domain && config.callback) {\n      this.callback = process.domain.bind(config.callback)\n    }\n    this._result = new Result(this._rowMode, this.types)\n\n    // potential for multiple results\n    this._results = this._result\n    this.isPreparedStatement = false\n    this._canceledDueToError = false\n    this._promise = null\n  }\n\n  requiresPreparation() {\n    // named queries must always be prepared\n    if (this.name) {\n      return true\n    }\n    // always prepare if there are max number of rows expected per\n    // portal execution\n    if (this.rows) {\n      return true\n    }\n    // don't prepare empty text queries\n    if (!this.text) {\n      return false\n    }\n    // prepare if there are values\n    if (!this.values) {\n      return false\n    }\n    return this.values.length > 0\n  }\n\n  _checkForMultirow() {\n    // if we already have a result with a command property\n    // then we've already executed one query in a multi-statement simple query\n    // turn our results into an array of results\n    if (this._result.command) {\n      if (!Array.isArray(this._results)) {\n        this._results = [this._result]\n      }\n      this._result = new Result(this._rowMode, this.types)\n      this._results.push(this._result)\n    }\n  }\n\n  // associates row metadata from the supplied\n  // message with this query object\n  // metadata used when parsing row results\n  handleRowDescription(msg) {\n    this._checkForMultirow()\n    this._result.addFields(msg.fields)\n    this._accumulateRows = this.callback || !this.listeners('row').length\n  }\n\n  handleDataRow(msg) {\n    let row\n\n    if (this._canceledDueToError) {\n      return\n    }\n\n    try {\n      row = this._result.parseRow(msg.fields)\n    } catch (err) {\n      this._canceledDueToError = err\n      return\n    }\n\n    this.emit('row', row, this._result)\n    if (this._accumulateRows) {\n      this._result.addRow(row)\n    }\n  }\n\n  handleCommandComplete(msg, connection) {\n    this._checkForMultirow()\n    this._result.addCommandComplete(msg)\n    // need to sync after each command complete of a prepared statement\n    // if we were using a row count which results in multiple calls to _getRows\n    if (this.rows) {\n      connection.sync()\n    }\n  }\n\n  // if a named prepared statement is created with empty query text\n  // the backend will send an emptyQuery message but *not* a command complete message\n  // since we pipeline sync immediately after execute we don't need to do anything here\n  // unless we have rows specified, in which case we did not pipeline the intial sync call\n  handleEmptyQuery(connection) {\n    if (this.rows) {\n      connection.sync()\n    }\n  }\n\n  handleError(err, connection) {\n    // need to sync after error during a prepared statement\n    if (this._canceledDueToError) {\n      err = this._canceledDueToError\n      this._canceledDueToError = false\n    }\n    // if callback supplied do not emit error event as uncaught error\n    // events will bubble up to node process\n    if (this.callback) {\n      return this.callback(err)\n    }\n    this.emit('error', err)\n  }\n\n  handleReadyForQuery(con) {\n    if (this._canceledDueToError) {\n      return this.handleError(this._canceledDueToError, con)\n    }\n    if (this.callback) {\n      this.callback(null, this._results)\n    }\n    this.emit('end', this._results)\n  }\n\n  submit(connection) {\n    if (typeof this.text !== 'string' && typeof this.name !== 'string') {\n      return new Error('A query must have either text or a name. Supplying neither is unsupported.')\n    }\n    const previous = connection.parsedStatements[this.name]\n    if (this.text && previous && this.text !== previous) {\n      return new Error(`Prepared statements must be unique - '${this.name}' was used for a different statement`)\n    }\n    if (this.values && !Array.isArray(this.values)) {\n      return new Error('Query values must be an array')\n    }\n    if (this.requiresPreparation()) {\n      this.prepare(connection)\n    } else {\n      connection.query(this.text)\n    }\n    return null\n  }\n\n  hasBeenParsed(connection) {\n    return this.name && connection.parsedStatements[this.name]\n  }\n\n  handlePortalSuspended(connection) {\n    this._getRows(connection, this.rows)\n  }\n\n  _getRows(connection, rows) {\n    connection.execute({\n      portal: this.portal,\n      rows: rows,\n    })\n    // if we're not reading pages of rows send the sync command\n    // to indicate the pipeline is finished\n    if (!rows) {\n      connection.sync()\n    } else {\n      // otherwise flush the call out to read more rows\n      connection.flush()\n    }\n  }\n\n  // http://developer.postgresql.org/pgdocs/postgres/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY\n  prepare(connection) {\n    // prepared statements need sync to be called after each command\n    // complete or when an error is encountered\n    this.isPreparedStatement = true\n\n    // TODO refactor this poor encapsulation\n    if (!this.hasBeenParsed(connection)) {\n      connection.parse({\n        text: this.text,\n        name: this.name,\n        types: this.types,\n      })\n    }\n\n    // because we're mapping user supplied values to\n    // postgres wire protocol compatible values it could\n    // throw an exception, so try/catch this section\n    try {\n      connection.bind({\n        portal: this.portal,\n        statement: this.name,\n        values: this.values,\n        binary: this.binary,\n        valueMapper: utils.prepareValue,\n      })\n    } catch (err) {\n      this.handleError(err, connection)\n      return\n    }\n\n    connection.describe({\n      type: 'P',\n      name: this.portal || '',\n    })\n\n    this._getRows(connection, this.rows)\n  }\n\n  handleCopyInResponse(connection) {\n    connection.sendCopyFail('No source stream defined')\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  handleCopyData(msg, connection) {\n    // noop\n  }\n}\n\nmodule.exports = Query\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}