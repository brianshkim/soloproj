{"ast":null,"code":"'use strict';\n/**\n Returns an object that treats MSSQL's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\n/**\n  A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n\n\n  @param  {QueryInterface} qi\n  @param  {string} tableName     The name of the table.\n  @param  {string} attributeName The name of the attribute that we want to remove.\n  @param  {Object} options\n  @param  {boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @private\n */\n\nconst removeColumn = function (qi, tableName, attributeName, options) {\n  options = Object.assign({\n    raw: true\n  }, options || {});\n  const findConstraintSql = qi.QueryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n  return qi.sequelize.query(findConstraintSql, options).then(_ref => {\n    let [results] = _ref;\n\n    if (!results.length) {\n      // No default constraint found -- we can cleanly remove the column\n      return;\n    }\n\n    const dropConstraintSql = qi.QueryGenerator.dropConstraintQuery(tableName, results[0].name);\n    return qi.sequelize.query(dropConstraintSql, options);\n  }).then(() => {\n    const findForeignKeySql = qi.QueryGenerator.getForeignKeyQuery(tableName, attributeName);\n    return qi.sequelize.query(findForeignKeySql, options);\n  }).then(_ref2 => {\n    let [results] = _ref2;\n\n    if (!results.length) {\n      // No foreign key constraints found, so we can remove the column\n      return;\n    }\n\n    const dropForeignKeySql = qi.QueryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n    return qi.sequelize.query(dropForeignKeySql, options);\n  }).then(() => {\n    //Check if the current column is a primaryKey\n    const primaryKeyConstraintSql = qi.QueryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    return qi.sequelize.query(primaryKeyConstraintSql, options);\n  }).then(_ref3 => {\n    let [result] = _ref3;\n\n    if (!result.length) {\n      return;\n    }\n\n    const dropConstraintSql = qi.QueryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n    return qi.sequelize.query(dropConstraintSql, options);\n  }).then(() => {\n    const removeSql = qi.QueryGenerator.removeColumnQuery(tableName, attributeName);\n    return qi.sequelize.query(removeSql, options);\n  });\n};\n\nmodule.exports = {\n  removeColumn\n};","map":{"version":3,"names":["removeColumn","qi","tableName","attributeName","options","Object","assign","raw","findConstraintSql","QueryGenerator","getDefaultConstraintQuery","sequelize","query","then","results","length","dropConstraintSql","dropConstraintQuery","name","findForeignKeySql","getForeignKeyQuery","dropForeignKeySql","dropForeignKeyQuery","constraint_name","primaryKeyConstraintSql","getPrimaryKeyConstraintQuery","result","constraintName","removeSql","removeColumnQuery","module","exports"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/mssql/query-interface.js"],"sourcesContent":["'use strict';\n\n/**\n Returns an object that treats MSSQL's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\n/**\n  A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n\n\n  @param  {QueryInterface} qi\n  @param  {string} tableName     The name of the table.\n  @param  {string} attributeName The name of the attribute that we want to remove.\n  @param  {Object} options\n  @param  {boolean|Function} [options.logging] A function that logs the sql queries, or false for explicitly not logging these queries\n\n  @private\n */\nconst removeColumn = function(qi, tableName, attributeName, options) {\n  options = Object.assign({ raw: true }, options || {});\n\n  const findConstraintSql = qi.QueryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n  return qi.sequelize.query(findConstraintSql, options)\n    .then(([results]) => {\n      if (!results.length) {\n        // No default constraint found -- we can cleanly remove the column\n        return;\n      }\n      const dropConstraintSql = qi.QueryGenerator.dropConstraintQuery(tableName, results[0].name);\n      return qi.sequelize.query(dropConstraintSql, options);\n    })\n    .then(() => {\n      const findForeignKeySql = qi.QueryGenerator.getForeignKeyQuery(tableName, attributeName);\n      return qi.sequelize.query(findForeignKeySql, options);\n    })\n    .then(([results]) => {\n      if (!results.length) {\n        // No foreign key constraints found, so we can remove the column\n        return;\n      }\n      const dropForeignKeySql = qi.QueryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      return qi.sequelize.query(dropForeignKeySql, options);\n    })\n    .then(() => {\n      //Check if the current column is a primaryKey\n      const primaryKeyConstraintSql = qi.QueryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n      return qi.sequelize.query(primaryKeyConstraintSql, options);\n    })\n    .then(([result]) => {\n      if (!result.length) {\n        return;\n      }\n      const dropConstraintSql = qi.QueryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      return qi.sequelize.query(dropConstraintSql, options);\n    })\n    .then(() => {\n      const removeSql = qi.QueryGenerator.removeColumnQuery(tableName, attributeName);\n      return qi.sequelize.query(removeSql, options);\n    });\n};\n\nmodule.exports = {\n  removeColumn\n};\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,YAAY,GAAG,UAASC,EAAT,EAAaC,SAAb,EAAwBC,aAAxB,EAAuCC,OAAvC,EAAgD;EACnEA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;IAAEC,GAAG,EAAE;EAAP,CAAd,EAA6BH,OAAO,IAAI,EAAxC,CAAV;EAEA,MAAMI,iBAAiB,GAAGP,EAAE,CAACQ,cAAH,CAAkBC,yBAAlB,CAA4CR,SAA5C,EAAuDC,aAAvD,CAA1B;EACA,OAAOF,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBJ,iBAAnB,EAAsCJ,OAAtC,EACJS,IADI,CACC,QAAe;IAAA,IAAd,CAACC,OAAD,CAAc;;IACnB,IAAI,CAACA,OAAO,CAACC,MAAb,EAAqB;MACnB;MACA;IACD;;IACD,MAAMC,iBAAiB,GAAGf,EAAE,CAACQ,cAAH,CAAkBQ,mBAAlB,CAAsCf,SAAtC,EAAiDY,OAAO,CAAC,CAAD,CAAP,CAAWI,IAA5D,CAA1B;IACA,OAAOjB,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBI,iBAAnB,EAAsCZ,OAAtC,CAAP;EACD,CARI,EASJS,IATI,CASC,MAAM;IACV,MAAMM,iBAAiB,GAAGlB,EAAE,CAACQ,cAAH,CAAkBW,kBAAlB,CAAqClB,SAArC,EAAgDC,aAAhD,CAA1B;IACA,OAAOF,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBO,iBAAnB,EAAsCf,OAAtC,CAAP;EACD,CAZI,EAaJS,IAbI,CAaC,SAAe;IAAA,IAAd,CAACC,OAAD,CAAc;;IACnB,IAAI,CAACA,OAAO,CAACC,MAAb,EAAqB;MACnB;MACA;IACD;;IACD,MAAMM,iBAAiB,GAAGpB,EAAE,CAACQ,cAAH,CAAkBa,mBAAlB,CAAsCpB,SAAtC,EAAiDY,OAAO,CAAC,CAAD,CAAP,CAAWS,eAA5D,CAA1B;IACA,OAAOtB,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBS,iBAAnB,EAAsCjB,OAAtC,CAAP;EACD,CApBI,EAqBJS,IArBI,CAqBC,MAAM;IACV;IACA,MAAMW,uBAAuB,GAAGvB,EAAE,CAACQ,cAAH,CAAkBgB,4BAAlB,CAA+CvB,SAA/C,EAA0DC,aAA1D,CAAhC;IACA,OAAOF,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBY,uBAAnB,EAA4CpB,OAA5C,CAAP;EACD,CAzBI,EA0BJS,IA1BI,CA0BC,SAAc;IAAA,IAAb,CAACa,MAAD,CAAa;;IAClB,IAAI,CAACA,MAAM,CAACX,MAAZ,EAAoB;MAClB;IACD;;IACD,MAAMC,iBAAiB,GAAGf,EAAE,CAACQ,cAAH,CAAkBQ,mBAAlB,CAAsCf,SAAtC,EAAiDwB,MAAM,CAAC,CAAD,CAAN,CAAUC,cAA3D,CAA1B;IACA,OAAO1B,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBI,iBAAnB,EAAsCZ,OAAtC,CAAP;EACD,CAhCI,EAiCJS,IAjCI,CAiCC,MAAM;IACV,MAAMe,SAAS,GAAG3B,EAAE,CAACQ,cAAH,CAAkBoB,iBAAlB,CAAoC3B,SAApC,EAA+CC,aAA/C,CAAlB;IACA,OAAOF,EAAE,CAACU,SAAH,CAAaC,KAAb,CAAmBgB,SAAnB,EAA8BxB,OAA9B,CAAP;EACD,CApCI,CAAP;AAqCD,CAzCD;;AA2CA0B,MAAM,CAACC,OAAP,GAAiB;EACf/B;AADe,CAAjB"},"metadata":{},"sourceType":"script"}