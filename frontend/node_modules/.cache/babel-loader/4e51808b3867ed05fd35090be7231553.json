{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\n\nconst defaults = require('./defaults');\n\nfunction escapeElement(elementRepresentation) {\n  var escaped = elementRepresentation.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\n  return '\"' + escaped + '\"';\n} // convert a JS array to a postgres array literal\n// uses comma separator so won't work for types like box that use\n// a different array separator.\n\n\nfunction arrayString(val) {\n  var result = '{';\n\n  for (var i = 0; i < val.length; i++) {\n    if (i > 0) {\n      result = result + ',';\n    }\n\n    if (val[i] === null || typeof val[i] === 'undefined') {\n      result = result + 'NULL';\n    } else if (Array.isArray(val[i])) {\n      result = result + arrayString(val[i]);\n    } else if (val[i] instanceof Buffer) {\n      result += '\\\\\\\\x' + val[i].toString('hex');\n    } else {\n      result += escapeElement(prepareValue(val[i]));\n    }\n  }\n\n  result = result + '}';\n  return result;\n} // converts values from javascript types\n// to their 'raw' counterparts for use as a postgres parameter\n// note: you can override this function to provide your own conversion mechanism\n// for complex types, etc...\n\n\nvar prepareValue = function (val, seen) {\n  // null and undefined are both null for postgres\n  if (val == null) {\n    return null;\n  }\n\n  if (val instanceof Buffer) {\n    return val;\n  }\n\n  if (ArrayBuffer.isView(val)) {\n    var buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength);\n\n    if (buf.length === val.byteLength) {\n      return buf;\n    }\n\n    return buf.slice(val.byteOffset, val.byteOffset + val.byteLength); // Node.js v4 does not support those Buffer.from params\n  }\n\n  if (val instanceof Date) {\n    if (defaults.parseInputDatesAsUTC) {\n      return dateToStringUTC(val);\n    } else {\n      return dateToString(val);\n    }\n  }\n\n  if (Array.isArray(val)) {\n    return arrayString(val);\n  }\n\n  if (typeof val === 'object') {\n    return prepareObject(val, seen);\n  }\n\n  return val.toString();\n};\n\nfunction prepareObject(val, seen) {\n  if (val && typeof val.toPostgres === 'function') {\n    seen = seen || [];\n\n    if (seen.indexOf(val) !== -1) {\n      throw new Error('circular reference detected while preparing \"' + val + '\" for query');\n    }\n\n    seen.push(val);\n    return prepareValue(val.toPostgres(prepareValue), seen);\n  }\n\n  return JSON.stringify(val);\n}\n\nfunction pad(number, digits) {\n  number = '' + number;\n\n  while (number.length < digits) {\n    number = '0' + number;\n  }\n\n  return number;\n}\n\nfunction dateToString(date) {\n  var offset = -date.getTimezoneOffset();\n  var year = date.getFullYear();\n  var isBCYear = year < 1;\n  if (isBCYear) year = Math.abs(year) + 1; // negative years are 1 off their BC representation\n\n  var ret = pad(year, 4) + '-' + pad(date.getMonth() + 1, 2) + '-' + pad(date.getDate(), 2) + 'T' + pad(date.getHours(), 2) + ':' + pad(date.getMinutes(), 2) + ':' + pad(date.getSeconds(), 2) + '.' + pad(date.getMilliseconds(), 3);\n\n  if (offset < 0) {\n    ret += '-';\n    offset *= -1;\n  } else {\n    ret += '+';\n  }\n\n  ret += pad(Math.floor(offset / 60), 2) + ':' + pad(offset % 60, 2);\n  if (isBCYear) ret += ' BC';\n  return ret;\n}\n\nfunction dateToStringUTC(date) {\n  var year = date.getUTCFullYear();\n  var isBCYear = year < 1;\n  if (isBCYear) year = Math.abs(year) + 1; // negative years are 1 off their BC representation\n\n  var ret = pad(year, 4) + '-' + pad(date.getUTCMonth() + 1, 2) + '-' + pad(date.getUTCDate(), 2) + 'T' + pad(date.getUTCHours(), 2) + ':' + pad(date.getUTCMinutes(), 2) + ':' + pad(date.getUTCSeconds(), 2) + '.' + pad(date.getUTCMilliseconds(), 3);\n  ret += '+00:00';\n  if (isBCYear) ret += ' BC';\n  return ret;\n}\n\nfunction normalizeQueryConfig(config, values, callback) {\n  // can take in strings or config objects\n  config = typeof config === 'string' ? {\n    text: config\n  } : config;\n\n  if (values) {\n    if (typeof values === 'function') {\n      config.callback = values;\n    } else {\n      config.values = values;\n    }\n  }\n\n  if (callback) {\n    config.callback = callback;\n  }\n\n  return config;\n}\n\nconst md5 = function (string) {\n  return crypto.createHash('md5').update(string, 'utf-8').digest('hex');\n}; // See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\n\n\nconst postgresMd5PasswordHash = function (user, password, salt) {\n  var inner = md5(password + user);\n  var outer = md5(Buffer.concat([Buffer.from(inner), salt]));\n  return 'md5' + outer;\n};\n\nmodule.exports = {\n  prepareValue: function prepareValueWrapper(value) {\n    // this ensures that extra arguments do not get passed into prepareValue\n    // by accident, eg: from calling values.map(utils.prepareValue)\n    return prepareValue(value);\n  },\n  normalizeQueryConfig,\n  postgresMd5PasswordHash,\n  md5\n};","map":{"version":3,"names":["crypto","require","defaults","escapeElement","elementRepresentation","escaped","replace","arrayString","val","result","i","length","Array","isArray","Buffer","toString","prepareValue","seen","ArrayBuffer","isView","buf","from","buffer","byteOffset","byteLength","slice","Date","parseInputDatesAsUTC","dateToStringUTC","dateToString","prepareObject","toPostgres","indexOf","Error","push","JSON","stringify","pad","number","digits","date","offset","getTimezoneOffset","year","getFullYear","isBCYear","Math","abs","ret","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","floor","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","normalizeQueryConfig","config","values","callback","text","md5","string","createHash","update","digest","postgresMd5PasswordHash","user","password","salt","inner","outer","concat","module","exports","prepareValueWrapper","value"],"sources":["/home/brian/node_modules/pg/lib/utils.js"],"sourcesContent":["'use strict'\n\nconst crypto = require('crypto')\n\nconst defaults = require('./defaults')\n\nfunction escapeElement(elementRepresentation) {\n  var escaped = elementRepresentation.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"')\n\n  return '\"' + escaped + '\"'\n}\n\n// convert a JS array to a postgres array literal\n// uses comma separator so won't work for types like box that use\n// a different array separator.\nfunction arrayString(val) {\n  var result = '{'\n  for (var i = 0; i < val.length; i++) {\n    if (i > 0) {\n      result = result + ','\n    }\n    if (val[i] === null || typeof val[i] === 'undefined') {\n      result = result + 'NULL'\n    } else if (Array.isArray(val[i])) {\n      result = result + arrayString(val[i])\n    } else if (val[i] instanceof Buffer) {\n      result += '\\\\\\\\x' + val[i].toString('hex')\n    } else {\n      result += escapeElement(prepareValue(val[i]))\n    }\n  }\n  result = result + '}'\n  return result\n}\n\n// converts values from javascript types\n// to their 'raw' counterparts for use as a postgres parameter\n// note: you can override this function to provide your own conversion mechanism\n// for complex types, etc...\nvar prepareValue = function (val, seen) {\n  // null and undefined are both null for postgres\n  if (val == null) {\n    return null\n  }\n  if (val instanceof Buffer) {\n    return val\n  }\n  if (ArrayBuffer.isView(val)) {\n    var buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength)\n    if (buf.length === val.byteLength) {\n      return buf\n    }\n    return buf.slice(val.byteOffset, val.byteOffset + val.byteLength) // Node.js v4 does not support those Buffer.from params\n  }\n  if (val instanceof Date) {\n    if (defaults.parseInputDatesAsUTC) {\n      return dateToStringUTC(val)\n    } else {\n      return dateToString(val)\n    }\n  }\n  if (Array.isArray(val)) {\n    return arrayString(val)\n  }\n  if (typeof val === 'object') {\n    return prepareObject(val, seen)\n  }\n  return val.toString()\n}\n\nfunction prepareObject(val, seen) {\n  if (val && typeof val.toPostgres === 'function') {\n    seen = seen || []\n    if (seen.indexOf(val) !== -1) {\n      throw new Error('circular reference detected while preparing \"' + val + '\" for query')\n    }\n    seen.push(val)\n\n    return prepareValue(val.toPostgres(prepareValue), seen)\n  }\n  return JSON.stringify(val)\n}\n\nfunction pad(number, digits) {\n  number = '' + number\n  while (number.length < digits) {\n    number = '0' + number\n  }\n  return number\n}\n\nfunction dateToString(date) {\n  var offset = -date.getTimezoneOffset()\n\n  var year = date.getFullYear()\n  var isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  var ret =\n    pad(year, 4) +\n    '-' +\n    pad(date.getMonth() + 1, 2) +\n    '-' +\n    pad(date.getDate(), 2) +\n    'T' +\n    pad(date.getHours(), 2) +\n    ':' +\n    pad(date.getMinutes(), 2) +\n    ':' +\n    pad(date.getSeconds(), 2) +\n    '.' +\n    pad(date.getMilliseconds(), 3)\n\n  if (offset < 0) {\n    ret += '-'\n    offset *= -1\n  } else {\n    ret += '+'\n  }\n\n  ret += pad(Math.floor(offset / 60), 2) + ':' + pad(offset % 60, 2)\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction dateToStringUTC(date) {\n  var year = date.getUTCFullYear()\n  var isBCYear = year < 1\n  if (isBCYear) year = Math.abs(year) + 1 // negative years are 1 off their BC representation\n\n  var ret =\n    pad(year, 4) +\n    '-' +\n    pad(date.getUTCMonth() + 1, 2) +\n    '-' +\n    pad(date.getUTCDate(), 2) +\n    'T' +\n    pad(date.getUTCHours(), 2) +\n    ':' +\n    pad(date.getUTCMinutes(), 2) +\n    ':' +\n    pad(date.getUTCSeconds(), 2) +\n    '.' +\n    pad(date.getUTCMilliseconds(), 3)\n\n  ret += '+00:00'\n  if (isBCYear) ret += ' BC'\n  return ret\n}\n\nfunction normalizeQueryConfig(config, values, callback) {\n  // can take in strings or config objects\n  config = typeof config === 'string' ? { text: config } : config\n  if (values) {\n    if (typeof values === 'function') {\n      config.callback = values\n    } else {\n      config.values = values\n    }\n  }\n  if (callback) {\n    config.callback = callback\n  }\n  return config\n}\n\nconst md5 = function (string) {\n  return crypto.createHash('md5').update(string, 'utf-8').digest('hex')\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nconst postgresMd5PasswordHash = function (user, password, salt) {\n  var inner = md5(password + user)\n  var outer = md5(Buffer.concat([Buffer.from(inner), salt]))\n  return 'md5' + outer\n}\n\nmodule.exports = {\n  prepareValue: function prepareValueWrapper(value) {\n    // this ensures that extra arguments do not get passed into prepareValue\n    // by accident, eg: from calling values.map(utils.prepareValue)\n    return prepareValue(value)\n  },\n  normalizeQueryConfig,\n  postgresMd5PasswordHash,\n  md5,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}