{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst AbstractDialect = require('../abstract');\n\nconst ConnectionManager = require('./connection-manager');\n\nconst Query = require('./query');\n\nconst QueryGenerator = require('./query-generator');\n\nconst DataTypes = require('../../data-types').sqlite;\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.QueryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n  }\n\n}\n\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': false,\n  'DEFAULT VALUES': true,\n  'UNION ALL': false,\n  'RIGHT JOIN': false,\n  inserts: {\n    ignoreDuplicates: ' OR IGNORE',\n    updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'\n  },\n  index: {\n    using: false,\n    where: true,\n    functionBased: true\n  },\n  transactionOptions: {\n    type: true\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  joinTableDependent: false,\n  groupedLimit: false,\n  JSON: true\n});\nConnectionManager.prototype.defaultVersion = '3.8.0';\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;","map":{"version":3,"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","sqlite","SqliteDialect","constructor","sequelize","connectionManager","_dialect","prototype","supports","merge","cloneDeep","inserts","ignoreDuplicates","updateOnDuplicate","index","using","where","functionBased","transactionOptions","type","constraints","addConstraint","dropConstraint","joinTableDependent","groupedLimit","JSON","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/sqlite/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').sqlite;\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.QueryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n  }\n}\n\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': false,\n  'DEFAULT VALUES': true,\n  'UNION ALL': false,\n  'RIGHT JOIN': false,\n  inserts: {\n    ignoreDuplicates: ' OR IGNORE',\n    updateOnDuplicate: ' ON CONFLICT DO UPDATE SET'\n  },\n  index: {\n    using: false,\n    where: true,\n    functionBased: true\n  },\n  transactionOptions: {\n    type: true\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  joinTableDependent: false,\n  groupedLimit: false,\n  JSON: true\n});\n\nConnectionManager.prototype.defaultVersion = '3.8.0';\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\n\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;\n"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,aAAD,CAA/B;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,sBAAD,CAAjC;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,kBAAD,CAAP,CAA4BM,MAA9C;;AAEA,MAAMC,aAAN,SAA4BN,eAA5B,CAA4C;EAC1CO,WAAW,CAACC,SAAD,EAAY;IACrB;IACA,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,iBAAL,GAAyB,IAAIR,iBAAJ,CAAsB,IAAtB,EAA4BO,SAA5B,CAAzB;IACA,KAAKL,cAAL,GAAsB,IAAIA,cAAJ,CAAmB;MACvCO,QAAQ,EAAE,IAD6B;MAEvCF;IAFuC,CAAnB,CAAtB;EAID;;AATyC;;AAY5CF,aAAa,CAACK,SAAd,CAAwBC,QAAxB,GAAmCd,CAAC,CAACe,KAAF,CAAQf,CAAC,CAACgB,SAAF,CAAYd,eAAe,CAACW,SAAhB,CAA0BC,QAAtC,CAAR,EAAyD;EAC1F,WAAW,KAD+E;EAE1F,kBAAkB,IAFwE;EAG1F,aAAa,KAH6E;EAI1F,cAAc,KAJ4E;EAK1FG,OAAO,EAAE;IACPC,gBAAgB,EAAE,YADX;IAEPC,iBAAiB,EAAE;EAFZ,CALiF;EAS1FC,KAAK,EAAE;IACLC,KAAK,EAAE,KADF;IAELC,KAAK,EAAE,IAFF;IAGLC,aAAa,EAAE;EAHV,CATmF;EAc1FC,kBAAkB,EAAE;IAClBC,IAAI,EAAE;EADY,CAdsE;EAiB1FC,WAAW,EAAE;IACXC,aAAa,EAAE,KADJ;IAEXC,cAAc,EAAE;EAFL,CAjB6E;EAqB1FC,kBAAkB,EAAE,KArBsE;EAsB1FC,YAAY,EAAE,KAtB4E;EAuB1FC,IAAI,EAAE;AAvBoF,CAAzD,CAAnC;AA0BA5B,iBAAiB,CAACU,SAAlB,CAA4BmB,cAA5B,GAA6C,OAA7C;AACAxB,aAAa,CAACK,SAAd,CAAwBT,KAAxB,GAAgCA,KAAhC;AACAI,aAAa,CAACK,SAAd,CAAwBP,SAAxB,GAAoCA,SAApC;AACAE,aAAa,CAACK,SAAd,CAAwBoB,IAAxB,GAA+B,QAA/B;AACAzB,aAAa,CAACK,SAAd,CAAwBqB,SAAxB,GAAoC,GAApC;AACA1B,aAAa,CAACK,SAAd,CAAwBsB,cAAxB,GAAyC3B,aAAa,CAACK,SAAd,CAAwBqB,SAAjE;AACA1B,aAAa,CAACK,SAAd,CAAwBuB,eAAxB,GAA0C5B,aAAa,CAACK,SAAd,CAAwBqB,SAAlE;AAEAG,MAAM,CAACC,OAAP,GAAiB9B,aAAjB;AACA6B,MAAM,CAACC,OAAP,CAAe9B,aAAf,GAA+BA,aAA/B;AACA6B,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyB/B,aAAzB"},"metadata":{},"sourceType":"script"}