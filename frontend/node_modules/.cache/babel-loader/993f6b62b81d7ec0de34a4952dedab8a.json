{"ast":null,"code":"'use strict';\n\nconst AbstractQuery = require('../abstract/query');\n\nconst QueryTypes = require('../../query-types');\n\nconst Promise = require('../../promise');\n\nconst sequelizeErrors = require('../../errors');\n\nconst _ = require('lodash');\n\nconst {\n  logger\n} = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|Object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n        skipValueReplace: true\n      })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n\n        return undefined;\n      };\n\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n\n    return [sql, bindParam];\n  }\n\n  run(sql, parameters) {\n    const {\n      connection\n    } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().QueryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    this.sql = sql;\n    const query = parameters && parameters.length ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result))) : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    return query.catch(err => {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (err.code === 'ECONNRESET') {\n        connection._invalid = true;\n      }\n\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err);\n    }).then(queryResult => {\n      complete();\n      let rows = Array.isArray(queryResult) ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), []) : queryResult.rows;\n      const rowCount = Array.isArray(queryResult) ? queryResult.reduce((count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count, 0) : queryResult.rowCount;\n\n      if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n        rows = rows.map(row => _.toPairs(row).reduce((acc, _ref) => {\n          let [key, value] = _ref;\n          const mapping = this.options.aliasesMapping.get(key);\n          acc[mapping || key] = value;\n          return acc;\n        }, {}));\n      }\n\n      const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n      const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n      if (isRelNameQuery) {\n        return rows.map(row => ({\n          name: row.relname,\n          tableName: row.relname.split('_')[0]\n        }));\n      }\n\n      if (isTableNameQuery) {\n        return rows.map(row => _.values(row));\n      }\n\n      if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n        if (rows[0].sequelize_caught_exception !== null) {\n          throw this.formatError({\n            code: '23505',\n            detail: rows[0].sequelize_caught_exception\n          });\n        }\n\n        for (const row of rows) {\n          delete row.sequelize_caught_exception;\n        }\n      }\n\n      if (this.isShowIndexesQuery()) {\n        for (const row of rows) {\n          const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(','); // Map column index in table to column name\n\n          const columns = _.zipObject(row.column_indexes, this.sequelize.getQueryInterface().QueryGenerator.fromArray(row.column_names));\n\n          delete row.column_indexes;\n          delete row.column_names;\n          let field;\n          let attribute; // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n\n          row.fields = row.indkey.split(' ').map((indKey, index) => {\n            field = columns[indKey]; // for functional indices indKey = 0\n\n            if (!field) {\n              return null;\n            }\n\n            attribute = attributes[index];\n            return {\n              attribute: field,\n              collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n              order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n              length: undefined\n            };\n          }).filter(n => n !== null);\n          delete row.columns;\n        }\n\n        return rows;\n      }\n\n      if (this.isForeignKeysQuery()) {\n        const result = [];\n\n        for (const row of rows) {\n          let defParts;\n\n          if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n            row.id = row.constraint_name;\n            row.table = defParts[2];\n            row.from = defParts[1];\n            row.to = defParts[3];\n            let i;\n\n            for (i = 5; i <= 8; i += 3) {\n              if (/(UPDATE|DELETE)/.test(defParts[i])) {\n                row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n              }\n            }\n          }\n\n          result.push(row);\n        }\n\n        return result;\n      }\n\n      if (this.isSelectQuery()) {\n        let result = rows; // Postgres will treat tables as case-insensitive, so fix the case\n        // of the returned values to match attributes\n\n        if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n          const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n            m[k.toLowerCase()] = k;\n            return m;\n          }, {});\n\n          result = rows.map(row => {\n            return _.mapKeys(row, (value, key) => {\n              const targetAttr = attrsMap[key];\n\n              if (typeof targetAttr === 'string' && targetAttr !== key) {\n                return targetAttr;\n              }\n\n              return key;\n            });\n          });\n        }\n\n        return this.handleSelectQuery(result);\n      }\n\n      if (QueryTypes.DESCRIBE === this.options.type) {\n        const result = {};\n\n        for (const row of rows) {\n          result[row.Field] = {\n            type: row.Type.toUpperCase(),\n            allowNull: row.Null === 'YES',\n            defaultValue: row.Default,\n            comment: row.Comment,\n            special: row.special ? this.sequelize.getQueryInterface().QueryGenerator.fromArray(row.special) : [],\n            primaryKey: row.Constraint === 'PRIMARY KEY'\n          };\n\n          if (result[row.Field].type === 'BOOLEAN') {\n            result[row.Field].defaultValue = {\n              'false': false,\n              'true': true\n            }[result[row.Field].defaultValue];\n\n            if (result[row.Field].defaultValue === undefined) {\n              result[row.Field].defaultValue = null;\n            }\n          }\n\n          if (typeof result[row.Field].defaultValue === 'string') {\n            result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n            if (result[row.Field].defaultValue.includes('::')) {\n              const split = result[row.Field].defaultValue.split('::');\n\n              if (split[1].toLowerCase() !== 'regclass)') {\n                result[row.Field].defaultValue = split[0];\n              }\n            }\n          }\n        }\n\n        return result;\n      }\n\n      if (this.isVersionQuery()) {\n        return rows[0].server_version;\n      }\n\n      if (this.isShowOrDescribeQuery()) {\n        return rows;\n      }\n\n      if (QueryTypes.BULKUPDATE === this.options.type) {\n        if (!this.options.returning) {\n          return parseInt(rowCount, 10);\n        }\n\n        return this.handleSelectQuery(rows);\n      }\n\n      if (QueryTypes.BULKDELETE === this.options.type) {\n        return parseInt(rowCount, 10);\n      }\n\n      if (this.isUpsertQuery()) {\n        return rows[0];\n      }\n\n      if (this.isInsertQuery() || this.isUpdateQuery()) {\n        if (this.instance && this.instance.dataValues) {\n          for (const key in rows[0]) {\n            if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n              const record = rows[0][key];\n\n              const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n              this.instance.dataValues[attr && attr.fieldName || key] = record;\n            }\n          }\n        }\n\n        return [this.instance || rows && (this.options.plain && rows[0] || rows) || undefined, rowCount];\n      }\n\n      if (this.isRawQuery()) {\n        return [rows, queryResult];\n      }\n\n      return rows;\n    });\n  }\n\n  formatError(err) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err\n        });\n\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field, value, this.instance, 'not_unique'));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n\n        message = 'Exclusion constraint error';\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err\n          });\n        }\n\n      // falls through\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"names":["AbstractQuery","require","QueryTypes","Promise","sequelizeErrors","_","logger","debug","debugContext","Query","formatBindParameters","sql","values","dialect","stringReplaceFunc","value","replace","bindParam","Array","isArray","map","skipValueReplace","i","seen","replacementFunc","match","key","undefined","push","run","parameters","connection","isEmpty","options","searchPath","sequelize","getQueryInterface","QueryGenerator","setSearchPath","query","length","resolve","reject","error","result","complete","_logQuery","catch","err","code","_invalid","formatError","then","queryResult","rows","reduce","allRows","r","concat","rowCount","count","Number","isFinite","minifyAliases","aliasesMapping","row","toPairs","acc","mapping","get","isTableNameQuery","startsWith","isRelNameQuery","name","relname","tableName","split","sequelize_caught_exception","detail","isShowIndexesQuery","attributes","exec","definition","columns","zipObject","column_indexes","fromArray","column_names","field","attribute","fields","indkey","indKey","index","collate","order","includes","filter","n","isForeignKeysQuery","defParts","condef","id","constraint_name","table","from","to","test","toLowerCase","isSelectQuery","raw","quoteIdentifiers","attrsMap","model","rawAttributes","m","v","k","mapKeys","targetAttr","handleSelectQuery","DESCRIBE","type","Field","Type","toUpperCase","allowNull","Null","defaultValue","Default","comment","Comment","special","primaryKey","Constraint","isVersionQuery","server_version","isShowOrDescribeQuery","BULKUPDATE","returning","parseInt","BULKDELETE","isUpsertQuery","isInsertQuery","isUpdateQuery","instance","dataValues","Object","prototype","hasOwnProperty","call","record","attr","find","fieldName","plain","isRawQuery","errors","message","sqlState","errMessage","messagePrimary","errDetail","messageDetail","ForeignKeyConstraintError","parent","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","uniqueKeys","constraint","isEqual","keys","msg","UniqueConstraintError","ExclusionConstraintError","UnknownConstraintError","DatabaseError","getInsertIdField","module","exports","default"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/postgres/query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst Promise = require('../../promise');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|Object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  run(sql, parameters) {\n    const { connection } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().QueryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n    this.sql = sql;\n\n    const query = parameters && parameters.length\n      ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result)))\n      : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    return query.catch(err => {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (err.code === 'ECONNRESET') {\n        connection._invalid = true;\n      }\n\n      err.sql = sql;\n      err.parameters = parameters;\n      throw this.formatError(err);\n    })\n      .then(queryResult => {\n        complete();\n\n        let rows = Array.isArray(queryResult)\n          ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n          : queryResult.rows;\n        const rowCount = Array.isArray(queryResult)\n          ? queryResult.reduce(\n            (count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count,\n            0\n          )\n          : queryResult.rowCount;\n\n        if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n          rows = rows\n            .map(row => _.toPairs(row)\n              .reduce((acc, [key, value]) => {\n                const mapping = this.options.aliasesMapping.get(key);\n                acc[mapping || key] = value;\n                return acc;\n              }, {})\n            );\n        }\n\n        const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n        const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n        if (isRelNameQuery) {\n          return rows.map(row => ({\n            name: row.relname,\n            tableName: row.relname.split('_')[0]\n          }));\n        }\n        if (isTableNameQuery) {\n          return rows.map(row => _.values(row));\n        }\n\n        if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n          if (rows[0].sequelize_caught_exception !== null) {\n            throw this.formatError({\n              code: '23505',\n              detail: rows[0].sequelize_caught_exception\n            });\n          }\n          for (const row of rows) {\n            delete row.sequelize_caught_exception;\n          }\n        }\n\n        if (this.isShowIndexesQuery()) {\n          for (const row of rows) {\n            const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n\n            // Map column index in table to column name\n            const columns = _.zipObject(\n              row.column_indexes,\n              this.sequelize.getQueryInterface().QueryGenerator.fromArray(row.column_names)\n            );\n            delete row.column_indexes;\n            delete row.column_names;\n\n            let field;\n            let attribute;\n\n            // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n            row.fields = row.indkey.split(' ').map((indKey, index) => {\n              field = columns[indKey];\n              // for functional indices indKey = 0\n              if (!field) {\n                return null;\n              }\n              attribute = attributes[index];\n              return {\n                attribute: field,\n                collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n                order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n                length: undefined\n              };\n            }).filter(n => n !== null);\n            delete row.columns;\n          }\n          return rows;\n        }\n        if (this.isForeignKeysQuery()) {\n          const result = [];\n          for (const row of rows) {\n            let defParts;\n            if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n              row.id = row.constraint_name;\n              row.table = defParts[2];\n              row.from = defParts[1];\n              row.to = defParts[3];\n              let i;\n              for (i = 5; i <= 8; i += 3) {\n                if (/(UPDATE|DELETE)/.test(defParts[i])) {\n                  row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n                }\n              }\n            }\n            result.push(row);\n          }\n          return result;\n        }\n        if (this.isSelectQuery()) {\n          let result = rows;\n          // Postgres will treat tables as case-insensitive, so fix the case\n          // of the returned values to match attributes\n          if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n            const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n              m[k.toLowerCase()] = k;\n              return m;\n            }, {});\n            result = rows.map(row => {\n              return _.mapKeys(row, (value, key) => {\n                const targetAttr = attrsMap[key];\n                if (typeof targetAttr === 'string' && targetAttr !== key) {\n                  return targetAttr;\n                }\n                return key;\n              });\n            });\n          }\n          return this.handleSelectQuery(result);\n        }\n        if (QueryTypes.DESCRIBE === this.options.type) {\n          const result = {};\n\n          for (const row of rows) {\n            result[row.Field] = {\n              type: row.Type.toUpperCase(),\n              allowNull: row.Null === 'YES',\n              defaultValue: row.Default,\n              comment: row.Comment,\n              special: row.special ? this.sequelize.getQueryInterface().QueryGenerator.fromArray(row.special) : [],\n              primaryKey: row.Constraint === 'PRIMARY KEY'\n            };\n\n            if (result[row.Field].type === 'BOOLEAN') {\n              result[row.Field].defaultValue = { 'false': false, 'true': true }[result[row.Field].defaultValue];\n\n              if (result[row.Field].defaultValue === undefined) {\n                result[row.Field].defaultValue = null;\n              }\n            }\n\n            if (typeof result[row.Field].defaultValue === 'string') {\n              result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n              if (result[row.Field].defaultValue.includes('::')) {\n                const split = result[row.Field].defaultValue.split('::');\n                if (split[1].toLowerCase() !== 'regclass)') {\n                  result[row.Field].defaultValue = split[0];\n                }\n              }\n            }\n          }\n\n          return result;\n        }\n        if (this.isVersionQuery()) {\n          return rows[0].server_version;\n        }\n        if (this.isShowOrDescribeQuery()) {\n          return rows;\n        }\n        if (QueryTypes.BULKUPDATE === this.options.type) {\n          if (!this.options.returning) {\n            return parseInt(rowCount, 10);\n          }\n          return this.handleSelectQuery(rows);\n        }\n        if (QueryTypes.BULKDELETE === this.options.type) {\n          return parseInt(rowCount, 10);\n        }\n        if (this.isUpsertQuery()) {\n          return rows[0];\n        }\n        if (this.isInsertQuery() || this.isUpdateQuery()) {\n          if (this.instance && this.instance.dataValues) {\n            for (const key in rows[0]) {\n              if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n                const record = rows[0][key];\n\n                const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n                this.instance.dataValues[attr && attr.fieldName || key] = record;\n              }\n            }\n          }\n\n          return [\n            this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n            rowCount\n          ];\n        }\n        if (this.isRawQuery()) {\n          return [rows, queryResult];\n        }\n        return rows;\n      });\n  }\n\n  formatError(err) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({ message: errMessage, fields: null, index, table, parent: err });\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique'\n            ));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err\n          });\n        }\n      // falls through\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}