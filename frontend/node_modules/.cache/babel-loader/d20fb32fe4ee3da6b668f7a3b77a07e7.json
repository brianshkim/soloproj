{"ast":null,"code":"'use strict';\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/;\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/;\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/;\nvar INFINITY = /^-?infinity$/;\n\nmodule.exports = function parseDate(isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'));\n  }\n\n  var matches = DATE_TIME.exec(isoDate);\n\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null;\n  }\n\n  var isBC = !!matches[8];\n  var year = parseInt(matches[1], 10);\n\n  if (isBC) {\n    year = bcYearToNegativeYear(year);\n  }\n\n  var month = parseInt(matches[2], 10) - 1;\n  var day = matches[3];\n  var hour = parseInt(matches[4], 10);\n  var minute = parseInt(matches[5], 10);\n  var second = parseInt(matches[6], 10);\n  var ms = matches[7];\n  ms = ms ? 1000 * parseFloat(ms) : 0;\n  var date;\n  var offset = timeZoneOffset(isoDate);\n\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms)); // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n\n    if (is0To99(year)) {\n      date.setUTCFullYear(year);\n    }\n\n    if (offset !== 0) {\n      date.setTime(date.getTime() - offset);\n    }\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms);\n\n    if (is0To99(year)) {\n      date.setFullYear(year);\n    }\n  }\n\n  return date;\n};\n\nfunction getDate(isoDate) {\n  var matches = DATE.exec(isoDate);\n\n  if (!matches) {\n    return;\n  }\n\n  var year = parseInt(matches[1], 10);\n  var isBC = !!matches[4];\n\n  if (isBC) {\n    year = bcYearToNegativeYear(year);\n  }\n\n  var month = parseInt(matches[2], 10) - 1;\n  var day = matches[3]; // YYYY-MM-DD will be parsed as local time\n\n  var date = new Date(year, month, day);\n\n  if (is0To99(year)) {\n    date.setFullYear(year);\n  }\n\n  return date;\n} // match timezones:\n// Z (UTC)\n// -05\n// +06:30\n\n\nfunction timeZoneOffset(isoDate) {\n  if (isoDate.endsWith('+00')) {\n    return 0;\n  }\n\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1]);\n  if (!zone) return;\n  var type = zone[1];\n\n  if (type === 'Z') {\n    return 0;\n  }\n\n  var sign = type === '-' ? -1 : 1;\n  var offset = parseInt(zone[2], 10) * 3600 + parseInt(zone[3] || 0, 10) * 60 + parseInt(zone[4] || 0, 10);\n  return offset * sign * 1000;\n}\n\nfunction bcYearToNegativeYear(year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1);\n}\n\nfunction is0To99(num) {\n  return num >= 0 && num < 100;\n}","map":{"version":3,"names":["DATE_TIME","DATE","TIME_ZONE","INFINITY","module","exports","parseDate","isoDate","test","Number","replace","matches","exec","getDate","isBC","year","parseInt","bcYearToNegativeYear","month","day","hour","minute","second","ms","parseFloat","date","offset","timeZoneOffset","Date","UTC","is0To99","setUTCFullYear","setTime","getTime","setFullYear","endsWith","zone","split","type","sign","num"],"sources":["/home/brian/node_modules/postgres-date/index.js"],"sourcesContent":["'use strict'\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/\nvar INFINITY = /^-?infinity$/\n\nmodule.exports = function parseDate (isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'))\n  }\n  var matches = DATE_TIME.exec(isoDate)\n\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null\n  }\n\n  var isBC = !!matches[8]\n  var year = parseInt(matches[1], 10)\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  var hour = parseInt(matches[4], 10)\n  var minute = parseInt(matches[5], 10)\n  var second = parseInt(matches[6], 10)\n\n  var ms = matches[7]\n  ms = ms ? 1000 * parseFloat(ms) : 0\n\n  var date\n  var offset = timeZoneOffset(isoDate)\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms))\n\n    // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n    if (is0To99(year)) {\n      date.setUTCFullYear(year)\n    }\n\n    if (offset !== 0) {\n      date.setTime(date.getTime() - offset)\n    }\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms)\n\n    if (is0To99(year)) {\n      date.setFullYear(year)\n    }\n  }\n\n  return date\n}\n\nfunction getDate (isoDate) {\n  var matches = DATE.exec(isoDate)\n  if (!matches) {\n    return\n  }\n\n  var year = parseInt(matches[1], 10)\n  var isBC = !!matches[4]\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  // YYYY-MM-DD will be parsed as local time\n  var date = new Date(year, month, day)\n\n  if (is0To99(year)) {\n    date.setFullYear(year)\n  }\n\n  return date\n}\n\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset (isoDate) {\n  if (isoDate.endsWith('+00')) {\n    return 0\n  }\n\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1])\n  if (!zone) return\n  var type = zone[1]\n\n  if (type === 'Z') {\n    return 0\n  }\n  var sign = type === '-' ? -1 : 1\n  var offset = parseInt(zone[2], 10) * 3600 +\n    parseInt(zone[3] || 0, 10) * 60 +\n    parseInt(zone[4] || 0, 10)\n\n  return offset * sign * 1000\n}\n\nfunction bcYearToNegativeYear (year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1)\n}\n\nfunction is0To99 (num) {\n  return num >= 0 && num < 100\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}