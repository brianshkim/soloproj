{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  // database host. defaults to localhost\n  host: 'localhost',\n  // database user's name\n  user: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n  // name of database to connect\n  database: undefined,\n  // database user's password\n  password: null,\n  // a Postgres connection string to be used instead of setting individual connection items\n  // NOTE:  Setting this value will cause it to override any other value (such as database or user) defined\n  // in the defaults object.\n  connectionString: undefined,\n  // database port\n  port: 5432,\n  // number of rows to return at a time from a prepared statement's\n  // portal. 0 will return all rows at once\n  rows: 0,\n  // binary result mode\n  binary: false,\n  // Connection pool options - see https://github.com/brianc/node-pg-pool\n  // number of connections to use in connection pool\n  // 0 will disable connection pooling\n  max: 10,\n  // max milliseconds a client can go unused before it is removed\n  // from the pool and destroyed\n  idleTimeoutMillis: 30000,\n  client_encoding: '',\n  ssl: false,\n  application_name: undefined,\n  fallback_application_name: undefined,\n  options: undefined,\n  parseInputDatesAsUTC: false,\n  // max milliseconds any query using this connection will execute for before timing out in error.\n  // false=unlimited\n  statement_timeout: false,\n  // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds\n  // false=unlimited\n  idle_in_transaction_session_timeout: false,\n  // max milliseconds to wait for query to complete (client side)\n  query_timeout: false,\n  connect_timeout: 0,\n  keepalives: 1,\n  keepalives_idle: 0\n};\n\nvar pgTypes = require('pg-types'); // save default parsers\n\n\nvar parseBigInteger = pgTypes.getTypeParser(20, 'text');\nvar parseBigIntegerArray = pgTypes.getTypeParser(1016, 'text'); // parse int8 so you can get your count values as actual numbers\n\nmodule.exports.__defineSetter__('parseInt8', function (val) {\n  pgTypes.setTypeParser(20, 'text', val ? pgTypes.getTypeParser(23, 'text') : parseBigInteger);\n  pgTypes.setTypeParser(1016, 'text', val ? pgTypes.getTypeParser(1007, 'text') : parseBigIntegerArray);\n});","map":{"version":3,"names":["module","exports","host","user","process","platform","env","USERNAME","USER","database","undefined","password","connectionString","port","rows","binary","max","idleTimeoutMillis","client_encoding","ssl","application_name","fallback_application_name","options","parseInputDatesAsUTC","statement_timeout","idle_in_transaction_session_timeout","query_timeout","connect_timeout","keepalives","keepalives_idle","pgTypes","require","parseBigInteger","getTypeParser","parseBigIntegerArray","__defineSetter__","val","setTypeParser"],"sources":["/home/brian/node_modules/pg/lib/defaults.js"],"sourcesContent":["'use strict'\n\nmodule.exports = {\n  // database host. defaults to localhost\n  host: 'localhost',\n\n  // database user's name\n  user: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n\n  // name of database to connect\n  database: undefined,\n\n  // database user's password\n  password: null,\n\n  // a Postgres connection string to be used instead of setting individual connection items\n  // NOTE:  Setting this value will cause it to override any other value (such as database or user) defined\n  // in the defaults object.\n  connectionString: undefined,\n\n  // database port\n  port: 5432,\n\n  // number of rows to return at a time from a prepared statement's\n  // portal. 0 will return all rows at once\n  rows: 0,\n\n  // binary result mode\n  binary: false,\n\n  // Connection pool options - see https://github.com/brianc/node-pg-pool\n\n  // number of connections to use in connection pool\n  // 0 will disable connection pooling\n  max: 10,\n\n  // max milliseconds a client can go unused before it is removed\n  // from the pool and destroyed\n  idleTimeoutMillis: 30000,\n\n  client_encoding: '',\n\n  ssl: false,\n\n  application_name: undefined,\n\n  fallback_application_name: undefined,\n\n  options: undefined,\n\n  parseInputDatesAsUTC: false,\n\n  // max milliseconds any query using this connection will execute for before timing out in error.\n  // false=unlimited\n  statement_timeout: false,\n\n  // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds\n  // false=unlimited\n  idle_in_transaction_session_timeout: false,\n\n  // max milliseconds to wait for query to complete (client side)\n  query_timeout: false,\n\n  connect_timeout: 0,\n\n  keepalives: 1,\n\n  keepalives_idle: 0,\n}\n\nvar pgTypes = require('pg-types')\n// save default parsers\nvar parseBigInteger = pgTypes.getTypeParser(20, 'text')\nvar parseBigIntegerArray = pgTypes.getTypeParser(1016, 'text')\n\n// parse int8 so you can get your count values as actual numbers\nmodule.exports.__defineSetter__('parseInt8', function (val) {\n  pgTypes.setTypeParser(20, 'text', val ? pgTypes.getTypeParser(23, 'text') : parseBigInteger)\n  pgTypes.setTypeParser(1016, 'text', val ? pgTypes.getTypeParser(1007, 'text') : parseBigIntegerArray)\n})\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACf;EACAC,IAAI,EAAE,WAFS;EAIf;EACAC,IAAI,EAAEC,OAAO,CAACC,QAAR,KAAqB,OAArB,GAA+BD,OAAO,CAACE,GAAR,CAAYC,QAA3C,GAAsDH,OAAO,CAACE,GAAR,CAAYE,IALzD;EAOf;EACAC,QAAQ,EAAEC,SARK;EAUf;EACAC,QAAQ,EAAE,IAXK;EAaf;EACA;EACA;EACAC,gBAAgB,EAAEF,SAhBH;EAkBf;EACAG,IAAI,EAAE,IAnBS;EAqBf;EACA;EACAC,IAAI,EAAE,CAvBS;EAyBf;EACAC,MAAM,EAAE,KA1BO;EA4Bf;EAEA;EACA;EACAC,GAAG,EAAE,EAhCU;EAkCf;EACA;EACAC,iBAAiB,EAAE,KApCJ;EAsCfC,eAAe,EAAE,EAtCF;EAwCfC,GAAG,EAAE,KAxCU;EA0CfC,gBAAgB,EAAEV,SA1CH;EA4CfW,yBAAyB,EAAEX,SA5CZ;EA8CfY,OAAO,EAAEZ,SA9CM;EAgDfa,oBAAoB,EAAE,KAhDP;EAkDf;EACA;EACAC,iBAAiB,EAAE,KApDJ;EAsDf;EACA;EACAC,mCAAmC,EAAE,KAxDtB;EA0Df;EACAC,aAAa,EAAE,KA3DA;EA6DfC,eAAe,EAAE,CA7DF;EA+DfC,UAAU,EAAE,CA/DG;EAiEfC,eAAe,EAAE;AAjEF,CAAjB;;AAoEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB,C,CACA;;;AACA,IAAIC,eAAe,GAAGF,OAAO,CAACG,aAAR,CAAsB,EAAtB,EAA0B,MAA1B,CAAtB;AACA,IAAIC,oBAAoB,GAAGJ,OAAO,CAACG,aAAR,CAAsB,IAAtB,EAA4B,MAA5B,CAA3B,C,CAEA;;AACAjC,MAAM,CAACC,OAAP,CAAekC,gBAAf,CAAgC,WAAhC,EAA6C,UAAUC,GAAV,EAAe;EAC1DN,OAAO,CAACO,aAAR,CAAsB,EAAtB,EAA0B,MAA1B,EAAkCD,GAAG,GAAGN,OAAO,CAACG,aAAR,CAAsB,EAAtB,EAA0B,MAA1B,CAAH,GAAuCD,eAA5E;EACAF,OAAO,CAACO,aAAR,CAAsB,IAAtB,EAA4B,MAA5B,EAAoCD,GAAG,GAAGN,OAAO,CAACG,aAAR,CAAsB,IAAtB,EAA4B,MAA5B,CAAH,GAAyCC,oBAAhF;AACD,CAHD"},"metadata":{},"sourceType":"script"}