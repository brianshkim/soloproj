{"ast":null,"code":"\"use strict\"; //binary data writer tuned for encoding binary specific to the postgres binary protocol\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Writer = void 0;\n\nclass Writer {\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;\n    this.size = size;\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.allocUnsafe(size);\n  }\n\n  ensure(size) {\n    var remaining = this.buffer.length - this.offset;\n\n    if (remaining < size) {\n      var oldBuffer = this.buffer; // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n\n      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n      this.buffer = Buffer.allocUnsafe(newSize);\n      oldBuffer.copy(this.buffer);\n    }\n  }\n\n  addInt32(num) {\n    this.ensure(4);\n    this.buffer[this.offset++] = num >>> 24 & 0xff;\n    this.buffer[this.offset++] = num >>> 16 & 0xff;\n    this.buffer[this.offset++] = num >>> 8 & 0xff;\n    this.buffer[this.offset++] = num >>> 0 & 0xff;\n    return this;\n  }\n\n  addInt16(num) {\n    this.ensure(2);\n    this.buffer[this.offset++] = num >>> 8 & 0xff;\n    this.buffer[this.offset++] = num >>> 0 & 0xff;\n    return this;\n  }\n\n  addCString(string) {\n    if (!string) {\n      this.ensure(1);\n    } else {\n      var len = Buffer.byteLength(string);\n      this.ensure(len + 1); // +1 for null terminator\n\n      this.buffer.write(string, this.offset, 'utf-8');\n      this.offset += len;\n    }\n\n    this.buffer[this.offset++] = 0; // null terminator\n\n    return this;\n  }\n\n  addString() {\n    let string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var len = Buffer.byteLength(string);\n    this.ensure(len);\n    this.buffer.write(string, this.offset);\n    this.offset += len;\n    return this;\n  }\n\n  add(otherBuffer) {\n    this.ensure(otherBuffer.length);\n    otherBuffer.copy(this.buffer, this.offset);\n    this.offset += otherBuffer.length;\n    return this;\n  }\n\n  join(code) {\n    if (code) {\n      this.buffer[this.headerPosition] = code; //length is everything in this packet minus the code\n\n      const length = this.offset - (this.headerPosition + 1);\n      this.buffer.writeInt32BE(length, this.headerPosition + 1);\n    }\n\n    return this.buffer.slice(code ? 0 : 5, this.offset);\n  }\n\n  flush(code) {\n    var result = this.join(code);\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.allocUnsafe(this.size);\n    return result;\n  }\n\n}\n\nexports.Writer = Writer;","map":{"version":3,"mappings":"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","names":["Writer","constructor","size","buffer","Buffer","allocUnsafe","ensure","remaining","length","offset","oldBuffer","newSize","copy","addInt32","num","addInt16","addCString","string","len","byteLength","write","addString","add","otherBuffer","join","code","headerPosition","writeInt32BE","slice","flush","result","exports"],"sources":["/home/brian/node_modules/pg-protocol/src/buffer-writer.ts"],"sourcesContent":["//binary data writer tuned for encoding binary specific to the postgres binary protocol\n\nexport class Writer {\n  private buffer: Buffer\n  private offset: number = 5\n  private headerPosition: number = 0\n  constructor(private size = 256) {\n    this.buffer = Buffer.allocUnsafe(size)\n  }\n\n  private ensure(size: number): void {\n    var remaining = this.buffer.length - this.offset\n    if (remaining < size) {\n      var oldBuffer = this.buffer\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size\n      this.buffer = Buffer.allocUnsafe(newSize)\n      oldBuffer.copy(this.buffer)\n    }\n  }\n\n  public addInt32(num: number): Writer {\n    this.ensure(4)\n    this.buffer[this.offset++] = (num >>> 24) & 0xff\n    this.buffer[this.offset++] = (num >>> 16) & 0xff\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addInt16(num: number): Writer {\n    this.ensure(2)\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addCString(string: string): Writer {\n    if (!string) {\n      this.ensure(1)\n    } else {\n      var len = Buffer.byteLength(string)\n      this.ensure(len + 1) // +1 for null terminator\n      this.buffer.write(string, this.offset, 'utf-8')\n      this.offset += len\n    }\n\n    this.buffer[this.offset++] = 0 // null terminator\n    return this\n  }\n\n  public addString(string: string = ''): Writer {\n    var len = Buffer.byteLength(string)\n    this.ensure(len)\n    this.buffer.write(string, this.offset)\n    this.offset += len\n    return this\n  }\n\n  public add(otherBuffer: Buffer): Writer {\n    this.ensure(otherBuffer.length)\n    otherBuffer.copy(this.buffer, this.offset)\n    this.offset += otherBuffer.length\n    return this\n  }\n\n  private join(code?: number): Buffer {\n    if (code) {\n      this.buffer[this.headerPosition] = code\n      //length is everything in this packet minus the code\n      const length = this.offset - (this.headerPosition + 1)\n      this.buffer.writeInt32BE(length, this.headerPosition + 1)\n    }\n    return this.buffer.slice(code ? 0 : 5, this.offset)\n  }\n\n  public flush(code?: number): Buffer {\n    var result = this.join(code)\n    this.offset = 5\n    this.headerPosition = 0\n    this.buffer = Buffer.allocUnsafe(this.size)\n    return result\n  }\n}\n"]},"metadata":{},"sourceType":"script"}