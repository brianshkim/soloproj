{"ast":null,"code":"'use strict';\n\nconst {\n  classToInvokable\n} = require('./utils');\n\nclass ABSTRACT {\n  static toString() {\n    return new this().toString(...arguments);\n  }\n\n  toString() {\n    return this.toSql(...arguments);\n  }\n\n  toSql() {\n    throw new Error('toSql implementation missing');\n  }\n\n}\n\nclass INITIALLY_DEFERRED extends ABSTRACT {\n  toSql() {\n    return 'DEFERRABLE INITIALLY DEFERRED';\n  }\n\n}\n\nclass INITIALLY_IMMEDIATE extends ABSTRACT {\n  toSql() {\n    return 'DEFERRABLE INITIALLY IMMEDIATE';\n  }\n\n}\n\nclass NOT extends ABSTRACT {\n  toSql() {\n    return 'NOT DEFERRABLE';\n  }\n\n}\n\nclass SET_DEFERRED extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setDeferredQuery(this.constraints);\n  }\n\n}\n\nclass SET_IMMEDIATE extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setImmediateQuery(this.constraints);\n  }\n\n}\n/**\n * A collection of properties related to deferrable constraints. It can be used to\n * make foreign key constraints deferrable and to set the constraints within a\n * transaction. This is only supported in PostgreSQL.\n *\n * The foreign keys can be configured like this. It will create a foreign key\n * that will check the constraints immediately when the data was inserted.\n *\n * ```js\n * sequelize.define('Model', {\n *   foreign_id: {\n *     type: Sequelize.INTEGER,\n *     references: {\n *       model: OtherModel,\n *       key: 'id',\n *       deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n *     }\n *   }\n * });\n * ```\n *\n * The constraints can be configured in a transaction like this. It will\n * trigger a query once the transaction has been started and set the constraints\n * to be checked at the very end of the transaction.\n *\n * ```js\n * sequelize.transaction({\n *   deferrable: Sequelize.Deferrable.SET_DEFERRED\n * });\n * ```\n *\n * @property INITIALLY_DEFERRED Defer constraints checks to the end of transactions.\n * @property INITIALLY_IMMEDIATE Trigger the constraint checks immediately\n * @property NOT Set the constraints to not deferred. This is the default in PostgreSQL and it make it impossible to dynamically defer the constraints within a transaction.\n * @property SET_DEFERRED\n * @property SET_IMMEDIATE\n */\n\n\nconst Deferrable = module.exports = {\n  // eslint-disable-line\n  INITIALLY_DEFERRED: classToInvokable(INITIALLY_DEFERRED),\n  INITIALLY_IMMEDIATE: classToInvokable(INITIALLY_IMMEDIATE),\n  NOT: classToInvokable(NOT),\n  SET_DEFERRED: classToInvokable(SET_DEFERRED),\n  SET_IMMEDIATE: classToInvokable(SET_IMMEDIATE)\n};","map":{"version":3,"names":["classToInvokable","require","ABSTRACT","toString","toSql","Error","INITIALLY_DEFERRED","INITIALLY_IMMEDIATE","NOT","SET_DEFERRED","constructor","constraints","queryGenerator","setDeferredQuery","SET_IMMEDIATE","setImmediateQuery","Deferrable","module","exports"],"sources":["/home/brian/node_modules/sequelize/lib/deferrable.js"],"sourcesContent":["'use strict';\n\nconst { classToInvokable } = require('./utils');\n\nclass ABSTRACT {\n  static toString(...args) {\n    return new this().toString(...args);\n  }\n\n  toString(...args) {\n    return this.toSql(...args);\n  }\n\n  toSql() {\n    throw new Error('toSql implementation missing');\n  }\n}\n\nclass INITIALLY_DEFERRED extends ABSTRACT {\n  toSql() {\n    return 'DEFERRABLE INITIALLY DEFERRED';\n  }\n}\n\nclass INITIALLY_IMMEDIATE extends ABSTRACT {\n  toSql() {\n    return 'DEFERRABLE INITIALLY IMMEDIATE';\n  }\n}\n\nclass NOT extends ABSTRACT {\n  toSql() {\n    return 'NOT DEFERRABLE';\n  }\n}\n\nclass SET_DEFERRED extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setDeferredQuery(this.constraints);\n  }\n}\n\nclass SET_IMMEDIATE extends ABSTRACT {\n  constructor(constraints) {\n    super();\n    this.constraints = constraints;\n  }\n\n  toSql(queryGenerator) {\n    return queryGenerator.setImmediateQuery(this.constraints);\n  }\n}\n\n/**\n * A collection of properties related to deferrable constraints. It can be used to\n * make foreign key constraints deferrable and to set the constraints within a\n * transaction. This is only supported in PostgreSQL.\n *\n * The foreign keys can be configured like this. It will create a foreign key\n * that will check the constraints immediately when the data was inserted.\n *\n * ```js\n * sequelize.define('Model', {\n *   foreign_id: {\n *     type: Sequelize.INTEGER,\n *     references: {\n *       model: OtherModel,\n *       key: 'id',\n *       deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n *     }\n *   }\n * });\n * ```\n *\n * The constraints can be configured in a transaction like this. It will\n * trigger a query once the transaction has been started and set the constraints\n * to be checked at the very end of the transaction.\n *\n * ```js\n * sequelize.transaction({\n *   deferrable: Sequelize.Deferrable.SET_DEFERRED\n * });\n * ```\n *\n * @property INITIALLY_DEFERRED Defer constraints checks to the end of transactions.\n * @property INITIALLY_IMMEDIATE Trigger the constraint checks immediately\n * @property NOT Set the constraints to not deferred. This is the default in PostgreSQL and it make it impossible to dynamically defer the constraints within a transaction.\n * @property SET_DEFERRED\n * @property SET_IMMEDIATE\n */\n\nconst Deferrable = module.exports = { // eslint-disable-line\n  INITIALLY_DEFERRED: classToInvokable(INITIALLY_DEFERRED),\n  INITIALLY_IMMEDIATE: classToInvokable(INITIALLY_IMMEDIATE),\n  NOT: classToInvokable(NOT),\n  SET_DEFERRED: classToInvokable(SET_DEFERRED),\n  SET_IMMEDIATE: classToInvokable(SET_IMMEDIATE)\n};\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAuBC,OAAO,CAAC,SAAD,CAApC;;AAEA,MAAMC,QAAN,CAAe;EACE,OAARC,QAAQ,GAAU;IACvB,OAAO,IAAI,IAAJ,GAAWA,QAAX,CAAoB,YAApB,CAAP;EACD;;EAEDA,QAAQ,GAAU;IAChB,OAAO,KAAKC,KAAL,CAAW,YAAX,CAAP;EACD;;EAEDA,KAAK,GAAG;IACN,MAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;EACD;;AAXY;;AAcf,MAAMC,kBAAN,SAAiCJ,QAAjC,CAA0C;EACxCE,KAAK,GAAG;IACN,OAAO,+BAAP;EACD;;AAHuC;;AAM1C,MAAMG,mBAAN,SAAkCL,QAAlC,CAA2C;EACzCE,KAAK,GAAG;IACN,OAAO,gCAAP;EACD;;AAHwC;;AAM3C,MAAMI,GAAN,SAAkBN,QAAlB,CAA2B;EACzBE,KAAK,GAAG;IACN,OAAO,gBAAP;EACD;;AAHwB;;AAM3B,MAAMK,YAAN,SAA2BP,QAA3B,CAAoC;EAClCQ,WAAW,CAACC,WAAD,EAAc;IACvB;IACA,KAAKA,WAAL,GAAmBA,WAAnB;EACD;;EAEDP,KAAK,CAACQ,cAAD,EAAiB;IACpB,OAAOA,cAAc,CAACC,gBAAf,CAAgC,KAAKF,WAArC,CAAP;EACD;;AARiC;;AAWpC,MAAMG,aAAN,SAA4BZ,QAA5B,CAAqC;EACnCQ,WAAW,CAACC,WAAD,EAAc;IACvB;IACA,KAAKA,WAAL,GAAmBA,WAAnB;EACD;;EAEDP,KAAK,CAACQ,cAAD,EAAiB;IACpB,OAAOA,cAAc,CAACG,iBAAf,CAAiC,KAAKJ,WAAtC,CAAP;EACD;;AARkC;AAWrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMK,UAAU,GAAGC,MAAM,CAACC,OAAP,GAAiB;EAAE;EACpCZ,kBAAkB,EAAEN,gBAAgB,CAACM,kBAAD,CADF;EAElCC,mBAAmB,EAAEP,gBAAgB,CAACO,mBAAD,CAFH;EAGlCC,GAAG,EAAER,gBAAgB,CAACQ,GAAD,CAHa;EAIlCC,YAAY,EAAET,gBAAgB,CAACS,YAAD,CAJI;EAKlCK,aAAa,EAAEd,gBAAgB,CAACc,aAAD;AALG,CAApC"},"metadata":{},"sourceType":"script"}