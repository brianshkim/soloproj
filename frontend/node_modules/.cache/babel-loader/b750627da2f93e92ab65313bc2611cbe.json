{"ast":null,"code":"const LOAD = \"song/LOAD\";\nconst LOAD_TYPES = \"song/LOAD_TYPES\";\nconst ADD_ONE = \"song/ADD_ONE\";\n\nconst load = list => ({\n  type: LOAD,\n  list\n});\n\nexport const getSongs = () => async dispatch => {\n  const response = await fetch(`/api/songs`);\n\n  if (response.ok) {\n    const list = await response.json();\n    dispatch(load(list));\n  }\n};\nexport const createSong = data => async dispatch => {\n  console.log(\"TOP OF THUNK IN STORE - data -> \", data);\n\n  try {\n    const response = await fetch(`/api/songs`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      let error;\n\n      if (response.status === 422) {\n        error = await response.json();\n        throw new ValidationError(error.errors, response.statusText);\n      } else {\n        let errorJSON;\n        error = await response.text();\n\n        try {\n          // Check if the error is JSON, i.e., from the Pokemon server. If so,\n          // don't throw error yet or it will be caught by the following catch\n          errorJSON = JSON.parse(error);\n        } catch {\n          // Case if server could not be reached\n          throw new Error(error);\n        }\n\n        throw new Error(`${errorJSON.title}: ${errorJSON.message}`);\n      }\n    }\n\n    const pokemon = await response.json();\n    console.log(\"AFTER POKEMON = RESPONSE.JSON() IN THUNK - POKEMON -> \", pokemon);\n    dispatch(addOnePokemon(pokemon));\n    return pokemon;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst sortList = list => {\n  return list.sort((pokemonA, pokemonB) => {\n    return pokemonA.number - pokemonB.number;\n  }).map(pokemon => pokemon.id);\n};\n\nconst initialState = {\n  list: []\n};\n\nconst songReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOAD:\n      const Songs = {};\n      action.list.forEach(song => {\n        Songs[song.id] = song;\n      });\n      return { ...Songs,\n        ...state,\n        list: sortList(action.list)\n      };\n\n    case LOAD_TYPES:\n      return { ...state,\n        types: action.types\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["LOAD","LOAD_TYPES","ADD_ONE","load","list","type","getSongs","dispatch","response","fetch","ok","json","createSong","data","console","log","method","headers","body","JSON","stringify","error","status","ValidationError","errors","statusText","errorJSON","text","parse","Error","title","message","pokemon","addOnePokemon","sortList","sort","pokemonA","pokemonB","number","map","id","initialState","songReducer","state","action","Songs","forEach","song","types"],"sources":["/home/brian/w15/practice-for-week-15-react-redux-authenticate-me-long-practice-main/authenticate-me/frontend/src/store/songs.js"],"sourcesContent":["\nconst LOAD = \"song/LOAD\";\nconst LOAD_TYPES = \"song/LOAD_TYPES\";\nconst ADD_ONE = \"song/ADD_ONE\";\n\n\n\nconst load = (list) => ({\n    type: LOAD,\n    list,\n  });\n\n  export const getSongs = () => async (dispatch) => {\n    const response = await fetch(`/api/songs`);\n\n    if (response.ok) {\n      const list = await response.json();\n      dispatch(load(list));\n    }\n  };\n\n  export const createSong = (data) => async (dispatch) => {\n    console.log(\"TOP OF THUNK IN STORE - data -> \", data);\n    try {\n      const response = await fetch(`/api/songs`, {\n        method: \"post\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n\n    if (!response.ok) {\n        let error;\n        if (response.status === 422) {\n          error = await response.json();\n          throw new ValidationError(error.errors, response.statusText);\n        } else {\n          let errorJSON;\n          error = await response.text();\n          try {\n            // Check if the error is JSON, i.e., from the Pokemon server. If so,\n            // don't throw error yet or it will be caught by the following catch\n            errorJSON = JSON.parse(error);\n          } catch {\n            // Case if server could not be reached\n            throw new Error(error);\n          }\n          throw new Error(`${errorJSON.title}: ${errorJSON.message}`);\n        }\n      }\n      const pokemon = await response.json();\n\n    console.log(\n      \"AFTER POKEMON = RESPONSE.JSON() IN THUNK - POKEMON -> \",\n      pokemon\n    );\n\n    dispatch(addOnePokemon(pokemon));\n    return pokemon;\n  } catch (error) {\n    throw error;\n  }\n};\n\n\n  const sortList = (list) => {\n    return list\n      .sort((pokemonA, pokemonB) => {\n        return pokemonA.number - pokemonB.number;\n      })\n      .map((pokemon) => pokemon.id);\n  };\n\n\n  const initialState = {list:[]}\n\n\nconst songReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOAD:\n            const Songs = {};\n            action.list.forEach((song) => {\n              Songs[song.id] = song\n            });\n            return {\n              ...Songs,\n              ...state,\n              list: sortList(action.list),\n            };\n          case LOAD_TYPES:\n            return {\n              ...state,\n              types: action.types,\n            };\n        default:\n            return state;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}