{"ast":null,"code":"'use strict';\n\nconst Utils = require('../../utils');\n\nconst Transaction = require('../../transaction');\n\nconst _ = require('lodash');\n\nconst MySqlQueryGenerator = require('../mysql/query-generator');\n\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nclass SQLiteQueryGenerator extends MySqlQueryGenerator {\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  versionQuery() {\n    return 'SELECT sqlite_version() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = options || {};\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys = _.values(attributes).filter(definition => definition.includes('PRIMARY KEY')).length > 1;\n    const attrArray = [];\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        const dataType = attributes[attr];\n        const containsAutoIncrement = dataType.includes('AUTOINCREMENT');\n        let dataTypeString = dataType;\n\n        if (dataType.includes('PRIMARY KEY')) {\n          if (dataType.includes('INT')) {\n            // Only INTEGER is allowed for primary key, see https://github.com/sequelize/sequelize/issues/969 (no lenght, unsigned etc)\n            dataTypeString = containsAutoIncrement ? 'INTEGER PRIMARY KEY AUTOINCREMENT' : 'INTEGER PRIMARY KEY';\n\n            if (dataType.includes(' REFERENCES')) {\n              dataTypeString += dataType.substr(dataType.indexOf(' REFERENCES'));\n            }\n          }\n\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n\n            if (dataType.includes('NOT NULL')) {\n              dataTypeString = dataType.replace(' PRIMARY KEY', '');\n            } else {\n              dataTypeString = dataType.replace('PRIMARY KEY', 'NOT NULL');\n            }\n          }\n        }\n\n        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attrStr += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attrStr += `, PRIMARY KEY (${pkString})`;\n    }\n\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n\n\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    } // https://sqlite.org/json1.html\n\n\n    const jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    } // Check invalid json statement\n\n\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    } // return true if the statement has valid json function\n\n\n    return hasJsonFunction;\n  } //sqlite can't cast to datetime so we need to convert date values to their ISO strings\n\n\n  _toJSONValue(value) {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n\n    if (Array.isArray(value) && value[0] instanceof Date) {\n      return value.map(val => val.toISOString());\n    }\n\n    return value;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n\n    if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      }\n    }\n\n    return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, {\n      context: 'addColumn'\n    });\n    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  showTablesQuery() {\n    return 'SELECT name FROM `sqlite_master` WHERE type=\\'table\\' and name!=\\'sqlite_sequence\\';';\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model, options) {\n    options.ignoreDuplicates = true;\n    const bind = [];\n    const bindParam = this.bindParam(bind);\n\n    const upsertOptions = _.defaults({\n      bindParam\n    }, options);\n\n    const insert = this.insertQuery(tableName, insertValues, model.rawAttributes, upsertOptions);\n    const update = this.updateQuery(tableName, updateValues, where, upsertOptions, model.rawAttributes);\n    const query = `${insert.query} ${update.query}`;\n    return {\n      query,\n      bind\n    };\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, {\n          context: 'UPDATE'\n        })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, {\n          context: 'UPDATE'\n        }, bindParam)}`);\n      }\n    }\n\n    let query;\n\n    const whereOptions = _.defaults({\n      bindParam\n    }, options);\n\n    if (options.limit) {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit)})`;\n    } else {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} ${this.whereQuery(where, whereOptions)}`;\n    }\n\n    return {\n      query,\n      bind\n    };\n  }\n\n  truncateTableQuery(tableName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return [`DELETE FROM ${this.quoteTable(tableName)}`, options.restartIdentity ? `; DELETE FROM ${this.quoteTable('sqlite_sequence')} WHERE ${this.quoteIdentifier('name')} = ${Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), '`'), \"'\")};` : ''].join('');\n  }\n\n  deleteQuery(tableName, where) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let model = arguments.length > 3 ? arguments[3] : undefined;\n\n    _.defaults(options, this.options);\n\n    let whereClause = this.getWhereConditions(where, null, model, options);\n\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;\n    }\n\n    return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;\n  }\n\n  attributesToSQL(attributes) {\n    const result = {};\n\n    for (const name in attributes) {\n      const dataType = attributes[name];\n      const fieldName = dataType.field || name;\n\n      if (_.isObject(dataType)) {\n        let sql = dataType.type.toString();\n\n        if (Object.prototype.hasOwnProperty.call(dataType, 'allowNull') && !dataType.allowNull) {\n          sql += ' NOT NULL';\n        }\n\n        if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n          // TODO thoroughly check that DataTypes.NOW will properly\n          // get populated on all databases as DEFAULT value\n          // i.e. mysql requires: DEFAULT CURRENT_TIMESTAMP\n          sql += ` DEFAULT ${this.escape(dataType.defaultValue, dataType)}`;\n        }\n\n        if (dataType.unique === true) {\n          sql += ' UNIQUE';\n        }\n\n        if (dataType.primaryKey) {\n          sql += ' PRIMARY KEY';\n\n          if (dataType.autoIncrement) {\n            sql += ' AUTOINCREMENT';\n          }\n        }\n\n        if (dataType.references) {\n          const referencesTable = this.quoteTable(dataType.references.model);\n          let referencesKey;\n\n          if (dataType.references.key) {\n            referencesKey = this.quoteIdentifier(dataType.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier('id');\n          }\n\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n          if (dataType.onDelete) {\n            sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;\n          }\n\n          if (dataType.onUpdate) {\n            sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;\n          }\n        }\n\n        result[fieldName] = sql;\n      } else {\n        result[fieldName] = dataType;\n      }\n    }\n\n    return result;\n  }\n\n  showIndexesQuery(tableName) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND sql LIKE '%${constraintName}%'`;\n    }\n\n    return `${sql};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = {\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter,\n      tableName\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;\n  }\n\n  describeCreateTableQuery(tableName) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;\n  }\n\n  removeColumnQuery(tableName, attributes) {\n    attributes = this.attributesToSQL(attributes);\n    let backupTableName;\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', '); // Temporary table cannot work for foreign keys.\n\n    return `${this.createTableQuery(backupTableName, attributes)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};` + `DROP TABLE ${quotedTableName};${this.createTableQuery(tableName, attributes)}INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};` + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  _alterConstraintQuery(tableName, attributes, createTableSql) {\n    let backupTableName;\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n    return `${createTableSql.replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`).replace(`CREATE TABLE ${quotedTableName.replace(/`/g, '\"')}`, `CREATE TABLE ${quotedBackupTableName}`)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};` + `DROP TABLE ${quotedTableName};` + `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;\n  }\n\n  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n    let backupTableName;\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNamesImport = Object.keys(attributes).map(attr => attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)).join(', ');\n    const attributeNamesExport = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', '); // Temporary tables don't support foreign keys, so creating a temporary table will not allow foreign keys to be preserved\n\n    return `${this.createTableQuery(backupTableName, attributes)}INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};` + `DROP TABLE ${quotedTableName};${this.createTableQuery(tableName, attributes)}INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};` + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return `BEGIN ${transaction.options.type} TRANSACTION;`;\n  }\n\n  setIsolationLevelQuery(value) {\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        return '-- SQLite is not able to choose the isolation level REPEATABLE READ.';\n\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return 'PRAGMA read_uncommitted = ON;';\n\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return 'PRAGMA read_uncommitted = OFF;';\n\n      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n        return '-- SQLite\\'s default isolation level is SERIALIZABLE. Nothing to do.';\n\n      default:\n        throw new Error(`Unknown isolation level: ${value}`);\n    }\n  }\n\n  replaceBooleanDefaults(sql) {\n    return sql.replace(/DEFAULT '?false'?/g, 'DEFAULT 0').replace(/DEFAULT '?true'?/g, 'DEFAULT 1');\n  }\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n\n\n  getForeignKeysQuery(tableName) {\n    return `PRAGMA foreign_key_list(${tableName})`;\n  }\n\n}\n\nmodule.exports = SQLiteQueryGenerator;","map":{"version":3,"names":["Utils","require","Transaction","_","MySqlQueryGenerator","AbstractQueryGenerator","SQLiteQueryGenerator","createSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","options","primaryKeys","needsMultiplePrimaryKeys","values","filter","definition","includes","length","attrArray","attr","Object","prototype","hasOwnProperty","call","dataType","containsAutoIncrement","dataTypeString","substr","indexOf","push","replace","quoteIdentifier","table","quoteTable","attrStr","join","pkString","map","pk","uniqueKeys","each","columns","customIndex","fields","field","sql","replaceBooleanDefaults","booleanValue","value","_checkValidJsonStatement","stmt","jsonFunctionRegex","tokenCaptureRegex","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","functionMatches","exec","tokenMatches","capturedToken","Error","_toJSONValue","Date","toISOString","Array","isArray","val","handleSequelizeMethod","smth","factory","prepend","Json","Cast","test","type","addColumnQuery","key","attributesToSQL","context","attribute","showTablesQuery","upsertQuery","insertValues","updateValues","where","model","ignoreDuplicates","bind","bindParam","upsertOptions","defaults","insert","insertQuery","rawAttributes","update","updateQuery","query","attrValueHash","removeNullValuesFromHash","omitNull","modelAttributeMap","SequelizeMethod","escape","undefined","format","whereOptions","limit","whereQuery","truncateTableQuery","restartIdentity","addTicks","removeTicks","deleteQuery","whereClause","getWhereConditions","result","name","fieldName","isObject","toString","allowNull","defaultValueSchemable","defaultValue","unique","primaryKey","autoIncrement","references","referencesTable","referencesKey","onDelete","toUpperCase","onUpdate","showIndexesQuery","showConstraintsQuery","constraintName","removeIndexQuery","indexNameOrAttributes","indexName","underscore","describeTableQuery","schema","schemaDelimiter","_schema","_schemaDelimiter","addSchema","describeCreateTableQuery","removeColumnQuery","backupTableName","quotedTableName","quotedBackupTableName","attributeNames","keys","_alterConstraintQuery","createTableSql","renameColumnQuery","attrNameBefore","attrNameAfter","attributeNamesImport","attributeNamesExport","startTransactionQuery","transaction","parent","setIsolationLevelQuery","ISOLATION_LEVELS","REPEATABLE_READ","READ_UNCOMMITTED","READ_COMMITTED","SERIALIZABLE","getForeignKeysQuery","module","exports"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/sqlite/query-generator.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst Transaction = require('../../transaction');\nconst _ = require('lodash');\nconst MySqlQueryGenerator = require('../mysql/query-generator');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nclass SQLiteQueryGenerator extends MySqlQueryGenerator {\n  createSchema() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  showSchemasQuery() {\n    return \"SELECT name FROM `sqlite_master` WHERE type='table' and name!='sqlite_sequence';\";\n  }\n\n  versionQuery() {\n    return 'SELECT sqlite_version() as `version`';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = options || {};\n\n    const primaryKeys = [];\n    const needsMultiplePrimaryKeys = _.values(attributes).filter(definition => definition.includes('PRIMARY KEY')).length > 1;\n    const attrArray = [];\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        const dataType = attributes[attr];\n        const containsAutoIncrement = dataType.includes('AUTOINCREMENT');\n\n        let dataTypeString = dataType;\n        if (dataType.includes('PRIMARY KEY')) {\n          if (dataType.includes('INT')) {\n            // Only INTEGER is allowed for primary key, see https://github.com/sequelize/sequelize/issues/969 (no lenght, unsigned etc)\n            dataTypeString = containsAutoIncrement ? 'INTEGER PRIMARY KEY AUTOINCREMENT' : 'INTEGER PRIMARY KEY';\n\n            if (dataType.includes(' REFERENCES')) {\n              dataTypeString += dataType.substr(dataType.indexOf(' REFERENCES'));\n            }\n          }\n\n          if (needsMultiplePrimaryKeys) {\n            primaryKeys.push(attr);\n            if (dataType.includes('NOT NULL')) {\n              dataTypeString = dataType.replace(' PRIMARY KEY', '');\n            } else {\n              dataTypeString = dataType.replace('PRIMARY KEY', 'NOT NULL');\n            }\n          }\n        }\n        attrArray.push(`${this.quoteIdentifier(attr)} ${dataTypeString}`);\n      }\n    }\n\n    const table = this.quoteTable(tableName);\n    let attrStr = attrArray.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attrStr += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attrStr += `, PRIMARY KEY (${pkString})`;\n    }\n\n    const sql = `CREATE TABLE IF NOT EXISTS ${table} (${attrStr});`;\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://sqlite.org/json1.html\n    const jsonFunctionRegex = /^\\s*(json(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  //sqlite can't cast to datetime so we need to convert date values to their ISO strings\n  _toJSONValue(value) {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n    if (Array.isArray(value) && value[0] instanceof Date) {\n      return value.map(val => val.toISOString());\n    }\n    return value;\n  }\n\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n    }\n\n    if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'datetime';\n      }\n    }\n\n    return AbstractQueryGenerator.prototype.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, dataType) {\n    const attributes = {};\n    attributes[key] = dataType;\n    const fields = this.attributesToSQL(attributes, { context: 'addColumn' });\n    const attribute = `${this.quoteIdentifier(key)} ${fields[key]}`;\n\n    const sql = `ALTER TABLE ${this.quoteTable(table)} ADD ${attribute};`;\n\n    return this.replaceBooleanDefaults(sql);\n  }\n\n  showTablesQuery() {\n    return 'SELECT name FROM `sqlite_master` WHERE type=\\'table\\' and name!=\\'sqlite_sequence\\';';\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model, options) {\n    options.ignoreDuplicates = true;\n\n    const bind = [];\n    const bindParam = this.bindParam(bind);\n\n    const upsertOptions = _.defaults({ bindParam }, options);\n    const insert = this.insertQuery(tableName, insertValues, model.rawAttributes, upsertOptions);\n    const update = this.updateQuery(tableName, updateValues, where, upsertOptions, model.rawAttributes);\n\n    const query = `${insert.query} ${update.query}`;\n\n    return { query, bind };\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    options = options || {};\n    _.defaults(options, this.options);\n\n    attrValueHash = Utils.removeNullValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = [];\n    const bindParam = options.bindParam || this.bindParam(bind);\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key];\n\n      if (value instanceof Utils.SequelizeMethod || options.bindParam === false) {\n        values.push(`${this.quoteIdentifier(key)}=${this.escape(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' })}`);\n      } else {\n        values.push(`${this.quoteIdentifier(key)}=${this.format(value, modelAttributeMap && modelAttributeMap[key] || undefined, { context: 'UPDATE' }, bindParam)}`);\n      }\n    }\n\n    let query;\n    const whereOptions = _.defaults({ bindParam }, options);\n\n    if (options.limit) {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} LIMIT ${this.escape(options.limit)})`;\n    } else {\n      query = `UPDATE ${this.quoteTable(tableName)} SET ${values.join(',')} ${this.whereQuery(where, whereOptions)}`;\n    }\n\n    return { query, bind };\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `DELETE FROM ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? `; DELETE FROM ${this.quoteTable('sqlite_sequence')} WHERE ${this.quoteIdentifier('name')} = ${Utils.addTicks(Utils.removeTicks(this.quoteTable(tableName), '`'), \"'\")};` : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    _.defaults(options, this.options);\n\n    let whereClause = this.getWhereConditions(where, null, model, options);\n\n    if (whereClause) {\n      whereClause = `WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      whereClause = `WHERE rowid IN (SELECT rowid FROM ${this.quoteTable(tableName)} ${whereClause} LIMIT ${this.escape(options.limit)})`;\n    }\n\n    return `DELETE FROM ${this.quoteTable(tableName)} ${whereClause}`;\n  }\n\n  attributesToSQL(attributes) {\n    const result = {};\n\n    for (const name in attributes) {\n      const dataType = attributes[name];\n      const fieldName = dataType.field || name;\n\n      if (_.isObject(dataType)) {\n        let sql = dataType.type.toString();\n\n        if (Object.prototype.hasOwnProperty.call(dataType, 'allowNull') && !dataType.allowNull) {\n          sql += ' NOT NULL';\n        }\n\n        if (Utils.defaultValueSchemable(dataType.defaultValue)) {\n          // TODO thoroughly check that DataTypes.NOW will properly\n          // get populated on all databases as DEFAULT value\n          // i.e. mysql requires: DEFAULT CURRENT_TIMESTAMP\n          sql += ` DEFAULT ${this.escape(dataType.defaultValue, dataType)}`;\n        }\n\n        if (dataType.unique === true) {\n          sql += ' UNIQUE';\n        }\n\n        if (dataType.primaryKey) {\n          sql += ' PRIMARY KEY';\n\n          if (dataType.autoIncrement) {\n            sql += ' AUTOINCREMENT';\n          }\n        }\n\n        if (dataType.references) {\n          const referencesTable = this.quoteTable(dataType.references.model);\n\n          let referencesKey;\n          if (dataType.references.key) {\n            referencesKey = this.quoteIdentifier(dataType.references.key);\n          } else {\n            referencesKey = this.quoteIdentifier('id');\n          }\n\n          sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n          if (dataType.onDelete) {\n            sql += ` ON DELETE ${dataType.onDelete.toUpperCase()}`;\n          }\n\n          if (dataType.onUpdate) {\n            sql += ` ON UPDATE ${dataType.onUpdate.toUpperCase()}`;\n          }\n\n        }\n\n        result[fieldName] = sql;\n      } else {\n        result[fieldName] = dataType;\n      }\n    }\n\n    return result;\n  }\n\n  showIndexesQuery(tableName) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND sql LIKE '%${constraintName}%'`;\n    }\n\n    return `${sql};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX IF EXISTS ${this.quoteIdentifier(indexName)}`;\n  }\n\n  describeTableQuery(tableName, schema, schemaDelimiter) {\n    const table = {\n      _schema: schema,\n      _schemaDelimiter: schemaDelimiter,\n      tableName\n    };\n    return `PRAGMA TABLE_INFO(${this.quoteTable(this.addSchema(table))});`;\n  }\n\n  describeCreateTableQuery(tableName) {\n    return `SELECT sql FROM sqlite_master WHERE tbl_name='${tableName}';`;\n  }\n\n  removeColumnQuery(tableName, attributes) {\n\n    attributes = this.attributesToSQL(attributes);\n\n    let backupTableName;\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary table cannot work for foreign keys.\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNames} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  _alterConstraintQuery(tableName, attributes, createTableSql) {\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNames = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    return `${createTableSql\n      .replace(`CREATE TABLE ${quotedTableName}`, `CREATE TABLE ${quotedBackupTableName}`)\n      .replace(`CREATE TABLE ${quotedTableName.replace(/`/g, '\"')}`, `CREATE TABLE ${quotedBackupTableName}`)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNames} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};`\n      + `ALTER TABLE ${quotedBackupTableName} RENAME TO ${quotedTableName};`;\n  }\n\n  renameColumnQuery(tableName, attrNameBefore, attrNameAfter, attributes) {\n\n    let backupTableName;\n\n    attributes = this.attributesToSQL(attributes);\n\n    if (typeof tableName === 'object') {\n      backupTableName = {\n        tableName: `${tableName.tableName}_backup`,\n        schema: tableName.schema\n      };\n    } else {\n      backupTableName = `${tableName}_backup`;\n    }\n\n    const quotedTableName = this.quoteTable(tableName);\n    const quotedBackupTableName = this.quoteTable(backupTableName);\n    const attributeNamesImport = Object.keys(attributes).map(attr =>\n      attrNameAfter === attr ? `${this.quoteIdentifier(attrNameBefore)} AS ${this.quoteIdentifier(attr)}` : this.quoteIdentifier(attr)\n    ).join(', ');\n    const attributeNamesExport = Object.keys(attributes).map(attr => this.quoteIdentifier(attr)).join(', ');\n\n    // Temporary tables don't support foreign keys, so creating a temporary table will not allow foreign keys to be preserved\n    return `${this.createTableQuery(backupTableName, attributes)\n    }INSERT INTO ${quotedBackupTableName} SELECT ${attributeNamesImport} FROM ${quotedTableName};`\n      + `DROP TABLE ${quotedTableName};${\n        this.createTableQuery(tableName, attributes)\n      }INSERT INTO ${quotedTableName} SELECT ${attributeNamesExport} FROM ${quotedBackupTableName};`\n      + `DROP TABLE ${quotedBackupTableName};`;\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVEPOINT ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return `BEGIN ${transaction.options.type} TRANSACTION;`;\n  }\n\n  setIsolationLevelQuery(value) {\n    switch (value) {\n      case Transaction.ISOLATION_LEVELS.REPEATABLE_READ:\n        return '-- SQLite is not able to choose the isolation level REPEATABLE READ.';\n      case Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED:\n        return 'PRAGMA read_uncommitted = ON;';\n      case Transaction.ISOLATION_LEVELS.READ_COMMITTED:\n        return 'PRAGMA read_uncommitted = OFF;';\n      case Transaction.ISOLATION_LEVELS.SERIALIZABLE:\n        return '-- SQLite\\'s default isolation level is SERIALIZABLE. Nothing to do.';\n      default:\n        throw new Error(`Unknown isolation level: ${value}`);\n    }\n  }\n\n  replaceBooleanDefaults(sql) {\n    return sql.replace(/DEFAULT '?false'?/g, 'DEFAULT 0').replace(/DEFAULT '?true'?/g, 'DEFAULT 1');\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return `PRAGMA foreign_key_list(${tableName})`;\n  }\n}\n\nmodule.exports = SQLiteQueryGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}