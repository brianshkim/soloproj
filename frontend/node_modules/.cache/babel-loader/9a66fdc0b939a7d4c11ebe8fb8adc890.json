{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\n\nconst {\n  logger\n} = require('../../utils/logger');\n\nconst debug = logger.debugContext('connection:pg');\n\nconst Promise = require('../../promise');\n\nconst sequelizeErrors = require('../../errors');\n\nconst semver = require('semver');\n\nconst dataTypes = require('../../data-types');\n\nconst moment = require('moment-timezone');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n\n    const pgLib = this._loadDialectModule('pg');\n\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n\n    this._clearDynamicOIDs();\n\n    this._clearTypeParser();\n\n    this.refreshTypeParser(dataTypes.postgres);\n  } // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n\n\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser => {\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\n    };\n\n    const rangeParserBuilder = parser => {\n      return value => dataType.parse(value, {\n        parser\n      });\n    }; // Set range parsers\n\n\n    if (dataType.key.toLowerCase() === 'range') {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (!entry.rangeOid) continue;\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (!entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n\n      return;\n    } // Create parsers for normal or enum data types\n\n\n    const parser = value => dataType.parse(value);\n\n    const arrayParser = arrayParserBuilder(parser); // Set enum parsers\n\n    if (dataType.key.toLowerCase() === 'enum') {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    } // Set parsers for normal data types\n\n\n    dataType.types.postgres.forEach(name => {\n      if (!this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n      if (!this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n\n  _clearTypeParser() {\n    this.oidParserMap = new Map();\n  }\n\n  getTypeParser(oid) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n\n  connect(config) {\n    config.user = config.username;\n\n    const connectionConfig = _.pick(config, ['user', 'password', 'host', 'database', 'port']);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig, _.pick(config.dialectOptions, [// see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n      'application_name', // choose the SSL mode with the PGSSLMODE environment variable\n      // object format: [https://github.com/brianc/node-postgres/blob/master/lib/connection.js#L79]\n      // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n      'ssl', // In addition to the values accepted by the corresponding server,\n      // you can use \"auto\" to determine the right encoding from the\n      // current locale in the client (LC_CTYPE environment variable on Unix systems)\n      'client_encoding', // !! DO NOT SET THIS TO TRUE !!\n      // (unless you know what you're doing)\n      // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n      'binary', // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n      // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n      'keepAlive', // Times out queries after a set time in milliseconds. Added in pg v7.3\n      'statement_timeout']));\n    }\n\n    return new Promise((resolve, reject) => {\n      let responded = false;\n      const connection = new this.lib.Client(connectionConfig);\n\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case 'server_version':\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version) ? version : this.defaultVersion;\n            }\n\n            break;\n\n          case 'standard_conforming_strings':\n            connection['standard_conforming_strings'] = message.parameterValue;\n            break;\n        }\n      };\n\n      const endHandler = () => {\n        debug('connection timeout');\n\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      }; // If we didn't ever hear from the client.connect() callback the connection timeout\n      // node-postgres does not treat this as an error since no active query was ever emitted\n\n\n      connection.once('end', endHandler);\n\n      if (!this.sequelize.config.native) {\n        // Receive various server parameters for further configuration\n        connection.connection.on('parameterStatus', parameterHandler);\n      }\n\n      connection.connect(err => {\n        responded = true;\n\n        if (!this.sequelize.config.native) {\n          // remove parameter handler\n          connection.connection.removeListener('parameterStatus', parameterHandler);\n        }\n\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug('connection acquired');\n          connection.removeListener('end', endHandler);\n          resolve(connection);\n        }\n      });\n    }).tap(connection => {\n      let query = '';\n\n      if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n        // Disable escape characters in strings\n        // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n        // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n        query += 'SET standard_conforming_strings=on;';\n      }\n\n      if (this.sequelize.options.clientMinMessages !== false) {\n        query += `SET client_min_messages TO ${this.sequelize.options.clientMinMessages};`;\n      }\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        const isZone = !!moment.tz.zone(this.sequelize.options.timezone);\n\n        if (isZone) {\n          query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n        } else {\n          query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n        }\n      }\n\n      if (query) {\n        return connection.query(query);\n      }\n    }).tap(connection => {\n      if (Object.keys(this.nameOidMap).length === 0 && this.enumOids.oids.length === 0 && this.enumOids.arrayOids.length === 0) {\n        return this._refreshDynamicOIDs(connection);\n      }\n    }).tap(connection => {\n      // Don't let a Postgres restart (or error) to take down the whole app\n      connection.on('error', error => {\n        connection._invalid = true;\n        debug(`connection error ${error.code || error.message}`);\n        this.pool.destroy(connection);\n      });\n    });\n  }\n\n  disconnect(connection) {\n    if (connection._ending) {\n      debug('connection tried to disconnect but was already at ENDING state');\n      return Promise.resolve();\n    }\n\n    return Promise.fromCallback(callback => connection.end(callback));\n  }\n\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0'; // Check for supported version\n\n    if ((databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return Promise.resolve();\n    } // Refresh dynamic OIDs for some types\n    // These include Geometry / Geography / HStore / Enum / Citext / Range\n\n\n    return (connection || this.sequelize).query('WITH ranges AS (' + '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' + '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' + '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' + ')' + 'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' + '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' + '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' + ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));').then(results => {\n      let result = Array.isArray(results) ? results.pop() : results; // When searchPath is prepended then two statements are executed and the result is\n      // an array of those two statements. First one is the SET search_path and second is\n      // the SELECT query result.\n\n      if (Array.isArray(result)) {\n        if (result[0].command === 'SET') {\n          result = result.pop();\n        }\n      }\n\n      const newNameOidMap = {};\n      const newEnumOids = {\n        oids: [],\n        arrayOids: []\n      };\n\n      for (const row of result.rows) {\n        // Mapping enums, handled separatedly\n        if (row.typtype === 'e') {\n          newEnumOids.oids.push(row.oid);\n          if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n          continue;\n        } // Mapping base types and their arrays\n\n\n        newNameOidMap[row.typname] = {\n          oid: row.oid\n        };\n        if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray; // Mapping ranges(of base types) and their arrays\n\n        if (row.rngtypid) {\n          newNameOidMap[row.typname].rangeOid = row.rngtypid;\n          if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n        }\n      } // Replace all OID mappings. Avoids temporary empty OID mappings.\n\n\n      this.nameOidMap = newNameOidMap;\n      this.enumOids = newEnumOids;\n      this.refreshTypeParser(dataTypes.postgres);\n    });\n  }\n\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = {\n      oids: [],\n      arrayOids: []\n    };\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"names":["_","require","AbstractConnectionManager","logger","debug","debugContext","Promise","sequelizeErrors","semver","dataTypes","moment","ConnectionManager","constructor","dialect","sequelize","config","port","pgLib","_loadDialectModule","lib","native","_clearDynamicOIDs","_clearTypeParser","refreshTypeParser","postgres","_refreshTypeParser","dataType","arrayParserBuilder","parser","value","types","arrayParser","create","parse","rangeParserBuilder","key","toLowerCase","name","nameOidMap","entry","rangeOid","rangeParser","getTypeParser","oid","arrayRangeParser","oidParserMap","set","arrayRangeOid","enumOids","oids","forEach","arrayOids","arrayOid","Map","get","args","connect","user","username","connectionConfig","pick","prototype","bind","dialectOptions","merge","resolve","reject","responded","connection","Client","parameterHandler","message","parameterName","options","databaseVersion","version","coerce","parameterValue","valid","defaultVersion","endHandler","ConnectionTimedOutError","Error","once","on","err","removeListener","code","ConnectionRefusedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","tap","query","standardConformingStrings","clientMinMessages","keepDefaultTimezone","isZone","tz","zone","timezone","Object","keys","length","_refreshDynamicOIDs","error","_invalid","pool","destroy","disconnect","_ending","fromCallback","callback","end","validate","supportedVersion","gte","then","results","result","Array","isArray","pop","command","newNameOidMap","newEnumOids","row","rows","typtype","push","typarray","typname","rngtypid","rngtyparray","module","exports","default"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/postgres/connection-manager.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst { logger } = require('../../utils/logger');\nconst debug = logger.debugContext('connection:pg');\nconst Promise = require('../../promise');\nconst sequelizeErrors = require('../../errors');\nconst semver = require('semver');\nconst dataTypes = require('../../data-types');\nconst moment = require('moment-timezone');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 5432;\n    super(dialect, sequelize);\n\n    const pgLib = this._loadDialectModule('pg');\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\n\n    this._clearDynamicOIDs();\n    this._clearTypeParser();\n    this.refreshTypeParser(dataTypes.postgres);\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    const arrayParserBuilder = parser => {\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\n    };\n    const rangeParserBuilder = parser => {\n      return value => dataType.parse(value, { parser });\n    };\n\n    // Set range parsers\n    if (dataType.key.toLowerCase() === 'range') {\n      for (const name in this.nameOidMap) {\n        const entry = this.nameOidMap[name];\n        if (! entry.rangeOid) continue;\n\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\n\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\n        if (! entry.arrayRangeOid) continue;\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\n      }\n      return;\n    }\n\n    // Create parsers for normal or enum data types\n    const parser = value => dataType.parse(value);\n    const arrayParser = arrayParserBuilder(parser);\n\n    // Set enum parsers\n    if (dataType.key.toLowerCase() === 'enum') {\n      this.enumOids.oids.forEach(oid => {\n        this.oidParserMap.set(oid, parser);\n      });\n      this.enumOids.arrayOids.forEach(arrayOid => {\n        this.oidParserMap.set(arrayOid, arrayParser);\n      });\n      return;\n    }\n\n    // Set parsers for normal data types\n    dataType.types.postgres.forEach(name => {\n      if (! this.nameOidMap[name]) return;\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\n\n      if (! this.nameOidMap[name].arrayOid) return;\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\n    });\n  }\n\n  _clearTypeParser() {\n    this.oidParserMap = new Map();\n  }\n\n  getTypeParser(oid, ...args) {\n    if (this.oidParserMap.get(oid)) return this.oidParserMap.get(oid);\n\n    return this.lib.types.getTypeParser(oid, ...args);\n  }\n\n  connect(config) {\n    config.user = config.username;\n    const connectionConfig = _.pick(config, [\n      'user', 'password', 'host', 'database', 'port'\n    ]);\n\n    connectionConfig.types = {\n      getTypeParser: ConnectionManager.prototype.getTypeParser.bind(this)\n    };\n\n    if (config.dialectOptions) {\n      _.merge(connectionConfig,\n        _.pick(config.dialectOptions, [\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\n          'application_name',\n          // choose the SSL mode with the PGSSLMODE environment variable\n          // object format: [https://github.com/brianc/node-postgres/blob/master/lib/connection.js#L79]\n          // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\n          'ssl',\n          // In addition to the values accepted by the corresponding server,\n          // you can use \"auto\" to determine the right encoding from the\n          // current locale in the client (LC_CTYPE environment variable on Unix systems)\n          'client_encoding',\n          // !! DO NOT SET THIS TO TRUE !!\n          // (unless you know what you're doing)\n          // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\n          'binary',\n          // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\n          // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\n          'keepAlive',\n          // Times out queries after a set time in milliseconds. Added in pg v7.3\n          'statement_timeout'\n        ]));\n    }\n\n    return new Promise((resolve, reject) => {\n      let responded = false;\n\n      const connection = new this.lib.Client(connectionConfig);\n\n      const parameterHandler = message => {\n        switch (message.parameterName) {\n          case 'server_version':\n            if (this.sequelize.options.databaseVersion === 0) {\n              const version = semver.coerce(message.parameterValue).version;\n              this.sequelize.options.databaseVersion = semver.valid(version)\n                ? version\n                : this.defaultVersion;\n            }\n            break;\n          case 'standard_conforming_strings':\n            connection['standard_conforming_strings'] = message.parameterValue;\n            break;\n        }\n      };\n\n      const endHandler = () => {\n        debug('connection timeout');\n        if (!responded) {\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\n        }\n      };\n\n      // If we didn't ever hear from the client.connect() callback the connection timeout\n      // node-postgres does not treat this as an error since no active query was ever emitted\n      connection.once('end', endHandler);\n\n      if (!this.sequelize.config.native) {\n        // Receive various server parameters for further configuration\n        connection.connection.on('parameterStatus', parameterHandler);\n      }\n\n      connection.connect(err => {\n        responded = true;\n\n        if (!this.sequelize.config.native) {\n          // remove parameter handler\n          connection.connection.removeListener('parameterStatus', parameterHandler);\n        }\n\n        if (err) {\n          if (err.code) {\n            switch (err.code) {\n              case 'ECONNREFUSED':\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\n                break;\n              case 'ENOTFOUND':\n                reject(new sequelizeErrors.HostNotFoundError(err));\n                break;\n              case 'EHOSTUNREACH':\n                reject(new sequelizeErrors.HostNotReachableError(err));\n                break;\n              case 'EINVAL':\n                reject(new sequelizeErrors.InvalidConnectionError(err));\n                break;\n              default:\n                reject(new sequelizeErrors.ConnectionError(err));\n                break;\n            }\n          } else {\n            reject(new sequelizeErrors.ConnectionError(err));\n          }\n        } else {\n          debug('connection acquired');\n          connection.removeListener('end', endHandler);\n          resolve(connection);\n        }\n      });\n    }).tap(connection => {\n      let query = '';\n\n      if (this.sequelize.options.standardConformingStrings !== false && connection['standard_conforming_strings'] !== 'on') {\n        // Disable escape characters in strings\n        // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\n        // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\n        query += 'SET standard_conforming_strings=on;';\n      }\n\n      if (this.sequelize.options.clientMinMessages !== false) {\n        query += `SET client_min_messages TO ${this.sequelize.options.clientMinMessages};`;\n      }\n\n      if (!this.sequelize.config.keepDefaultTimezone) {\n        const isZone = !!moment.tz.zone(this.sequelize.options.timezone);\n        if (isZone) {\n          query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\n        } else {\n          query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\n        }\n      }\n\n      if (query) {\n        return connection.query(query);\n      }\n    }).tap(connection => {\n      if (Object.keys(this.nameOidMap).length === 0 &&\n        this.enumOids.oids.length === 0 &&\n        this.enumOids.arrayOids.length === 0) {\n        return this._refreshDynamicOIDs(connection);\n      }\n    }).tap(connection => {\n      // Don't let a Postgres restart (or error) to take down the whole app\n      connection.on('error', error => {\n        connection._invalid = true;\n        debug(`connection error ${error.code || error.message}`);\n        this.pool.destroy(connection);\n      });\n    });\n  }\n\n  disconnect(connection) {\n    if (connection._ending) {\n      debug('connection tried to disconnect but was already at ENDING state');\n      return Promise.resolve();\n    }\n\n    return Promise.fromCallback(callback => connection.end(callback));\n  }\n\n  validate(connection) {\n    return !connection._invalid && !connection._ending;\n  }\n\n  _refreshDynamicOIDs(connection) {\n    const databaseVersion = this.sequelize.options.databaseVersion;\n    const supportedVersion = '8.3.0';\n\n    // Check for supported version\n    if ( (databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\n      return Promise.resolve();\n    }\n\n    // Refresh dynamic OIDs for some types\n    // These include Geometry / Geography / HStore / Enum / Citext / Range\n    return (connection || this.sequelize).query(\n      'WITH ranges AS (' +\n      '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,' +\n      '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype' +\n      '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid' +\n      ')' +\n      'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,' +\n      '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray' +\n      '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype' +\n      ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));'\n    ).then(results => {\n      let result = Array.isArray(results) ? results.pop() : results;\n\n      // When searchPath is prepended then two statements are executed and the result is\n      // an array of those two statements. First one is the SET search_path and second is\n      // the SELECT query result.\n      if (Array.isArray(result)) {\n        if (result[0].command === 'SET') {\n          result = result.pop();\n        }\n      }\n\n      const newNameOidMap = {};\n      const newEnumOids = { oids: [], arrayOids: [] };\n\n      for (const row of result.rows) {\n        // Mapping enums, handled separatedly\n        if (row.typtype === 'e') {\n          newEnumOids.oids.push(row.oid);\n          if (row.typarray) newEnumOids.arrayOids.push(row.typarray);\n          continue;\n        }\n\n        // Mapping base types and their arrays\n        newNameOidMap[row.typname] = { oid: row.oid };\n        if (row.typarray) newNameOidMap[row.typname].arrayOid = row.typarray;\n\n        // Mapping ranges(of base types) and their arrays\n        if (row.rngtypid) {\n          newNameOidMap[row.typname].rangeOid = row.rngtypid;\n          if (row.rngtyparray) newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\n        }\n      }\n\n      // Replace all OID mappings. Avoids temporary empty OID mappings.\n      this.nameOidMap = newNameOidMap;\n      this.enumOids = newEnumOids;\n\n      this.refreshTypeParser(dataTypes.postgres);\n    });\n  }\n\n  _clearDynamicOIDs() {\n    this.nameOidMap = {};\n    this.enumOids = { oids: [], arrayOids: [] };\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}