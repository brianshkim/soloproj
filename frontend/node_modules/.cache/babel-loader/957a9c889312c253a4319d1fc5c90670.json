{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst AbstractDialect = require('../abstract');\n\nconst ConnectionManager = require('./connection-manager');\n\nconst Query = require('./query');\n\nconst QueryGenerator = require('./query-generator');\n\nconst DataTypes = require('../../data-types').mysql;\n\nclass MysqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.QueryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n  }\n\n}\n\nMysqlDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  lock: true,\n  forShare: 'LOCK IN SHARE MODE',\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: ' IGNORE',\n    updateOnDuplicate: ' ON DUPLICATE KEY UPDATE'\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  GEOMETRY: true,\n  JSON: true,\n  REGEXP: true\n});\nConnectionManager.prototype.defaultVersion = '5.6.0';\nMysqlDialect.prototype.Query = Query;\nMysqlDialect.prototype.QueryGenerator = QueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = 'mysql';\nMysqlDialect.prototype.TICK_CHAR = '`';\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\nmodule.exports = MysqlDialect;","map":{"version":3,"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","mysql","MysqlDialect","constructor","sequelize","connectionManager","_dialect","prototype","supports","merge","cloneDeep","lock","forShare","settingIsolationLevelDuringTransaction","inserts","ignoreDuplicates","updateOnDuplicate","index","collate","length","parser","type","using","constraints","dropConstraint","check","indexViaAlter","indexHints","NUMERIC","GEOMETRY","JSON","REGEXP","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/mysql/index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').mysql;\n\nclass MysqlDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.QueryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n  }\n}\n\nMysqlDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'VALUES ()': true,\n  'LIMIT ON UPDATE': true,\n  lock: true,\n  forShare: 'LOCK IN SHARE MODE',\n  settingIsolationLevelDuringTransaction: false,\n  inserts: {\n    ignoreDuplicates: ' IGNORE',\n    updateOnDuplicate: ' ON DUPLICATE KEY UPDATE'\n  },\n  index: {\n    collate: false,\n    length: true,\n    parser: true,\n    type: true,\n    using: 1\n  },\n  constraints: {\n    dropConstraint: false,\n    check: false\n  },\n  indexViaAlter: true,\n  indexHints: true,\n  NUMERIC: true,\n  GEOMETRY: true,\n  JSON: true,\n  REGEXP: true\n});\n\nConnectionManager.prototype.defaultVersion = '5.6.0';\nMysqlDialect.prototype.Query = Query;\nMysqlDialect.prototype.QueryGenerator = QueryGenerator;\nMysqlDialect.prototype.DataTypes = DataTypes;\nMysqlDialect.prototype.name = 'mysql';\nMysqlDialect.prototype.TICK_CHAR = '`';\nMysqlDialect.prototype.TICK_CHAR_LEFT = MysqlDialect.prototype.TICK_CHAR;\nMysqlDialect.prototype.TICK_CHAR_RIGHT = MysqlDialect.prototype.TICK_CHAR;\n\nmodule.exports = MysqlDialect;\n"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,aAAD,CAA/B;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,sBAAD,CAAjC;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMI,cAAc,GAAGJ,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,kBAAD,CAAP,CAA4BM,KAA9C;;AAEA,MAAMC,YAAN,SAA2BN,eAA3B,CAA2C;EACzCO,WAAW,CAACC,SAAD,EAAY;IACrB;IACA,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,iBAAL,GAAyB,IAAIR,iBAAJ,CAAsB,IAAtB,EAA4BO,SAA5B,CAAzB;IACA,KAAKL,cAAL,GAAsB,IAAIA,cAAJ,CAAmB;MACvCO,QAAQ,EAAE,IAD6B;MAEvCF;IAFuC,CAAnB,CAAtB;EAID;;AATwC;;AAY3CF,YAAY,CAACK,SAAb,CAAuBC,QAAvB,GAAkCd,CAAC,CAACe,KAAF,CAAQf,CAAC,CAACgB,SAAF,CAAYd,eAAe,CAACW,SAAhB,CAA0BC,QAAtC,CAAR,EAAyD;EACzF,aAAa,IAD4E;EAEzF,mBAAmB,IAFsE;EAGzFG,IAAI,EAAE,IAHmF;EAIzFC,QAAQ,EAAE,oBAJ+E;EAKzFC,sCAAsC,EAAE,KALiD;EAMzFC,OAAO,EAAE;IACPC,gBAAgB,EAAE,SADX;IAEPC,iBAAiB,EAAE;EAFZ,CANgF;EAUzFC,KAAK,EAAE;IACLC,OAAO,EAAE,KADJ;IAELC,MAAM,EAAE,IAFH;IAGLC,MAAM,EAAE,IAHH;IAILC,IAAI,EAAE,IAJD;IAKLC,KAAK,EAAE;EALF,CAVkF;EAiBzFC,WAAW,EAAE;IACXC,cAAc,EAAE,KADL;IAEXC,KAAK,EAAE;EAFI,CAjB4E;EAqBzFC,aAAa,EAAE,IArB0E;EAsBzFC,UAAU,EAAE,IAtB6E;EAuBzFC,OAAO,EAAE,IAvBgF;EAwBzFC,QAAQ,EAAE,IAxB+E;EAyBzFC,IAAI,EAAE,IAzBmF;EA0BzFC,MAAM,EAAE;AA1BiF,CAAzD,CAAlC;AA6BAlC,iBAAiB,CAACU,SAAlB,CAA4ByB,cAA5B,GAA6C,OAA7C;AACA9B,YAAY,CAACK,SAAb,CAAuBT,KAAvB,GAA+BA,KAA/B;AACAI,YAAY,CAACK,SAAb,CAAuBR,cAAvB,GAAwCA,cAAxC;AACAG,YAAY,CAACK,SAAb,CAAuBP,SAAvB,GAAmCA,SAAnC;AACAE,YAAY,CAACK,SAAb,CAAuB0B,IAAvB,GAA8B,OAA9B;AACA/B,YAAY,CAACK,SAAb,CAAuB2B,SAAvB,GAAmC,GAAnC;AACAhC,YAAY,CAACK,SAAb,CAAuB4B,cAAvB,GAAwCjC,YAAY,CAACK,SAAb,CAAuB2B,SAA/D;AACAhC,YAAY,CAACK,SAAb,CAAuB6B,eAAvB,GAAyClC,YAAY,CAACK,SAAb,CAAuB2B,SAAhE;AAEAG,MAAM,CAACC,OAAP,GAAiBpC,YAAjB"},"metadata":{},"sourceType":"script"}