{"ast":null,"code":"'use strict';\n/**\n Returns an object that treats MySQL's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\nconst Promise = require('../../promise');\n\nconst sequelizeErrors = require('../../errors');\n/**\n A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n\n @param  {QueryInterface} qi\n @param  {string} tableName     The name of the table.\n @param  {string} columnName    The name of the attribute that we want to remove.\n @param  {Object} options\n\n @private\n */\n\n\nfunction removeColumn(qi, tableName, columnName, options) {\n  options = options || {};\n  return qi.sequelize.query(qi.QueryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n    tableName,\n    schema: qi.sequelize.config.database\n  }, columnName), Object.assign({\n    raw: true\n  }, options)).then(_ref => {\n    let [results] = _ref;\n\n    //Exclude primary key constraint\n    if (!results.length || results[0].constraint_name === 'PRIMARY') {\n      // No foreign key constraints found, so we can remove the column\n      return;\n    }\n\n    return Promise.map(results, constraint => qi.sequelize.query(qi.QueryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), Object.assign({\n      raw: true\n    }, options)));\n  }).then(() => qi.sequelize.query(qi.QueryGenerator.removeColumnQuery(tableName, columnName), Object.assign({\n    raw: true\n  }, options)));\n}\n/**\n * @param {QueryInterface} qi\n * @param {string} tableName\n * @param {string} constraintName\n * @param {Object} options\n *\n * @private\n */\n\n\nfunction removeConstraint(qi, tableName, constraintName, options) {\n  const sql = qi.QueryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n    tableName,\n    schema: qi.sequelize.config.database\n  }, constraintName);\n  return qi.sequelize.query(sql, Object.assign({}, options, {\n    type: qi.sequelize.QueryTypes.SHOWCONSTRAINTS\n  })).then(constraints => {\n    const constraint = constraints[0];\n    let query;\n\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = qi.QueryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = qi.QueryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return qi.sequelize.query(query, options);\n  });\n}\n\nexports.removeConstraint = removeConstraint;\nexports.removeColumn = removeColumn;","map":{"version":3,"names":["Promise","require","sequelizeErrors","removeColumn","qi","tableName","columnName","options","sequelize","query","QueryGenerator","getForeignKeyQuery","schema","config","database","Object","assign","raw","then","results","length","constraint_name","map","constraint","dropForeignKeyQuery","removeColumnQuery","removeConstraint","constraintName","sql","showConstraintsQuery","type","QueryTypes","SHOWCONSTRAINTS","constraints","constraintType","UnknownConstraintError","message","table","removeIndexQuery","exports"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/mysql/query-interface.js"],"sourcesContent":["'use strict';\n\n/**\n Returns an object that treats MySQL's inabilities to do certain queries.\n\n @class QueryInterface\n @static\n @private\n */\n\nconst Promise = require('../../promise');\nconst sequelizeErrors = require('../../errors');\n\n/**\n A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n\n @param  {QueryInterface} qi\n @param  {string} tableName     The name of the table.\n @param  {string} columnName    The name of the attribute that we want to remove.\n @param  {Object} options\n\n @private\n */\nfunction removeColumn(qi, tableName, columnName, options) {\n  options = options || {};\n\n  return qi.sequelize.query(\n    qi.QueryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: qi.sequelize.config.database\n    }, columnName),\n    Object.assign({ raw: true }, options)\n  )\n    .then(([results]) => {\n      //Exclude primary key constraint\n      if (!results.length || results[0].constraint_name === 'PRIMARY') {\n        // No foreign key constraints found, so we can remove the column\n        return;\n      }\n      return Promise.map(results, constraint => qi.sequelize.query(\n        qi.QueryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\n        Object.assign({ raw: true }, options)\n      ));\n    })\n    .then(() => qi.sequelize.query(\n      qi.QueryGenerator.removeColumnQuery(tableName, columnName),\n      Object.assign({ raw: true }, options)\n    ));\n}\n\n/**\n * @param {QueryInterface} qi\n * @param {string} tableName\n * @param {string} constraintName\n * @param {Object} options\n *\n * @private\n */\nfunction removeConstraint(qi, tableName, constraintName, options) {\n  const sql = qi.QueryGenerator.showConstraintsQuery(\n    tableName.tableName ? tableName : {\n      tableName,\n      schema: qi.sequelize.config.database\n    }, constraintName);\n\n  return qi.sequelize.query(sql, Object.assign({}, options,\n    { type: qi.sequelize.QueryTypes.SHOWCONSTRAINTS }))\n    .then(constraints => {\n      const constraint = constraints[0];\n      let query;\n      if (!constraint || !constraint.constraintType) {\n        throw new sequelizeErrors.UnknownConstraintError(\n          {\n            message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n            constraint: constraintName,\n            table: tableName\n          });\n      }\n\n      if (constraint.constraintType === 'FOREIGN KEY') {\n        query = qi.QueryGenerator.dropForeignKeyQuery(tableName, constraintName);\n      } else {\n        query = qi.QueryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n      }\n\n      return qi.sequelize.query(query, options);\n    });\n}\n\nexports.removeConstraint = removeConstraint;\nexports.removeColumn = removeColumn;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}