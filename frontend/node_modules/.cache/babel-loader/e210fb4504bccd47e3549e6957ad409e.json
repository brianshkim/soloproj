{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('./utils');\n\nconst DataTypes = require('./data-types');\n\nconst SQLiteQueryInterface = require('./dialects/sqlite/query-interface');\n\nconst MSSQLQueryInterface = require('./dialects/mssql/query-interface');\n\nconst MySQLQueryInterface = require('./dialects/mysql/query-interface');\n\nconst PostgresQueryInterface = require('./dialects/postgres/query-interface');\n\nconst Transaction = require('./transaction');\n\nconst Promise = require('./promise');\n\nconst QueryTypes = require('./query-types');\n\nconst Op = require('./operators');\n/**\n * The interface that Sequelize uses to talk to all databases\n *\n * @class QueryInterface\n */\n\n\nclass QueryInterface {\n  constructor(sequelize) {\n    this.sequelize = sequelize;\n    this.QueryGenerator = this.sequelize.dialect.QueryGenerator;\n  }\n  /**\n   * Create a database\n   *\n   * @param {string} database  Database name to create\n   * @param {Object} [options] Query options\n   * @param {string} [options.charset] Database default character set, MYSQL only\n   * @param {string} [options.collate] Database default collation\n   * @param {string} [options.encoding] Database default character set, PostgreSQL only\n   * @param {string} [options.ctype] Database character classification, PostgreSQL only\n   * @param {string} [options.template] The name of the template from which to create the new database, PostgreSQL only\n   *\n   * @returns {Promise}\n   */\n\n\n  createDatabase(database, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.createDatabaseQuery(database, options);\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Drop a database\n   *\n   * @param {string} database  Database name to drop\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  dropDatabase(database, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.dropDatabaseQuery(database);\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Create a schema\n   *\n   * @param {string} schema    Schema name to create\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  createSchema(schema, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.createSchema(schema);\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Drop a schema\n   *\n   * @param {string} schema    Schema name to drop\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.dropSchema(schema);\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Drop all schemas\n   *\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.QueryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    }\n\n    return this.showAllSchemas(options).map(schemaName => this.dropSchema(schemaName, options));\n  }\n  /**\n   * Show all schemas\n   *\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise<Array>}\n   */\n\n\n  showAllSchemas(options) {\n    options = Object.assign({}, options, {\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    });\n    const showSchemasSql = this.QueryGenerator.showSchemasQuery(options);\n    return this.sequelize.query(showSchemasSql, options).then(schemaNames => _.flatten(schemaNames.map(value => value.schema_name ? value.schema_name : value)));\n  }\n  /**\n   * Return database version\n   *\n   * @param {Object}    [options]      Query options\n   * @param {QueryType} [options.type] Query type\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\n  databaseVersion(options) {\n    return this.sequelize.query(this.QueryGenerator.versionQuery(), Object.assign({}, options, {\n      type: QueryTypes.VERSION\n    }));\n  }\n  /**\n   * Create a table with given set of attributes\n   *\n   * ```js\n   * queryInterface.createTable(\n   *   'nameOfTheNewTable',\n   *   {\n   *     id: {\n   *       type: Sequelize.INTEGER,\n   *       primaryKey: true,\n   *       autoIncrement: true\n   *     },\n   *     createdAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     updatedAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     attr1: Sequelize.STRING,\n   *     attr2: Sequelize.INTEGER,\n   *     attr3: {\n   *       type: Sequelize.BOOLEAN,\n   *       defaultValue: false,\n   *       allowNull: false\n   *     },\n   *     //foreign key usage\n   *     attr4: {\n   *       type: Sequelize.INTEGER,\n   *       references: {\n   *         model: 'another_table_name',\n   *         key: 'id'\n   *       },\n   *       onUpdate: 'cascade',\n   *       onDelete: 'cascade'\n   *     }\n   *   },\n   *   {\n   *     engine: 'MYISAM',    // default: 'InnoDB'\n   *     charset: 'latin1',   // default: null\n   *     schema: 'public',    // default: public, PostgreSQL only.\n   *     comment: 'my table', // comment for table\n   *     collate: 'latin1_danish_ci' // collation, MYSQL only\n   *   }\n   * )\n   * ```\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {Object} attributes Object representing a list of table attributes to create\n   * @param {Object} [options] create table and query options\n   * @param {Model}  [model] model class\n   *\n   * @returns {Promise}\n   */\n\n\n  createTable(tableName, attributes, options, model) {\n    let sql = '';\n    let promise;\n    options = _.clone(options) || {};\n\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === undefined) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n\n    attributes = _.mapValues(attributes, attribute => this.sequelize.normalizeAttribute(attribute)); // Postgres requires special SQL commands for ENUM/ENUM[]\n\n    if (this.sequelize.options.dialect === 'postgres') {\n      promise = PostgresQueryInterface.ensureEnums(this, tableName, attributes, options, model);\n    } else {\n      promise = Promise.resolve();\n    }\n\n    if (!tableName.schema && (options.schema || !!model && model._schema)) {\n      tableName = this.QueryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n\n    attributes = this.QueryGenerator.attributesToSQL(attributes, {\n      table: tableName,\n      context: 'createTable'\n    });\n    sql = this.QueryGenerator.createTableQuery(tableName, attributes, options);\n    return promise.then(() => this.sequelize.query(sql, options));\n  }\n  /**\n   * Drop a table from database\n   *\n   * @param {string} tableName Table name to drop\n   * @param {Object} options   Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  dropTable(tableName, options) {\n    // if we're forcing we should be cascading unless explicitly stated otherwise\n    options = _.clone(options) || {};\n    options.cascade = options.cascade || options.force || false;\n    let sql = this.QueryGenerator.dropTableQuery(tableName, options);\n    return this.sequelize.query(sql, options).then(() => {\n      const promises = []; // Since postgres has a special case for enums, we should drop the related\n      // enum type within the table and attribute\n\n      if (this.sequelize.options.dialect === 'postgres') {\n        const instanceTable = this.sequelize.modelManager.getModel(tableName, {\n          attribute: 'tableName'\n        });\n\n        if (instanceTable) {\n          const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\n          const keys = Object.keys(instanceTable.rawAttributes);\n          const keyLen = keys.length;\n\n          for (let i = 0; i < keyLen; i++) {\n            if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n              sql = this.QueryGenerator.pgEnumDrop(getTableName, keys[i]);\n              options.supportsSearchPath = false;\n              promises.push(this.sequelize.query(sql, Object.assign({}, options, {\n                raw: true\n              })));\n            }\n          }\n        }\n      }\n\n      return Promise.all(promises).get(0);\n    });\n  }\n  /**\n   * Drop all tables from database\n   *\n   * @param {Object} [options] query options\n   * @param {Array}  [options.skip] List of table to skip\n   *\n   * @returns {Promise}\n   */\n\n\n  dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const dropAllTables = tableNames => Promise.each(tableNames, tableName => {\n      // if tableName is not in the Array of tables names then don't drop it\n      if (!skip.includes(tableName.tableName || tableName)) {\n        return this.dropTable(tableName, Object.assign({}, options, {\n          cascade: true\n        }));\n      }\n    });\n\n    return this.showAllTables(options).then(tableNames => {\n      if (this.sequelize.options.dialect === 'sqlite') {\n        return this.sequelize.query('PRAGMA foreign_keys;', options).then(result => {\n          const foreignKeysAreEnabled = result.foreign_keys === 1;\n\n          if (foreignKeysAreEnabled) {\n            return this.sequelize.query('PRAGMA foreign_keys = OFF', options).then(() => dropAllTables(tableNames)).then(() => this.sequelize.query('PRAGMA foreign_keys = ON', options));\n          }\n\n          return dropAllTables(tableNames);\n        });\n      }\n\n      return this.getForeignKeysForTables(tableNames, options).then(foreignKeys => {\n        const queries = [];\n        tableNames.forEach(tableName => {\n          let normalizedTableName = tableName;\n\n          if (_.isObject(tableName)) {\n            normalizedTableName = `${tableName.schema}.${tableName.tableName}`;\n          }\n\n          foreignKeys[normalizedTableName].forEach(foreignKey => {\n            queries.push(this.QueryGenerator.dropForeignKeyQuery(tableName, foreignKey));\n          });\n        });\n        return Promise.each(queries, q => this.sequelize.query(q, options)).then(() => dropAllTables(tableNames));\n      });\n    });\n  }\n  /**\n   * Drop specified enum from database (Postgres only)\n   *\n   * @param {string} [enumName]  Enum name to drop\n   * @param {Object} options Query options\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\n  dropEnum(enumName, options) {\n    if (this.sequelize.getDialect() !== 'postgres') {\n      return Promise.resolve();\n    }\n\n    options = options || {};\n    return this.sequelize.query(this.QueryGenerator.pgEnumDrop(null, null, this.QueryGenerator.pgEscapeAndQuote(enumName)), Object.assign({}, options, {\n      raw: true\n    }));\n  }\n  /**\n   * Drop all enums from database (Postgres only)\n   *\n   * @param {Object} options Query options\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\n  dropAllEnums(options) {\n    if (this.sequelize.getDialect() !== 'postgres') {\n      return Promise.resolve();\n    }\n\n    options = options || {};\n    return this.pgListEnums(null, options).map(result => this.sequelize.query(this.QueryGenerator.pgEnumDrop(null, null, this.QueryGenerator.pgEscapeAndQuote(result.enum_name)), Object.assign({}, options, {\n      raw: true\n    })));\n  }\n  /**\n   * List all enums (Postgres only)\n   *\n   * @param {string} [tableName]  Table whose enum to list\n   * @param {Object} [options]    Query options\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\n  pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, Object.assign({}, options, {\n      plain: false,\n      raw: true,\n      type: QueryTypes.SELECT\n    }));\n  }\n  /**\n   * Rename a table\n   *\n   * @param {string} before    Current name of table\n   * @param {string} after     New name from table\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.renameTableQuery(before, after);\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Get all tables in current database\n   *\n   * @param {Object}    [options] Query options\n   * @param {boolean}   [options.raw=true] Run query in raw mode\n   * @param {QueryType} [options.type=QueryType.SHOWTABLE] query type\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n\n\n  showAllTables(options) {\n    options = Object.assign({}, options, {\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    });\n    const showTablesSql = this.QueryGenerator.showTablesQuery(this.sequelize.config.database);\n    return this.sequelize.query(showTablesSql, options).then(tableNames => _.flatten(tableNames));\n  }\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   *\n   * @param {string} tableName table name\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise<Object>}\n   */\n\n\n  describeTable(tableName, options) {\n    if (this.sequelize.options.dialect === 'sqlite') {\n      // sqlite needs some special treatment as it cannot rename a column\n      return SQLiteQueryInterface.describeTable(this, tableName, options);\n    }\n\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.QueryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = Object.assign({}, options, {\n      type: QueryTypes.DESCRIBE\n    });\n    return this.sequelize.query(sql, options).then(data => {\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      return data;\n    }).catch(e => {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    });\n  }\n  /**\n   * Add a new column to a table\n   *\n   * ```js\n   * queryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {\n   *    after: 'columnB' // after option is only supported by MySQL\n   * });\n   * ```\n   *\n   * @param {string} table     Table to add column to\n   * @param {string} key       Column name\n   * @param {Object} attribute Attribute definition\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error('addColumn takes at least 3 arguments (table, attribute name, attribute definition)');\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return this.sequelize.query(this.QueryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n  /**\n   * Remove a column from a table\n   *\n   * @param {string} tableName      Table to remove column from\n   * @param {string} attributeName  Column name to remove\n   * @param {Object} [options]      Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  removeColumn(tableName, attributeName, options) {\n    options = options || {};\n\n    switch (this.sequelize.options.dialect) {\n      case 'sqlite':\n        // sqlite needs some special treatment as it cannot drop a column\n        return SQLiteQueryInterface.removeColumn(this, tableName, attributeName, options);\n\n      case 'mssql':\n        // mssql needs special treatment as it cannot drop a column with a default or foreign key constraint\n        return MSSQLQueryInterface.removeColumn(this, tableName, attributeName, options);\n\n      case 'mysql':\n      case 'mariadb':\n        // mysql/mariadb need special treatment as it cannot drop a column with a foreign key constraint\n        return MySQLQueryInterface.removeColumn(this, tableName, attributeName, options);\n\n      default:\n        return this.sequelize.query(this.QueryGenerator.removeColumnQuery(tableName, attributeName), options);\n    }\n  }\n  /**\n   * Change a column definition\n   *\n   * @param {string} tableName          Table name to change from\n   * @param {string} attributeName      Column name\n   * @param {Object} dataTypeOrOptions  Attribute definition for new column\n   * @param {Object} [options]          Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    const attributes = {};\n    options = options || {};\n\n    if (_.values(DataTypes).includes(dataTypeOrOptions)) {\n      attributes[attributeName] = {\n        type: dataTypeOrOptions,\n        allowNull: true\n      };\n    } else {\n      attributes[attributeName] = dataTypeOrOptions;\n    }\n\n    attributes[attributeName] = this.sequelize.normalizeAttribute(attributes[attributeName]);\n\n    if (this.sequelize.options.dialect === 'sqlite') {\n      // sqlite needs some special treatment as it cannot change a column\n      return SQLiteQueryInterface.changeColumn(this, tableName, attributes, options);\n    }\n\n    const query = this.QueryGenerator.attributesToSQL(attributes, {\n      context: 'changeColumn',\n      table: tableName\n    });\n    const sql = this.QueryGenerator.changeColumnQuery(tableName, query);\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Rename a column\n   *\n   * @param {string} tableName        Table name whose column to rename\n   * @param {string} attrNameBefore   Current column name\n   * @param {string} attrNameAfter    New column name\n   * @param {Object} [options]        Query option\n   *\n   * @returns {Promise}\n   */\n\n\n  renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    return this.describeTable(tableName, options).then(data => {\n      if (!data[attrNameBefore]) {\n        throw new Error(`Table ${tableName} doesn't have the column ${attrNameBefore}`);\n      }\n\n      data = data[attrNameBefore] || {};\n      const _options = {};\n      _options[attrNameAfter] = {\n        attribute: attrNameAfter,\n        type: data.type,\n        allowNull: data.allowNull,\n        defaultValue: data.defaultValue\n      }; // fix: a not-null column cannot have null as default value\n\n      if (data.defaultValue === null && !data.allowNull) {\n        delete _options[attrNameAfter].defaultValue;\n      }\n\n      if (this.sequelize.options.dialect === 'sqlite') {\n        // sqlite needs some special treatment as it cannot rename a column\n        return SQLiteQueryInterface.renameColumn(this, tableName, attrNameBefore, attrNameAfter, options);\n      }\n\n      const sql = this.QueryGenerator.renameColumnQuery(tableName, attrNameBefore, this.QueryGenerator.attributesToSQL(_options));\n      return this.sequelize.query(sql, options);\n    });\n  }\n  /**\n   * Add an index to a column\n   *\n   * @param {string|Object}  tableName Table name to add index on, can be a object with schema\n   * @param {Array}   [attributes]     Use options.fields instead, List of attributes to add index on\n   * @param {Object}  options          indexes options\n   * @param {Array}   options.fields   List of attributes to add index on\n   * @param {boolean} [options.concurrently] Pass CONCURRENT so other operations run while the index is created\n   * @param {boolean} [options.unique] Create a unique index\n   * @param {string}  [options.using]  Useful for GIN indexes\n   * @param {string}  [options.operator] Index operator\n   * @param {string}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\n   * @param {string}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\n   * @param {Object}  [options.where]  Where condition on index, for partial indexes\n   * @param {string}  [rawTablename]   table name, this is just for backward compatibiity\n   *\n   * @returns {Promise}\n   */\n\n\n  addIndex(tableName, attributes, options, rawTablename) {\n    // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.QueryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return this.sequelize.query(sql, Object.assign({}, options, {\n      supportsSearchPath: false\n    }));\n  }\n  /**\n   * Show indexes on a table\n   *\n   * @param {string} tableName table name\n   * @param {Object} [options]   Query options\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n\n\n  showIndex(tableName, options) {\n    const sql = this.QueryGenerator.showIndexesQuery(tableName, options);\n    return this.sequelize.query(sql, Object.assign({}, options, {\n      type: QueryTypes.SHOWINDEXES\n    }));\n  }\n\n  getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return Promise.resolve({});\n    }\n\n    options = Object.assign({}, options || {}, {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    return Promise.map(tableNames, tableName => this.sequelize.query(this.QueryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)).then(results => {\n      const result = {};\n      tableNames.forEach((tableName, i) => {\n        if (_.isObject(tableName)) {\n          tableName = `${tableName.schema}.${tableName.tableName}`;\n        }\n\n        result[tableName] = Array.isArray(results[i]) ? results[i].map(r => r.constraint_name) : [results[i] && results[i].constraint_name];\n        result[tableName] = result[tableName].filter(_.identity);\n      });\n      return result;\n    });\n  }\n  /**\n   * Get foreign key references details for the table\n   *\n   * Those details contains constraintSchema, constraintName, constraintCatalog\n   * tableCatalog, tableSchema, tableName, columnName,\n   * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\n   * Remind: constraint informations won't return if it's sqlite.\n   *\n   * @param {string} tableName table name\n   * @param {Object} [options]  Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = Object.assign({}, options, {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    const catalogName = this.sequelize.config.database;\n\n    switch (this.sequelize.options.dialect) {\n      case 'sqlite':\n        // sqlite needs some special treatment.\n        return SQLiteQueryInterface.getForeignKeyReferencesForTable(this, tableName, queryOptions);\n\n      case 'postgres':\n        {\n          // postgres needs some special treatment as those field names returned are all lowercase\n          // in order to keep same result with other dialects.\n          const query = this.QueryGenerator.getForeignKeyReferencesQuery(tableName, catalogName);\n          return this.sequelize.query(query, queryOptions).then(result => result.map(Utils.camelizeObjectKeys));\n        }\n\n      case 'mssql':\n      case 'mysql':\n      case 'mariadb':\n      default:\n        {\n          const query = this.QueryGenerator.getForeignKeysQuery(tableName, catalogName);\n          return this.sequelize.query(query, queryOptions);\n        }\n    }\n  }\n  /**\n   * Remove an already existing index from a table\n   *\n   * @param {string} tableName             Table name to drop index from\n   * @param {string} indexNameOrAttributes Index name\n   * @param {Object} [options]             Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.removeIndexQuery(tableName, indexNameOrAttributes);\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Add a constraint to a table\n   *\n   * Available constraints:\n   * - UNIQUE\n   * - DEFAULT (MSSQL only)\n   * - CHECK (MySQL - Ignored by the database engine )\n   * - FOREIGN KEY\n   * - PRIMARY KEY\n   *\n   * @example <caption>UNIQUE</caption>\n   * queryInterface.addConstraint('Users', ['email'], {\n   *   type: 'unique',\n   *   name: 'custom_unique_constraint_name'\n   * });\n   *\n   * @example <caption>CHECK</caption>\n   * queryInterface.addConstraint('Users', ['roles'], {\n   *   type: 'check',\n   *   where: {\n   *      roles: ['user', 'admin', 'moderator', 'guest']\n   *   }\n   * });\n   *\n   * @example <caption>Default - MSSQL only</caption>\n   * queryInterface.addConstraint('Users', ['roles'], {\n   *    type: 'default',\n   *    defaultValue: 'guest'\n   * });\n   *\n   * @example <caption>Primary Key</caption>\n   * queryInterface.addConstraint('Users', ['username'], {\n   *    type: 'primary key',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   *\n   * @example <caption>Foreign Key</caption>\n   * queryInterface.addConstraint('Posts', ['username'], {\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     field: 'target_column_name'\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   *\n   * @param {string} tableName                  Table name where you want to add a constraint\n   * @param {Array}  attributes                 Array of column names to apply the constraint over\n   * @param {Object} options                    An object to define the constraint name, type etc\n   * @param {string} options.type               Type of constraint. One of the values in available constraints(case insensitive)\n   * @param {string} [options.name]             Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names\n   * @param {string} [options.defaultValue]     The value for the default constraint\n   * @param {Object} [options.where]            Where clause/expression for the CHECK constraint\n   * @param {Object} [options.references]       Object specifying target table, column name to create foreign key constraint\n   * @param {string} [options.references.table] Target table name\n   * @param {string} [options.references.field] Target column name\n   * @param {string} [rawTablename]             Table name, for backward compatibility\n   *\n   * @returns {Promise}\n   */\n\n\n  addConstraint(tableName, attributes, options, rawTablename) {\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n\n    if (this.sequelize.dialect.name === 'sqlite') {\n      return SQLiteQueryInterface.addConstraint(this, tableName, options, rawTablename);\n    }\n\n    const sql = this.QueryGenerator.addConstraintQuery(tableName, options, rawTablename);\n    return this.sequelize.query(sql, options);\n  }\n\n  showConstraint(tableName, constraintName, options) {\n    const sql = this.QueryGenerator.showConstraintsQuery(tableName, constraintName);\n    return this.sequelize.query(sql, Object.assign({}, options, {\n      type: QueryTypes.SHOWCONSTRAINTS\n    }));\n  }\n  /**\n   * Remove a constraint from a table\n   *\n   * @param {string} tableName       Table name to drop constraint from\n   * @param {string} constraintName  Constraint name\n   * @param {Object} options         Query options\n   *\n   * @returns {Promise}\n   */\n\n\n  removeConstraint(tableName, constraintName, options) {\n    options = options || {};\n\n    switch (this.sequelize.options.dialect) {\n      case 'mysql':\n      case 'mariadb':\n        //does not support DROP CONSTRAINT. Instead DROP PRIMARY, FOREIGN KEY, INDEX should be used\n        return MySQLQueryInterface.removeConstraint(this, tableName, constraintName, options);\n\n      case 'sqlite':\n        return SQLiteQueryInterface.removeConstraint(this, tableName, constraintName, options);\n\n      default:\n        const sql = this.QueryGenerator.removeConstraintQuery(tableName, constraintName);\n        return this.sequelize.query(sql, options);\n    }\n  }\n\n  insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.QueryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n    return this.sequelize.query(sql, options).then(results => {\n      if (instance) results[0].isNewRecord = false;\n      return results;\n    });\n  }\n  /**\n   * Upsert\n   *\n   * @param {string} tableName    table to upsert on\n   * @param {Object} insertValues values to be inserted, mapped to field name\n   * @param {Object} updateValues values to be updated, mapped to field name\n   * @param {Object} where        various conditions\n   * @param {Model}  model        Model to upsert on\n   * @param {Object} options      query options\n   *\n   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\n   */\n\n\n  upsert(tableName, insertValues, updateValues, where, model, options) {\n    const wheres = [];\n    const attributes = Object.keys(insertValues);\n    let indexes = [];\n    let indexFields;\n    options = _.clone(options);\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    } // Lets combine unique keys and indexes into one\n\n\n    indexes = _.map(model.uniqueKeys, value => {\n      return value.fields;\n    });\n\n    model._indexes.forEach(value => {\n      if (value.unique) {\n        // fields in the index may both the strings or objects with an attribute property - lets sanitize that\n        indexFields = value.fields.map(field => {\n          if (_.isPlainObject(field)) {\n            return field.attribute;\n          }\n\n          return field;\n        });\n        indexes.push(indexFields);\n      }\n    });\n\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n\n        wheres.push(where);\n      }\n    }\n\n    where = {\n      [Op.or]: wheres\n    };\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n    const sql = this.QueryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return this.sequelize.query(sql, options).then(result => {\n      switch (this.sequelize.options.dialect) {\n        case 'postgres':\n          return [result.created, result.primary_key];\n\n        case 'mssql':\n          return [result.$action === 'INSERT', result[model.primaryKeyField]];\n        // MySQL returns 1 for inserted, 2 for updated\n        // http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html.\n\n        case 'mysql':\n        case 'mariadb':\n          return [result === 1, undefined];\n\n        default:\n          return [result, undefined];\n      }\n    });\n  }\n  /**\n   * Insert multiple records into a table\n   *\n   * @example\n   * queryInterface.bulkInsert('roles', [{\n   *    label: 'user',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }, {\n   *    label: 'admin',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }]);\n   *\n   * @param {string} tableName   Table name to insert record to\n   * @param {Array}  records     List of records to insert\n   * @param {Object} options     Various options, please see Model.bulkCreate options\n   * @param {Object} attributes  Various attributes mapped by field name\n   *\n   * @returns {Promise}\n   */\n\n\n  bulkInsert(tableName, records, options, attributes) {\n    options = _.clone(options) || {};\n    options.type = QueryTypes.INSERT;\n    return this.sequelize.query(this.QueryGenerator.bulkInsertQuery(tableName, records, options, attributes), options).then(results => results[0]);\n  }\n\n  update(instance, tableName, values, identifier, options) {\n    options = _.clone(options || {});\n    options.hasTrigger = !!(instance && instance._modelOptions && instance._modelOptions.hasTrigger);\n    const sql = this.QueryGenerator.updateQuery(tableName, values, identifier, options, instance.constructor.rawAttributes);\n    options.type = QueryTypes.UPDATE;\n    options.instance = instance;\n    return this.sequelize.query(sql, options);\n  }\n  /**\n   * Update multiple records of a table\n   *\n   * @example\n   * queryInterface.bulkUpdate('roles', {\n   *     label: 'admin',\n   *   }, {\n   *     userType: 3,\n   *   },\n   * );\n   *\n   * @param {string} tableName     Table name to update\n   * @param {Object} values        Values to be inserted, mapped to field name\n   * @param {Object} identifier    A hash with conditions OR an ID as integer OR a string with conditions\n   * @param {Object} [options]     Various options, please see Model.bulkCreate options\n   * @param {Object} [attributes]  Attributes on return objects if supported by SQL dialect\n   *\n   * @returns {Promise}\n   */\n\n\n  bulkUpdate(tableName, values, identifier, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n    const sql = this.QueryGenerator.updateQuery(tableName, values, identifier, options, attributes);\n    const table = _.isObject(tableName) ? tableName : {\n      tableName\n    };\n\n    const model = _.find(this.sequelize.modelManager.models, {\n      tableName: table.tableName\n    });\n\n    options.type = QueryTypes.BULKUPDATE;\n    options.model = model;\n    return this.sequelize.query(sql, options);\n  }\n\n  delete(instance, tableName, identifier, options) {\n    const cascades = [];\n    const sql = this.QueryGenerator.deleteQuery(tableName, identifier, {}, instance.constructor);\n    options = _.clone(options) || {}; // Check for a restrict field\n\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n\n        if (association.options && association.options.onDelete && association.options.onDelete.toLowerCase() === 'cascade' && association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    return Promise.each(cascades, cascade => {\n      return instance[cascade](options).then(instances => {\n        // Check for hasOne relationship with non-existing associate (\"has zero\")\n        if (!instances) {\n          return Promise.resolve();\n        }\n\n        if (!Array.isArray(instances)) instances = [instances];\n        return Promise.each(instances, instance => instance.destroy(options));\n      });\n    }).then(() => {\n      options.instance = instance;\n      return this.sequelize.query(sql, options);\n    });\n  }\n  /**\n   * Delete multiple records from a table\n   *\n   * @param {string}  tableName            table name from where to delete records\n   * @param {Object}  where                where conditions to find records to delete\n   * @param {Object}  [options]            options\n   * @param {boolean} [options.truncate]   Use truncate table command   \n   * @param {boolean} [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n   * @param {boolean} [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.\n   * @param {Model}   [model]              Model\n   *\n   * @returns {Promise}\n   */\n\n\n  bulkDelete(tableName, where, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      limit: null\n    });\n\n    if (options.truncate === true) {\n      return this.sequelize.query(this.QueryGenerator.truncateTableQuery(tableName, options), options);\n    }\n\n    if (typeof identifier === 'object') where = Utils.cloneDeep(where);\n    return this.sequelize.query(this.QueryGenerator.deleteQuery(tableName, where, options, model), options);\n  }\n\n  select(model, tableName, optionsArg) {\n    const options = Object.assign({}, optionsArg, {\n      type: QueryTypes.SELECT,\n      model\n    });\n    return this.sequelize.query(this.QueryGenerator.selectQuery(tableName, options, model), options);\n  }\n\n  increment(model, tableName, values, identifier, options) {\n    options = Utils.cloneDeep(options);\n    const sql = this.QueryGenerator.arithmeticQuery('+', tableName, values, identifier, options, options.attributes);\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n    return this.sequelize.query(sql, options);\n  }\n\n  decrement(model, tableName, values, identifier, options) {\n    options = Utils.cloneDeep(options);\n    const sql = this.QueryGenerator.arithmeticQuery('-', tableName, values, identifier, options, options.attributes);\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n    return this.sequelize.query(sql, options);\n  }\n\n  rawSelect(tableName, options, attributeSelector, Model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n    const sql = this.QueryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === undefined) {\n      throw new Error('Please pass an attribute selector!');\n    }\n\n    return this.sequelize.query(sql, options).then(data => {\n      if (!options.plain) {\n        return data;\n      }\n\n      const result = data ? data[attributeSelector] : null;\n\n      if (!options || !options.dataType) {\n        return result;\n      }\n\n      const dataType = options.dataType;\n\n      if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n        if (result !== null) {\n          return parseFloat(result);\n        }\n      }\n\n      if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n        return parseInt(result, 10);\n      }\n\n      if (dataType instanceof DataTypes.DATE) {\n        if (result !== null && !(result instanceof Date)) {\n          return new Date(result);\n        }\n      }\n\n      return result;\n    });\n  }\n\n  createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {\n    const sql = this.QueryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n\n    return Promise.resolve();\n  }\n\n  dropTrigger(tableName, triggerName, options) {\n    const sql = this.QueryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n\n    return Promise.resolve();\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.QueryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n\n    return Promise.resolve();\n  }\n  /**\n   * Create an SQL function\n   *\n   * @example\n   * queryInterface.createFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'integer', name: 'param', direction: 'IN'}\n   *   ],\n   *   'integer',\n   *   'plpgsql',\n   *   'RETURN param + 1;',\n   *   [\n   *     'IMMUTABLE',\n   *     'LEAKPROOF'\n   *   ],\n   *   {\n   *    variables:\n   *      [\n   *        {type: 'integer', name: 'myVar', default: 100}\n   *      ],\n   *      force: true\n   *   };\n   * );\n   *\n   * @param {string}  functionName  Name of SQL function to create\n   * @param {Array}   params        List of parameters declared for SQL function\n   * @param {string}  returnType    SQL type of function returned value\n   * @param {string}  language      The name of the language that the function is implemented in\n   * @param {string}  body          Source code of function\n   * @param {Array}   optionsArray  Extra-options for creation\n   * @param {Object}  [options]     query options\n   * @param {boolean} options.force If force is true, any existing functions with the same parameters will be replaced. For postgres, this means using `CREATE OR REPLACE FUNCTION` instead of `CREATE FUNCTION`. Default is false\n   * @param {Array<Object>}   options.variables List of declared variables. Each variable should be an object with string fields `type` and `name`, and optionally having a `default` field as well.\n   *\n   * @returns {Promise}\n   */\n\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.QueryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n\n    return Promise.resolve();\n  }\n  /**\n   * Drop an SQL function\n   *\n   * @example\n   * queryInterface.dropFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ]\n   * );\n   *\n   * @param {string} functionName Name of SQL function to drop\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {Object} [options]    query options\n   *\n   * @returns {Promise}\n   */\n\n\n  dropFunction(functionName, params, options) {\n    const sql = this.QueryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n\n    return Promise.resolve();\n  }\n  /**\n   * Rename an SQL function\n   *\n   * @example\n   * queryInterface.renameFunction(\n   *   'fooFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ],\n   *   'barFunction'\n   * );\n   *\n   * @param {string} oldFunctionName  Current name of function\n   * @param {Array}  params           List of parameters declared for SQL function\n   * @param {string} newFunctionName  New name of function\n   * @param {Object} [options]        query options\n   *\n   * @returns {Promise}\n   */\n\n\n  renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.QueryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n\n    return Promise.resolve();\n  } // Helper methods useful for querying\n\n  /**\n   * Escape an identifier (e.g. a table or attribute name)\n   *\n   * @param {string} identifier identifier to quote\n   * @param {boolean} [force]   If force is true,the identifier will be quoted even if the `quoteIdentifiers` option is false.\n   *\n   * @private\n   */\n\n\n  quoteIdentifier(identifier, force) {\n    return this.QueryGenerator.quoteIdentifier(identifier, force);\n  }\n\n  quoteTable(identifier) {\n    return this.QueryGenerator.quoteTable(identifier);\n  }\n  /**\n   * Quote array of identifiers at once\n   *\n   * @param {string[]} identifiers array of identifiers to quote\n   * @param {boolean} [force]   If force is true,the identifier will be quoted even if the `quoteIdentifiers` option is false.\n   *\n   * @private\n   */\n\n\n  quoteIdentifiers(identifiers, force) {\n    return this.QueryGenerator.quoteIdentifiers(identifiers, force);\n  }\n  /**\n   * Escape a value (e.g. a string, number or date)\n   *\n   * @param {string} value string to escape\n   *\n   * @private\n   */\n\n\n  escape(value) {\n    return this.QueryGenerator.escape(value);\n  }\n\n  setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set isolation level for a transaction without transaction object!');\n    }\n\n    if (transaction.parent || !value) {\n      // Not possible to set a separate isolation level for savepoints\n      return Promise.resolve();\n    }\n\n    options = Object.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n    const sql = this.QueryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n    if (!sql) return Promise.resolve();\n    return this.sequelize.query(sql, options);\n  }\n\n  startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without transaction object!');\n    }\n\n    options = Object.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.QueryGenerator.startTransactionQuery(transaction);\n    return this.sequelize.query(sql, options);\n  }\n\n  deferConstraints(transaction, options) {\n    options = Object.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n    const sql = this.QueryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n\n    return Promise.resolve();\n  }\n\n  commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without transaction object!');\n    }\n\n    if (transaction.parent) {\n      // Savepoints cannot be committed\n      return Promise.resolve();\n    }\n\n    options = Object.assign({}, options, {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    });\n    const sql = this.QueryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n    transaction.finished = 'commit';\n    return promise;\n  }\n\n  rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without transaction object!');\n    }\n\n    options = Object.assign({}, options, {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    });\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.QueryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n    transaction.finished = 'rollback';\n    return promise;\n  }\n\n}\n\nmodule.exports = QueryInterface;\nmodule.exports.QueryInterface = QueryInterface;\nmodule.exports.default = QueryInterface;","map":{"version":3,"names":["_","require","Utils","DataTypes","SQLiteQueryInterface","MSSQLQueryInterface","MySQLQueryInterface","PostgresQueryInterface","Transaction","Promise","QueryTypes","Op","QueryInterface","constructor","sequelize","QueryGenerator","dialect","createDatabase","database","options","sql","createDatabaseQuery","query","dropDatabase","dropDatabaseQuery","createSchema","schema","dropSchema","dropAllSchemas","_dialect","supports","schemas","drop","showAllSchemas","map","schemaName","Object","assign","raw","type","SELECT","showSchemasSql","showSchemasQuery","then","schemaNames","flatten","value","schema_name","databaseVersion","versionQuery","VERSION","createTable","tableName","attributes","model","promise","clone","uniqueKeys","forOwn","uniqueKey","customIndex","undefined","mapValues","attribute","normalizeAttribute","ensureEnums","resolve","_schema","addSchema","attributesToSQL","table","context","createTableQuery","dropTable","cascade","force","dropTableQuery","promises","instanceTable","modelManager","getModel","getTableName","keys","rawAttributes","keyLen","length","i","ENUM","pgEnumDrop","supportsSearchPath","push","all","get","dropAllTables","skip","tableNames","each","includes","showAllTables","result","foreignKeysAreEnabled","foreign_keys","getForeignKeysForTables","foreignKeys","queries","forEach","normalizedTableName","isObject","foreignKey","dropForeignKeyQuery","q","dropEnum","enumName","getDialect","pgEscapeAndQuote","dropAllEnums","pgListEnums","enum_name","plain","renameTable","before","after","renameTableQuery","SHOWTABLES","showTablesSql","showTablesQuery","config","describeTable","schemaDelimiter","describeTableQuery","DESCRIBE","data","isEmpty","Error","catch","e","original","code","addColumn","key","addColumnQuery","removeColumn","attributeName","removeColumnQuery","changeColumn","dataTypeOrOptions","values","allowNull","changeColumnQuery","renameColumn","attrNameBefore","attrNameAfter","_options","defaultValue","renameColumnQuery","addIndex","rawTablename","Array","isArray","fields","cloneDeep","addIndexQuery","showIndex","showIndexesQuery","SHOWINDEXES","FOREIGNKEYS","getForeignKeysQuery","results","r","constraint_name","filter","identity","getForeignKeyReferencesForTable","queryOptions","catalogName","getForeignKeyReferencesQuery","camelizeObjectKeys","removeIndex","indexNameOrAttributes","removeIndexQuery","addConstraint","name","addConstraintQuery","showConstraint","constraintName","showConstraintsQuery","SHOWCONSTRAINTS","removeConstraint","removeConstraintQuery","insert","instance","hasTrigger","insertQuery","INSERT","isNewRecord","upsert","insertValues","updateValues","where","wheres","indexes","indexFields","isWhereEmpty","_indexes","unique","field","isPlainObject","index","intersection","or","UPSERT","upsertQuery","created","primary_key","$action","primaryKeyField","bulkInsert","records","bulkInsertQuery","update","identifier","_modelOptions","updateQuery","UPDATE","bulkUpdate","find","models","BULKUPDATE","delete","cascades","deleteQuery","associations","association","onDelete","toLowerCase","useHooks","accessors","instances","destroy","bulkDelete","defaults","limit","truncate","truncateTableQuery","select","optionsArg","selectQuery","increment","arithmeticQuery","decrement","rawSelect","attributeSelector","Model","dataType","DECIMAL","FLOAT","parseFloat","INTEGER","BIGINT","parseInt","DATE","Date","createTrigger","triggerName","timingType","fireOnArray","functionName","functionParams","optionsArray","dropTrigger","renameTrigger","oldTriggerName","newTriggerName","createFunction","params","returnType","language","body","dropFunction","renameFunction","oldFunctionName","newFunctionName","quoteIdentifier","quoteTable","quoteIdentifiers","identifiers","escape","setIsolationLevel","transaction","parent","setIsolationLevelQuery","startTransaction","startTransactionQuery","deferConstraints","deferConstraintsQuery","commitTransaction","completesTransaction","commitTransactionQuery","finished","rollbackTransaction","rollbackTransactionQuery","module","exports","default"],"sources":["/home/brian/node_modules/sequelize/lib/query-interface.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('./utils');\nconst DataTypes = require('./data-types');\nconst SQLiteQueryInterface = require('./dialects/sqlite/query-interface');\nconst MSSQLQueryInterface = require('./dialects/mssql/query-interface');\nconst MySQLQueryInterface = require('./dialects/mysql/query-interface');\nconst PostgresQueryInterface = require('./dialects/postgres/query-interface');\nconst Transaction = require('./transaction');\nconst Promise = require('./promise');\nconst QueryTypes = require('./query-types');\nconst Op = require('./operators');\n\n/**\n * The interface that Sequelize uses to talk to all databases\n *\n * @class QueryInterface\n */\nclass QueryInterface {\n  constructor(sequelize) {\n    this.sequelize = sequelize;\n    this.QueryGenerator = this.sequelize.dialect.QueryGenerator;\n  }\n\n  /**\n   * Create a database\n   *\n   * @param {string} database  Database name to create\n   * @param {Object} [options] Query options\n   * @param {string} [options.charset] Database default character set, MYSQL only\n   * @param {string} [options.collate] Database default collation\n   * @param {string} [options.encoding] Database default character set, PostgreSQL only\n   * @param {string} [options.ctype] Database character classification, PostgreSQL only\n   * @param {string} [options.template] The name of the template from which to create the new database, PostgreSQL only\n   *\n   * @returns {Promise}\n   */\n  createDatabase(database, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.createDatabaseQuery(database, options);\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a database\n   *\n   * @param {string} database  Database name to drop\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  dropDatabase(database, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.dropDatabaseQuery(database);\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Create a schema\n   *\n   * @param {string} schema    Schema name to create\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  createSchema(schema, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.createSchema(schema);\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop a schema\n   *\n   * @param {string} schema    Schema name to drop\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  dropSchema(schema, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.dropSchema(schema);\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Drop all schemas\n   *\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  dropAllSchemas(options) {\n    options = options || {};\n\n    if (!this.QueryGenerator._dialect.supports.schemas) {\n      return this.sequelize.drop(options);\n    }\n    return this.showAllSchemas(options).map(schemaName => this.dropSchema(schemaName, options));\n  }\n\n  /**\n   * Show all schemas\n   *\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise<Array>}\n   */\n  showAllSchemas(options) {\n    options = Object.assign({}, options, {\n      raw: true,\n      type: this.sequelize.QueryTypes.SELECT\n    });\n\n    const showSchemasSql = this.QueryGenerator.showSchemasQuery(options);\n\n    return this.sequelize.query(showSchemasSql, options).then(schemaNames => _.flatten(\n      schemaNames.map(value => value.schema_name ? value.schema_name : value)\n    ));\n  }\n\n  /**\n   * Return database version\n   *\n   * @param {Object}    [options]      Query options\n   * @param {QueryType} [options.type] Query type\n   *\n   * @returns {Promise}\n   * @private\n   */\n  databaseVersion(options) {\n    return this.sequelize.query(\n      this.QueryGenerator.versionQuery(),\n      Object.assign({}, options, { type: QueryTypes.VERSION })\n    );\n  }\n\n  /**\n   * Create a table with given set of attributes\n   *\n   * ```js\n   * queryInterface.createTable(\n   *   'nameOfTheNewTable',\n   *   {\n   *     id: {\n   *       type: Sequelize.INTEGER,\n   *       primaryKey: true,\n   *       autoIncrement: true\n   *     },\n   *     createdAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     updatedAt: {\n   *       type: Sequelize.DATE\n   *     },\n   *     attr1: Sequelize.STRING,\n   *     attr2: Sequelize.INTEGER,\n   *     attr3: {\n   *       type: Sequelize.BOOLEAN,\n   *       defaultValue: false,\n   *       allowNull: false\n   *     },\n   *     //foreign key usage\n   *     attr4: {\n   *       type: Sequelize.INTEGER,\n   *       references: {\n   *         model: 'another_table_name',\n   *         key: 'id'\n   *       },\n   *       onUpdate: 'cascade',\n   *       onDelete: 'cascade'\n   *     }\n   *   },\n   *   {\n   *     engine: 'MYISAM',    // default: 'InnoDB'\n   *     charset: 'latin1',   // default: null\n   *     schema: 'public',    // default: public, PostgreSQL only.\n   *     comment: 'my table', // comment for table\n   *     collate: 'latin1_danish_ci' // collation, MYSQL only\n   *   }\n   * )\n   * ```\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {Object} attributes Object representing a list of table attributes to create\n   * @param {Object} [options] create table and query options\n   * @param {Model}  [model] model class\n   *\n   * @returns {Promise}\n   */\n  createTable(tableName, attributes, options, model) {\n    let sql = '';\n    let promise;\n\n    options = _.clone(options) || {};\n\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === undefined) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n\n    attributes = _.mapValues(\n      attributes,\n      attribute => this.sequelize.normalizeAttribute(attribute)\n    );\n\n    // Postgres requires special SQL commands for ENUM/ENUM[]\n    if (this.sequelize.options.dialect === 'postgres') {\n      promise = PostgresQueryInterface.ensureEnums(this, tableName, attributes, options, model);\n    } else {\n      promise = Promise.resolve();\n    }\n\n    if (\n      !tableName.schema &&\n      (options.schema || !!model && model._schema)\n    ) {\n      tableName = this.QueryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n\n    attributes = this.QueryGenerator.attributesToSQL(attributes, { table: tableName, context: 'createTable' });\n    sql = this.QueryGenerator.createTableQuery(tableName, attributes, options);\n\n    return promise.then(() => this.sequelize.query(sql, options));\n  }\n\n  /**\n   * Drop a table from database\n   *\n   * @param {string} tableName Table name to drop\n   * @param {Object} options   Query options\n   *\n   * @returns {Promise}\n   */\n  dropTable(tableName, options) {\n    // if we're forcing we should be cascading unless explicitly stated otherwise\n    options = _.clone(options) || {};\n    options.cascade = options.cascade || options.force || false;\n\n    let sql = this.QueryGenerator.dropTableQuery(tableName, options);\n\n    return this.sequelize.query(sql, options).then(() => {\n      const promises = [];\n\n      // Since postgres has a special case for enums, we should drop the related\n      // enum type within the table and attribute\n      if (this.sequelize.options.dialect === 'postgres') {\n        const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\n\n        if (instanceTable) {\n          const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\n\n          const keys = Object.keys(instanceTable.rawAttributes);\n          const keyLen = keys.length;\n\n          for (let i = 0; i < keyLen; i++) {\n            if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n              sql = this.QueryGenerator.pgEnumDrop(getTableName, keys[i]);\n              options.supportsSearchPath = false;\n              promises.push(this.sequelize.query(sql, Object.assign({}, options, { raw: true })));\n            }\n          }\n        }\n      }\n\n      return Promise.all(promises).get(0);\n    });\n  }\n\n  /**\n   * Drop all tables from database\n   *\n   * @param {Object} [options] query options\n   * @param {Array}  [options.skip] List of table to skip\n   *\n   * @returns {Promise}\n   */\n  dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const dropAllTables = tableNames => Promise.each(tableNames, tableName => {\n      // if tableName is not in the Array of tables names then don't drop it\n      if (!skip.includes(tableName.tableName || tableName)) {\n        return this.dropTable(tableName, Object.assign({}, options, { cascade: true }) );\n      }\n    });\n\n    return this.showAllTables(options).then(tableNames => {\n      if (this.sequelize.options.dialect === 'sqlite') {\n        return this.sequelize.query('PRAGMA foreign_keys;', options).then(result => {\n          const foreignKeysAreEnabled = result.foreign_keys === 1;\n\n          if (foreignKeysAreEnabled) {\n            return this.sequelize.query('PRAGMA foreign_keys = OFF', options)\n              .then(() => dropAllTables(tableNames))\n              .then(() => this.sequelize.query('PRAGMA foreign_keys = ON', options));\n          }\n          return dropAllTables(tableNames);\n        });\n      }\n      return this.getForeignKeysForTables(tableNames, options).then(foreignKeys => {\n        const queries = [];\n\n        tableNames.forEach(tableName => {\n          let normalizedTableName = tableName;\n          if (_.isObject(tableName)) {\n            normalizedTableName = `${tableName.schema}.${tableName.tableName}`;\n          }\n\n          foreignKeys[normalizedTableName].forEach(foreignKey => {\n            queries.push(this.QueryGenerator.dropForeignKeyQuery(tableName, foreignKey));\n          });\n        });\n\n        return Promise.each(queries, q => this.sequelize.query(q, options))\n          .then(() => dropAllTables(tableNames));\n      });\n    });\n  }\n\n  /**\n   * Drop specified enum from database (Postgres only)\n   *\n   * @param {string} [enumName]  Enum name to drop\n   * @param {Object} options Query options\n   *\n   * @returns {Promise}\n   * @private\n   */\n  dropEnum(enumName, options) {\n    if (this.sequelize.getDialect() !== 'postgres') {\n      return Promise.resolve();\n    }\n\n    options = options || {};\n\n    return this.sequelize.query(\n      this.QueryGenerator.pgEnumDrop(null, null, this.QueryGenerator.pgEscapeAndQuote(enumName)),\n      Object.assign({}, options, { raw: true })\n    );\n  }\n\n  /**\n   * Drop all enums from database (Postgres only)\n   *\n   * @param {Object} options Query options\n   *\n   * @returns {Promise}\n   * @private\n   */\n  dropAllEnums(options) {\n    if (this.sequelize.getDialect() !== 'postgres') {\n      return Promise.resolve();\n    }\n\n    options = options || {};\n\n    return this.pgListEnums(null, options).map(result => this.sequelize.query(\n      this.QueryGenerator.pgEnumDrop(null, null, this.QueryGenerator.pgEscapeAndQuote(result.enum_name)),\n      Object.assign({}, options, { raw: true })\n    ));\n  }\n\n  /**\n   * List all enums (Postgres only)\n   *\n   * @param {string} [tableName]  Table whose enum to list\n   * @param {Object} [options]    Query options\n   *\n   * @returns {Promise}\n   * @private\n   */\n  pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, Object.assign({}, options, { plain: false, raw: true, type: QueryTypes.SELECT }));\n  }\n\n  /**\n   * Rename a table\n   *\n   * @param {string} before    Current name of table\n   * @param {string} after     New name from table\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  renameTable(before, after, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.renameTableQuery(before, after);\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Get all tables in current database\n   *\n   * @param {Object}    [options] Query options\n   * @param {boolean}   [options.raw=true] Run query in raw mode\n   * @param {QueryType} [options.type=QueryType.SHOWTABLE] query type\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  showAllTables(options) {\n    options = Object.assign({}, options, {\n      raw: true,\n      type: QueryTypes.SHOWTABLES\n    });\n\n    const showTablesSql = this.QueryGenerator.showTablesQuery(this.sequelize.config.database);\n    return this.sequelize.query(showTablesSql, options).then(tableNames => _.flatten(tableNames));\n  }\n\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   *\n   * @param {string} tableName table name\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise<Object>}\n   */\n  describeTable(tableName, options) {\n    if (this.sequelize.options.dialect === 'sqlite') {\n      // sqlite needs some special treatment as it cannot rename a column\n      return SQLiteQueryInterface.describeTable(this, tableName, options);\n    }\n\n    let schema = null;\n    let schemaDelimiter = null;\n\n    if (typeof options === 'string') {\n      schema = options;\n    } else if (typeof options === 'object' && options !== null) {\n      schema = options.schema || null;\n      schemaDelimiter = options.schemaDelimiter || null;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      schema = tableName.schema;\n      tableName = tableName.tableName;\n    }\n\n    const sql = this.QueryGenerator.describeTableQuery(tableName, schema, schemaDelimiter);\n    options = Object.assign({}, options, { type: QueryTypes.DESCRIBE });\n\n    return this.sequelize.query(sql, options).then(data => {\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      return data;\n    }).catch(e => {\n      if (e.original && e.original.code === 'ER_NO_SUCH_TABLE') {\n        throw Error(`No description found for \"${tableName}\" table. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw e;\n    });\n  }\n\n  /**\n   * Add a new column to a table\n   *\n   * ```js\n   * queryInterface.addColumn('tableA', 'columnC', Sequelize.STRING, {\n   *    after: 'columnB' // after option is only supported by MySQL\n   * });\n   * ```\n   *\n   * @param {string} table     Table to add column to\n   * @param {string} key       Column name\n   * @param {Object} attribute Attribute definition\n   * @param {Object} [options] Query options\n   *\n   * @returns {Promise}\n   */\n  addColumn(table, key, attribute, options) {\n    if (!table || !key || !attribute) {\n      throw new Error('addColumn takes at least 3 arguments (table, attribute name, attribute definition)');\n    }\n\n    options = options || {};\n    attribute = this.sequelize.normalizeAttribute(attribute);\n    return this.sequelize.query(this.QueryGenerator.addColumnQuery(table, key, attribute), options);\n  }\n\n  /**\n   * Remove a column from a table\n   *\n   * @param {string} tableName      Table to remove column from\n   * @param {string} attributeName  Column name to remove\n   * @param {Object} [options]      Query options\n   *\n   * @returns {Promise}\n   */\n  removeColumn(tableName, attributeName, options) {\n    options = options || {};\n    switch (this.sequelize.options.dialect) {\n      case 'sqlite':\n        // sqlite needs some special treatment as it cannot drop a column\n        return SQLiteQueryInterface.removeColumn(this, tableName, attributeName, options);\n      case 'mssql':\n        // mssql needs special treatment as it cannot drop a column with a default or foreign key constraint\n        return MSSQLQueryInterface.removeColumn(this, tableName, attributeName, options);\n      case 'mysql':\n      case 'mariadb':\n        // mysql/mariadb need special treatment as it cannot drop a column with a foreign key constraint\n        return MySQLQueryInterface.removeColumn(this, tableName, attributeName, options);\n      default:\n        return this.sequelize.query(this.QueryGenerator.removeColumnQuery(tableName, attributeName), options);\n    }\n  }\n\n  /**\n   * Change a column definition\n   *\n   * @param {string} tableName          Table name to change from\n   * @param {string} attributeName      Column name\n   * @param {Object} dataTypeOrOptions  Attribute definition for new column\n   * @param {Object} [options]          Query options\n   *\n   * @returns {Promise}\n   */\n  changeColumn(tableName, attributeName, dataTypeOrOptions, options) {\n    const attributes = {};\n    options = options || {};\n\n    if (_.values(DataTypes).includes(dataTypeOrOptions)) {\n      attributes[attributeName] = { type: dataTypeOrOptions, allowNull: true };\n    } else {\n      attributes[attributeName] = dataTypeOrOptions;\n    }\n\n    attributes[attributeName] = this.sequelize.normalizeAttribute(attributes[attributeName]);\n\n    if (this.sequelize.options.dialect === 'sqlite') {\n      // sqlite needs some special treatment as it cannot change a column\n      return SQLiteQueryInterface.changeColumn(this, tableName, attributes, options);\n    }\n    const query = this.QueryGenerator.attributesToSQL(attributes, {\n      context: 'changeColumn',\n      table: tableName\n    });\n    const sql = this.QueryGenerator.changeColumnQuery(tableName, query);\n\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Rename a column\n   *\n   * @param {string} tableName        Table name whose column to rename\n   * @param {string} attrNameBefore   Current column name\n   * @param {string} attrNameAfter    New column name\n   * @param {Object} [options]        Query option\n   *\n   * @returns {Promise}\n   */\n  renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    return this.describeTable(tableName, options).then(data => {\n      if (!data[attrNameBefore]) {\n        throw new Error(`Table ${tableName} doesn't have the column ${attrNameBefore}`);\n      }\n\n      data = data[attrNameBefore] || {};\n\n      const _options = {};\n\n      _options[attrNameAfter] = {\n        attribute: attrNameAfter,\n        type: data.type,\n        allowNull: data.allowNull,\n        defaultValue: data.defaultValue\n      };\n\n      // fix: a not-null column cannot have null as default value\n      if (data.defaultValue === null && !data.allowNull) {\n        delete _options[attrNameAfter].defaultValue;\n      }\n\n      if (this.sequelize.options.dialect === 'sqlite') {\n        // sqlite needs some special treatment as it cannot rename a column\n        return SQLiteQueryInterface.renameColumn(this, tableName, attrNameBefore, attrNameAfter, options);\n      }\n      const sql = this.QueryGenerator.renameColumnQuery(\n        tableName,\n        attrNameBefore,\n        this.QueryGenerator.attributesToSQL(_options)\n      );\n      return this.sequelize.query(sql, options);\n    });\n  }\n\n  /**\n   * Add an index to a column\n   *\n   * @param {string|Object}  tableName Table name to add index on, can be a object with schema\n   * @param {Array}   [attributes]     Use options.fields instead, List of attributes to add index on\n   * @param {Object}  options          indexes options\n   * @param {Array}   options.fields   List of attributes to add index on\n   * @param {boolean} [options.concurrently] Pass CONCURRENT so other operations run while the index is created\n   * @param {boolean} [options.unique] Create a unique index\n   * @param {string}  [options.using]  Useful for GIN indexes\n   * @param {string}  [options.operator] Index operator\n   * @param {string}  [options.type]   Type of index, available options are UNIQUE|FULLTEXT|SPATIAL\n   * @param {string}  [options.name]   Name of the index. Default is <table>_<attr1>_<attr2>\n   * @param {Object}  [options.where]  Where condition on index, for partial indexes\n   * @param {string}  [rawTablename]   table name, this is just for backward compatibiity\n   *\n   * @returns {Promise}\n   */\n  addIndex(tableName, attributes, options, rawTablename) {\n    // Support for passing tableName, attributes, options or tableName, options (with a fields param which is the attributes)\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n    const sql = this.QueryGenerator.addIndexQuery(tableName, options, rawTablename);\n    return this.sequelize.query(sql, Object.assign({}, options, { supportsSearchPath: false }));\n  }\n\n  /**\n   * Show indexes on a table\n   *\n   * @param {string} tableName table name\n   * @param {Object} [options]   Query options\n   *\n   * @returns {Promise<Array>}\n   * @private\n   */\n  showIndex(tableName, options) {\n    const sql = this.QueryGenerator.showIndexesQuery(tableName, options);\n    return this.sequelize.query(sql, Object.assign({}, options, { type: QueryTypes.SHOWINDEXES }));\n  }\n\n  getForeignKeysForTables(tableNames, options) {\n    if (tableNames.length === 0) {\n      return Promise.resolve({});\n    }\n\n    options = Object.assign({}, options || {}, { type: QueryTypes.FOREIGNKEYS });\n\n    return Promise.map(tableNames, tableName =>\n      this.sequelize.query(this.QueryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.database), options)\n    ).then(results => {\n      const result = {};\n\n      tableNames.forEach((tableName, i) => {\n        if (_.isObject(tableName)) {\n          tableName = `${tableName.schema}.${tableName.tableName}`;\n        }\n\n        result[tableName] = Array.isArray(results[i])\n          ? results[i].map(r => r.constraint_name)\n          : [results[i] && results[i].constraint_name];\n\n        result[tableName] = result[tableName].filter(_.identity);\n      });\n\n      return result;\n    });\n  }\n\n  /**\n   * Get foreign key references details for the table\n   *\n   * Those details contains constraintSchema, constraintName, constraintCatalog\n   * tableCatalog, tableSchema, tableName, columnName,\n   * referencedTableCatalog, referencedTableCatalog, referencedTableSchema, referencedTableName, referencedColumnName.\n   * Remind: constraint informations won't return if it's sqlite.\n   *\n   * @param {string} tableName table name\n   * @param {Object} [options]  Query options\n   *\n   * @returns {Promise}\n   */\n  getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = Object.assign({}, options, {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    const catalogName = this.sequelize.config.database;\n    switch (this.sequelize.options.dialect) {\n      case 'sqlite':\n        // sqlite needs some special treatment.\n        return SQLiteQueryInterface.getForeignKeyReferencesForTable(this, tableName, queryOptions);\n      case 'postgres':\n      {\n        // postgres needs some special treatment as those field names returned are all lowercase\n        // in order to keep same result with other dialects.\n        const query = this.QueryGenerator.getForeignKeyReferencesQuery(tableName, catalogName);\n        return this.sequelize.query(query, queryOptions)\n          .then(result => result.map(Utils.camelizeObjectKeys));\n      }\n      case 'mssql':\n      case 'mysql':\n      case 'mariadb':\n      default: {\n        const query = this.QueryGenerator.getForeignKeysQuery(tableName, catalogName);\n        return this.sequelize.query(query, queryOptions);\n      }\n    }\n  }\n\n  /**\n   * Remove an already existing index from a table\n   *\n   * @param {string} tableName             Table name to drop index from\n   * @param {string} indexNameOrAttributes Index name\n   * @param {Object} [options]             Query options\n   *\n   * @returns {Promise}\n   */\n  removeIndex(tableName, indexNameOrAttributes, options) {\n    options = options || {};\n    const sql = this.QueryGenerator.removeIndexQuery(tableName, indexNameOrAttributes);\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Add a constraint to a table\n   *\n   * Available constraints:\n   * - UNIQUE\n   * - DEFAULT (MSSQL only)\n   * - CHECK (MySQL - Ignored by the database engine )\n   * - FOREIGN KEY\n   * - PRIMARY KEY\n   *\n   * @example <caption>UNIQUE</caption>\n   * queryInterface.addConstraint('Users', ['email'], {\n   *   type: 'unique',\n   *   name: 'custom_unique_constraint_name'\n   * });\n   *\n   * @example <caption>CHECK</caption>\n   * queryInterface.addConstraint('Users', ['roles'], {\n   *   type: 'check',\n   *   where: {\n   *      roles: ['user', 'admin', 'moderator', 'guest']\n   *   }\n   * });\n   *\n   * @example <caption>Default - MSSQL only</caption>\n   * queryInterface.addConstraint('Users', ['roles'], {\n   *    type: 'default',\n   *    defaultValue: 'guest'\n   * });\n   *\n   * @example <caption>Primary Key</caption>\n   * queryInterface.addConstraint('Users', ['username'], {\n   *    type: 'primary key',\n   *    name: 'custom_primary_constraint_name'\n   * });\n   *\n   * @example <caption>Foreign Key</caption>\n   * queryInterface.addConstraint('Posts', ['username'], {\n   *   type: 'foreign key',\n   *   name: 'custom_fkey_constraint_name',\n   *   references: { //Required field\n   *     table: 'target_table_name',\n   *     field: 'target_column_name'\n   *   },\n   *   onDelete: 'cascade',\n   *   onUpdate: 'cascade'\n   * });\n   *\n   * @param {string} tableName                  Table name where you want to add a constraint\n   * @param {Array}  attributes                 Array of column names to apply the constraint over\n   * @param {Object} options                    An object to define the constraint name, type etc\n   * @param {string} options.type               Type of constraint. One of the values in available constraints(case insensitive)\n   * @param {string} [options.name]             Name of the constraint. If not specified, sequelize automatically creates a named constraint based on constraint type, table & column names\n   * @param {string} [options.defaultValue]     The value for the default constraint\n   * @param {Object} [options.where]            Where clause/expression for the CHECK constraint\n   * @param {Object} [options.references]       Object specifying target table, column name to create foreign key constraint\n   * @param {string} [options.references.table] Target table name\n   * @param {string} [options.references.field] Target column name\n   * @param {string} [rawTablename]             Table name, for backward compatibility\n   *\n   * @returns {Promise}\n   */\n  addConstraint(tableName, attributes, options, rawTablename) {\n    if (!Array.isArray(attributes)) {\n      rawTablename = options;\n      options = attributes;\n      attributes = options.fields;\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    if (!rawTablename) {\n      // Map for backwards compat\n      rawTablename = tableName;\n    }\n\n    options = Utils.cloneDeep(options);\n    options.fields = attributes;\n\n    if (this.sequelize.dialect.name === 'sqlite') {\n      return SQLiteQueryInterface.addConstraint(this, tableName, options, rawTablename);\n    }\n    const sql = this.QueryGenerator.addConstraintQuery(tableName, options, rawTablename);\n    return this.sequelize.query(sql, options);\n  }\n\n  showConstraint(tableName, constraintName, options) {\n    const sql = this.QueryGenerator.showConstraintsQuery(tableName, constraintName);\n    return this.sequelize.query(sql, Object.assign({}, options, { type: QueryTypes.SHOWCONSTRAINTS }));\n  }\n\n  /**\n   * Remove a constraint from a table\n   *\n   * @param {string} tableName       Table name to drop constraint from\n   * @param {string} constraintName  Constraint name\n   * @param {Object} options         Query options\n   *\n   * @returns {Promise}\n   */\n  removeConstraint(tableName, constraintName, options) {\n    options = options || {};\n\n    switch (this.sequelize.options.dialect) {\n      case 'mysql':\n      case 'mariadb':\n        //does not support DROP CONSTRAINT. Instead DROP PRIMARY, FOREIGN KEY, INDEX should be used\n        return MySQLQueryInterface.removeConstraint(this, tableName, constraintName, options);\n      case 'sqlite':\n        return SQLiteQueryInterface.removeConstraint(this, tableName, constraintName, options);\n      default:\n        const sql = this.QueryGenerator.removeConstraintQuery(tableName, constraintName);\n        return this.sequelize.query(sql, options);\n    }\n  }\n\n  insert(instance, tableName, values, options) {\n    options = Utils.cloneDeep(options);\n    options.hasTrigger = instance && instance.constructor.options.hasTrigger;\n    const sql = this.QueryGenerator.insertQuery(tableName, values, instance && instance.constructor.rawAttributes, options);\n\n    options.type = QueryTypes.INSERT;\n    options.instance = instance;\n\n    return this.sequelize.query(sql, options).then(results => {\n      if (instance) results[0].isNewRecord = false;\n      return results;\n    });\n  }\n\n  /**\n   * Upsert\n   *\n   * @param {string} tableName    table to upsert on\n   * @param {Object} insertValues values to be inserted, mapped to field name\n   * @param {Object} updateValues values to be updated, mapped to field name\n   * @param {Object} where        various conditions\n   * @param {Model}  model        Model to upsert on\n   * @param {Object} options      query options\n   *\n   * @returns {Promise<boolean,?number>} Resolves an array with <created, primaryKey>\n   */\n  upsert(tableName, insertValues, updateValues, where, model, options) {\n    const wheres = [];\n    const attributes = Object.keys(insertValues);\n    let indexes = [];\n    let indexFields;\n\n    options = _.clone(options);\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine unique keys and indexes into one\n    indexes = _.map(model.uniqueKeys, value => {\n      return value.fields;\n    });\n\n    model._indexes.forEach(value => {\n      if (value.unique) {\n        // fields in the index may both the strings or objects with an attribute property - lets sanitize that\n        indexFields = value.fields.map(field => {\n          if (_.isPlainObject(field)) {\n            return field.attribute;\n          }\n          return field;\n        });\n        indexes.push(indexFields);\n      }\n    });\n\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.QueryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return this.sequelize.query(sql, options).then(result => {\n      switch (this.sequelize.options.dialect) {\n        case 'postgres':\n          return [result.created, result.primary_key];\n\n        case 'mssql':\n          return [\n            result.$action === 'INSERT',\n            result[model.primaryKeyField]\n          ];\n\n        // MySQL returns 1 for inserted, 2 for updated\n        // http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html.\n        case 'mysql':\n        case 'mariadb':\n          return [result === 1, undefined];\n\n        default:\n          return [result, undefined];\n      }\n    });\n  }\n\n  /**\n   * Insert multiple records into a table\n   *\n   * @example\n   * queryInterface.bulkInsert('roles', [{\n   *    label: 'user',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }, {\n   *    label: 'admin',\n   *    createdAt: new Date(),\n   *    updatedAt: new Date()\n   *  }]);\n   *\n   * @param {string} tableName   Table name to insert record to\n   * @param {Array}  records     List of records to insert\n   * @param {Object} options     Various options, please see Model.bulkCreate options\n   * @param {Object} attributes  Various attributes mapped by field name\n   *\n   * @returns {Promise}\n   */\n  bulkInsert(tableName, records, options, attributes) {\n    options = _.clone(options) || {};\n    options.type = QueryTypes.INSERT;\n\n    return this.sequelize.query(\n      this.QueryGenerator.bulkInsertQuery(tableName, records, options, attributes),\n      options\n    ).then(results => results[0]);\n  }\n\n  update(instance, tableName, values, identifier, options) {\n    options = _.clone(options || {});\n    options.hasTrigger = !!(instance && instance._modelOptions && instance._modelOptions.hasTrigger);\n\n    const sql = this.QueryGenerator.updateQuery(tableName, values, identifier, options, instance.constructor.rawAttributes);\n\n    options.type = QueryTypes.UPDATE;\n\n    options.instance = instance;\n    return this.sequelize.query(sql, options);\n  }\n\n  /**\n   * Update multiple records of a table\n   *\n   * @example\n   * queryInterface.bulkUpdate('roles', {\n   *     label: 'admin',\n   *   }, {\n   *     userType: 3,\n   *   },\n   * );\n   *\n   * @param {string} tableName     Table name to update\n   * @param {Object} values        Values to be inserted, mapped to field name\n   * @param {Object} identifier    A hash with conditions OR an ID as integer OR a string with conditions\n   * @param {Object} [options]     Various options, please see Model.bulkCreate options\n   * @param {Object} [attributes]  Attributes on return objects if supported by SQL dialect\n   *\n   * @returns {Promise}\n   */\n  bulkUpdate(tableName, values, identifier, options, attributes) {\n    options = Utils.cloneDeep(options);\n    if (typeof identifier === 'object') identifier = Utils.cloneDeep(identifier);\n\n    const sql = this.QueryGenerator.updateQuery(tableName, values, identifier, options, attributes);\n    const table = _.isObject(tableName) ? tableName : { tableName };\n    const model = _.find(this.sequelize.modelManager.models, { tableName: table.tableName });\n\n    options.type = QueryTypes.BULKUPDATE;\n    options.model = model;\n    return this.sequelize.query(sql, options);\n  }\n\n  delete(instance, tableName, identifier, options) {\n    const cascades = [];\n    const sql = this.QueryGenerator.deleteQuery(tableName, identifier, {}, instance.constructor);\n\n    options = _.clone(options) || {};\n\n    // Check for a restrict field\n    if (!!instance.constructor && !!instance.constructor.associations) {\n      const keys = Object.keys(instance.constructor.associations);\n      const length = keys.length;\n      let association;\n\n      for (let i = 0; i < length; i++) {\n        association = instance.constructor.associations[keys[i]];\n        if (association.options && association.options.onDelete &&\n          association.options.onDelete.toLowerCase() === 'cascade' &&\n          association.options.useHooks === true) {\n          cascades.push(association.accessors.get);\n        }\n      }\n    }\n\n    return Promise.each(cascades, cascade => {\n      return instance[cascade](options).then(instances => {\n        // Check for hasOne relationship with non-existing associate (\"has zero\")\n        if (!instances) {\n          return Promise.resolve();\n        }\n\n        if (!Array.isArray(instances)) instances = [instances];\n\n        return Promise.each(instances, instance => instance.destroy(options));\n      });\n    }).then(() => {\n      options.instance = instance;\n      return this.sequelize.query(sql, options);\n    });\n  }\n\n  /**\n   * Delete multiple records from a table\n   *\n   * @param {string}  tableName            table name from where to delete records\n   * @param {Object}  where                where conditions to find records to delete\n   * @param {Object}  [options]            options\n   * @param {boolean} [options.truncate]   Use truncate table command   \n   * @param {boolean} [options.cascade=false]         Only used in conjunction with TRUNCATE. Truncates  all tables that have foreign-key references to the named table, or to any tables added to the group due to CASCADE.\n   * @param {boolean} [options.restartIdentity=false] Only used in conjunction with TRUNCATE. Automatically restart sequences owned by columns of the truncated table.\n   * @param {Model}   [model]              Model\n   *\n   * @returns {Promise}\n   */\n  bulkDelete(tableName, where, options, model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, { limit: null });\n\n    if (options.truncate === true) {\n      return this.sequelize.query(\n        this.QueryGenerator.truncateTableQuery(tableName, options),\n        options\n      );\n    }\n\n    if (typeof identifier === 'object') where = Utils.cloneDeep(where);\n\n    return this.sequelize.query(\n      this.QueryGenerator.deleteQuery(tableName, where, options, model),\n      options\n    );\n  }\n\n  select(model, tableName, optionsArg) {\n    const options = Object.assign({}, optionsArg, { type: QueryTypes.SELECT, model });\n\n    return this.sequelize.query(\n      this.QueryGenerator.selectQuery(tableName, options, model),\n      options\n    );\n  }\n\n  increment(model, tableName, values, identifier, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.QueryGenerator.arithmeticQuery('+', tableName, values, identifier, options, options.attributes);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return this.sequelize.query(sql, options);\n  }\n\n  decrement(model, tableName, values, identifier, options) {\n    options = Utils.cloneDeep(options);\n\n    const sql = this.QueryGenerator.arithmeticQuery('-', tableName, values, identifier, options, options.attributes);\n\n    options.type = QueryTypes.UPDATE;\n    options.model = model;\n\n    return this.sequelize.query(sql, options);\n  }\n\n  rawSelect(tableName, options, attributeSelector, Model) {\n    options = Utils.cloneDeep(options);\n    options = _.defaults(options, {\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    });\n\n    const sql = this.QueryGenerator.selectQuery(tableName, options, Model);\n\n    if (attributeSelector === undefined) {\n      throw new Error('Please pass an attribute selector!');\n    }\n\n    return this.sequelize.query(sql, options).then(data => {\n      if (!options.plain) {\n        return data;\n      }\n\n      const result = data ? data[attributeSelector] : null;\n\n      if (!options || !options.dataType) {\n        return result;\n      }\n\n      const dataType = options.dataType;\n\n      if (dataType instanceof DataTypes.DECIMAL || dataType instanceof DataTypes.FLOAT) {\n        if (result !== null) {\n          return parseFloat(result);\n        }\n      }\n      if (dataType instanceof DataTypes.INTEGER || dataType instanceof DataTypes.BIGINT) {\n        return parseInt(result, 10);\n      }\n      if (dataType instanceof DataTypes.DATE) {\n        if (result !== null && !(result instanceof Date)) {\n          return new Date(result);\n        }\n      }\n      return result;\n    });\n  }\n\n  createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {\n    const sql = this.QueryGenerator.createTrigger(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray);\n    options = options || {};\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n    return Promise.resolve();\n  }\n\n  dropTrigger(tableName, triggerName, options) {\n    const sql = this.QueryGenerator.dropTrigger(tableName, triggerName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n    return Promise.resolve();\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName, options) {\n    const sql = this.QueryGenerator.renameTrigger(tableName, oldTriggerName, newTriggerName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Create an SQL function\n   *\n   * @example\n   * queryInterface.createFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'integer', name: 'param', direction: 'IN'}\n   *   ],\n   *   'integer',\n   *   'plpgsql',\n   *   'RETURN param + 1;',\n   *   [\n   *     'IMMUTABLE',\n   *     'LEAKPROOF'\n   *   ],\n   *   {\n   *    variables:\n   *      [\n   *        {type: 'integer', name: 'myVar', default: 100}\n   *      ],\n   *      force: true\n   *   };\n   * );\n   *\n   * @param {string}  functionName  Name of SQL function to create\n   * @param {Array}   params        List of parameters declared for SQL function\n   * @param {string}  returnType    SQL type of function returned value\n   * @param {string}  language      The name of the language that the function is implemented in\n   * @param {string}  body          Source code of function\n   * @param {Array}   optionsArray  Extra-options for creation\n   * @param {Object}  [options]     query options\n   * @param {boolean} options.force If force is true, any existing functions with the same parameters will be replaced. For postgres, this means using `CREATE OR REPLACE FUNCTION` instead of `CREATE FUNCTION`. Default is false\n   * @param {Array<Object>}   options.variables List of declared variables. Each variable should be an object with string fields `type` and `name`, and optionally having a `default` field as well.\n   *\n   * @returns {Promise}\n   */\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    const sql = this.QueryGenerator.createFunction(functionName, params, returnType, language, body, optionsArray, options);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Drop an SQL function\n   *\n   * @example\n   * queryInterface.dropFunction(\n   *   'someFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ]\n   * );\n   *\n   * @param {string} functionName Name of SQL function to drop\n   * @param {Array}  params       List of parameters declared for SQL function\n   * @param {Object} [options]    query options\n   *\n   * @returns {Promise}\n   */\n  dropFunction(functionName, params, options) {\n    const sql = this.QueryGenerator.dropFunction(functionName, params);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Rename an SQL function\n   *\n   * @example\n   * queryInterface.renameFunction(\n   *   'fooFunction',\n   *   [\n   *     {type: 'varchar', name: 'param1', direction: 'IN'},\n   *     {type: 'integer', name: 'param2', direction: 'INOUT'}\n   *   ],\n   *   'barFunction'\n   * );\n   *\n   * @param {string} oldFunctionName  Current name of function\n   * @param {Array}  params           List of parameters declared for SQL function\n   * @param {string} newFunctionName  New name of function\n   * @param {Object} [options]        query options\n   *\n   * @returns {Promise}\n   */\n  renameFunction(oldFunctionName, params, newFunctionName, options) {\n    const sql = this.QueryGenerator.renameFunction(oldFunctionName, params, newFunctionName);\n    options = options || {};\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n    return Promise.resolve();\n  }\n\n  // Helper methods useful for querying\n\n  /**\n   * Escape an identifier (e.g. a table or attribute name)\n   *\n   * @param {string} identifier identifier to quote\n   * @param {boolean} [force]   If force is true,the identifier will be quoted even if the `quoteIdentifiers` option is false.\n   *\n   * @private\n   */\n  quoteIdentifier(identifier, force) {\n    return this.QueryGenerator.quoteIdentifier(identifier, force);\n  }\n\n  quoteTable(identifier) {\n    return this.QueryGenerator.quoteTable(identifier);\n  }\n\n  /**\n   * Quote array of identifiers at once\n   *\n   * @param {string[]} identifiers array of identifiers to quote\n   * @param {boolean} [force]   If force is true,the identifier will be quoted even if the `quoteIdentifiers` option is false.\n   *\n   * @private\n   */\n  quoteIdentifiers(identifiers, force) {\n    return this.QueryGenerator.quoteIdentifiers(identifiers, force);\n  }\n\n  /**\n   * Escape a value (e.g. a string, number or date)\n   *\n   * @param {string} value string to escape\n   *\n   * @private\n   */\n  escape(value) {\n    return this.QueryGenerator.escape(value);\n  }\n\n  setIsolationLevel(transaction, value, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to set isolation level for a transaction without transaction object!');\n    }\n\n    if (transaction.parent || !value) {\n      // Not possible to set a separate isolation level for savepoints\n      return Promise.resolve();\n    }\n\n    options = Object.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n\n    const sql = this.QueryGenerator.setIsolationLevelQuery(value, {\n      parent: transaction.parent\n    });\n\n    if (!sql) return Promise.resolve();\n\n    return this.sequelize.query(sql, options);\n  }\n\n  startTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to start a transaction without transaction object!');\n    }\n\n    options = Object.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.QueryGenerator.startTransactionQuery(transaction);\n\n    return this.sequelize.query(sql, options);\n  }\n\n  deferConstraints(transaction, options) {\n    options = Object.assign({}, options, {\n      transaction: transaction.parent || transaction\n    });\n\n    const sql = this.QueryGenerator.deferConstraintsQuery(options);\n\n    if (sql) {\n      return this.sequelize.query(sql, options);\n    }\n\n    return Promise.resolve();\n  }\n\n  commitTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to commit a transaction without transaction object!');\n    }\n    if (transaction.parent) {\n      // Savepoints cannot be committed\n      return Promise.resolve();\n    }\n\n    options = Object.assign({}, options, {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    });\n\n    const sql = this.QueryGenerator.commitTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'commit';\n\n    return promise;\n  }\n\n  rollbackTransaction(transaction, options) {\n    if (!transaction || !(transaction instanceof Transaction)) {\n      throw new Error('Unable to rollback a transaction without transaction object!');\n    }\n\n    options = Object.assign({}, options, {\n      transaction: transaction.parent || transaction,\n      supportsSearchPath: false,\n      completesTransaction: true\n    });\n    options.transaction.name = transaction.parent ? transaction.name : undefined;\n    const sql = this.QueryGenerator.rollbackTransactionQuery(transaction);\n    const promise = this.sequelize.query(sql, options);\n\n    transaction.finished = 'rollback';\n\n    return promise;\n  }\n}\n\nmodule.exports = QueryInterface;\nmodule.exports.QueryInterface = QueryInterface;\nmodule.exports.default = QueryInterface;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}