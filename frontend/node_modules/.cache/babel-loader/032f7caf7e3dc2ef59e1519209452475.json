{"ast":null,"code":"'use strict';\n\nconst Toposort = require('toposort-class');\n\nconst _ = require('lodash');\n\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: 'name'\n    });\n    return this.models.find(model => model[options.attribute] === against);\n  }\n\n  get all() {\n    return this.models;\n  }\n  /**\n   * Iterate over Models in an order suitable for e.g. creating tables.\n   * Will take foreign key constraints into account so that dependencies are visited before dependents.\n   *\n   * @param {Function} iterator method to execute on each model\n   * @param {Object} [options] iterator options\n   * @private\n   */\n\n\n  forEachModel(iterator, options) {\n    const models = {};\n    const sorter = new Toposort();\n    let sorted;\n    let dep;\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      models[tableName] = model;\n\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep => tableName !== dep);\n      sorter.add(tableName, deps);\n    }\n\n    sorted = sorter.sort();\n\n    if (options.reverse) {\n      sorted = sorted.reverse();\n    }\n\n    for (const name of sorted) {\n      iterator(models[name], name);\n    }\n  }\n\n}\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;","map":{"version":3,"names":["Toposort","require","_","ModelManager","constructor","sequelize","models","addModel","model","push","name","removeModel","modelToRemove","filter","getModel","against","options","defaults","attribute","find","all","forEachModel","iterator","sorter","sorted","dep","reverse","deps","tableName","getTableName","isObject","schema","attrName","rawAttributes","Object","prototype","hasOwnProperty","call","references","add","sort","module","exports","default"],"sources":["/home/brian/node_modules/sequelize/lib/model-manager.js"],"sourcesContent":["'use strict';\n\nconst Toposort = require('toposort-class');\nconst _ = require('lodash');\n\nclass ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(against, options) {\n    options = _.defaults(options || {}, {\n      attribute: 'name'\n    });\n\n    return this.models.find(model => model[options.attribute] === against);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  /**\n   * Iterate over Models in an order suitable for e.g. creating tables.\n   * Will take foreign key constraints into account so that dependencies are visited before dependents.\n   *\n   * @param {Function} iterator method to execute on each model\n   * @param {Object} [options] iterator options\n   * @private\n   */\n  forEachModel(iterator, options) {\n    const models = {};\n    const sorter = new Toposort();\n    let sorted;\n    let dep;\n\n    options = _.defaults(options || {}, {\n      reverse: true\n    });\n\n    for (const model of this.models) {\n      let deps = [];\n      let tableName = model.getTableName();\n\n      if (_.isObject(tableName)) {\n        tableName = `${tableName.schema}.${tableName.tableName}`;\n      }\n\n      models[tableName] = model;\n\n      for (const attrName in model.rawAttributes) {\n        if (Object.prototype.hasOwnProperty.call(model.rawAttributes, attrName)) {\n          const attribute = model.rawAttributes[attrName];\n\n          if (attribute.references) {\n            dep = attribute.references.model;\n\n            if (_.isObject(dep)) {\n              dep = `${dep.schema}.${dep.tableName}`;\n            }\n\n            deps.push(dep);\n          }\n        }\n      }\n\n      deps = deps.filter(dep => tableName !== dep);\n\n      sorter.add(tableName, deps);\n    }\n\n    sorted = sorter.sort();\n    if (options.reverse) {\n      sorted = sorted.reverse();\n    }\n    for (const name of sorted) {\n      iterator(models[name], name);\n    }\n  }\n}\n\nmodule.exports = ModelManager;\nmodule.exports.ModelManager = ModelManager;\nmodule.exports.default = ModelManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}