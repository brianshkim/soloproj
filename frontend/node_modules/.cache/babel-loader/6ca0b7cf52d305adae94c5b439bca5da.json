{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst SqlString = require('../../sql-string');\n\nconst QueryTypes = require('../../query-types');\n\nconst Dot = require('dottie');\n\nconst deprecations = require('../../utils/deprecations');\n\nconst uuid = require('uuid').v4;\n\nclass AbstractQuery {\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = Object.assign({\n      plain: false,\n      raw: false,\n      // eslint-disable-next-line no-console\n      logging: console.log\n    }, options || {});\n    this.checkLoggingOption();\n  }\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   *\n   * @param {string} sql\n   * @param {Object|Array} values\n   * @param {string} dialect\n   * @param {Function} [replacementFunc]\n   * @param {Object} [options]\n   * @private\n   */\n\n\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n\n          return undefined;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n\n      replacementFunc = (match, key, values, timeZone, dialect, options) => {\n        if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n          return match;\n        }\n\n        return undefined;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n\n      if (replVal === undefined) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n\n      return replVal;\n    });\n    return [sql, []];\n  }\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @private\n   */\n\n\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @private\n   */\n\n\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging(); // eslint-disable-next-line no-console\n\n      this.options.logging = console.log;\n    }\n  }\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @returns {string} The field name.\n   * @private\n   */\n\n\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : 'Must be unique';\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, ''))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    } // is insert query if sql contains insert into\n\n\n    result = result && this.sql.toLowerCase().startsWith('insert into'); // is insert query if no results are passed or if the result has the inserted id\n\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField())); // is insert query if no metadata are passed or if the metadata has the inserted id\n\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => _.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null; // Map raw fields to names if a mapping is provided\n\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined && name !== field) {\n          result[name] = result[field];\n          delete result[field];\n        }\n\n        return result;\n      }, result));\n    } // Raw queries\n\n\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (Object.prototype.hasOwnProperty.call(result, key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      }); // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      }); // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    } // return the first real model instance if options.plain is set (e.g. Model.find)\n\n\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith('show');\n    result = result || this.sql.toLowerCase().startsWith('describe');\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith('call');\n  }\n  /**\n   * @param {string} sql\n   * @param {Function} debugContext\n   * @param {Array|Object} parameters\n   * @protected\n   * @returns {Function} A function to call after the query was completed.\n   */\n\n\n  _logQuery(sql, debugContext, parameters) {\n    const {\n      connection,\n      options\n    } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = '';\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(';') ? '' : ';';\n      let paramStr;\n\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p => JSON.stringify(p)).join(', ');\n      } else {\n        paramStr = JSON.stringify(parameters);\n      }\n\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   *\n   * @param {Array} rows\n   * @param {Object} includeOptions\n   * @param {Object} options\n   * @private\n   */\n\n\n  static _groupJoinData(rows, includeOptions, options) {\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    } // Generic looping\n\n\n    let i;\n    let length;\n    let $i;\n    let $length; // Row specific looping\n\n    let rowsI;\n    let row;\n    const rowsLength = rows.length; // Key specific looping\n\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting; // If we don't have to deduplicate we can pre-allocate the resulting array\n\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {}; // Result variables for the respective functions\n\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent; // Map each key to an include option\n\n    let previousPiece;\n\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n\n        includeMap[previousPiece] = $current;\n      }\n    }; // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n\n\n    const keyPrefixStringMemo = {};\n\n    const keyPrefixString = (key, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n\n      return memo[key];\n    }; // Removes the prefix from a key ('id' for 'User.Results.id')\n\n\n    const removeKeyPrefixMemo = {};\n\n    const removeKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n\n      return removeKeyPrefixMemo[key];\n    }; // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n\n\n    const keyPrefixMemo = {};\n\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n\n      return keyPrefixMemo[key];\n    }; // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n\n\n    const lastKeyPrefixMemo = {};\n\n    const lastKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n\n      return lastKeyPrefixMemo[key];\n    };\n\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n\n      uniqueKeyAttributes = uniqueKeyAttributes.result(`${uniqueKeyAttributes.findKey()}.fields`).map(field => _.findKey(model.attributes, chr => chr.field === field)).value();\n      return uniqueKeyAttributes;\n    };\n\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI]; // Keys are the same for all rows, so only need to compute them on the first row\n\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false; // Compute top level hash key (this is usually just the primary key values)\n\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        } else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        } else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI]; // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key); // On the first row we compute the includeMap\n\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        } // End of key set\n\n\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                } else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            } // Reset values\n\n\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        } // End of iteration, set value and set prev values (for next iteration)\n\n\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            } else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;","map":{"version":3,"names":["_","require","SqlString","QueryTypes","Dot","deprecations","uuid","v4","AbstractQuery","constructor","connection","sequelize","options","instance","model","Object","assign","plain","raw","logging","console","log","checkLoggingOption","formatBindParameters","sql","values","dialect","replacementFunc","undefined","skipValueReplace","match","key","timeZone","escape","origReplacementFunc","list","Array","isArray","replace","skipUnescape","replVal","Error","run","noTrueLogging","getInsertIdField","getUniqueConstraintErrorMessage","field","message","keys","uniqueKeys","fields","includes","msg","isRawQuery","type","RAW","isVersionQuery","VERSION","isUpsertQuery","UPSERT","isInsertQuery","results","metaData","result","INSERT","toLowerCase","startsWith","prototype","hasOwnProperty","call","handleInsertQuery","autoIncrementAttribute","id","isShowTablesQuery","SHOWTABLES","handleShowTablesQuery","flatten","map","resultSet","isShowIndexesQuery","SHOWINDEXES","isShowConstraintsQuery","SHOWCONSTRAINTS","isDescribeQuery","DESCRIBE","isSelectQuery","SELECT","isBulkUpdateQuery","BULKUPDATE","isBulkDeleteQuery","BULKDELETE","isForeignKeysQuery","FOREIGNKEYS","isUpdateQuery","UPDATE","handleSelectQuery","fieldMap","reduce","name","o","nest","transform","hasJoin","_groupJoinData","includeMap","includeNames","checkExisting","hasMultiAssociation","bulkBuild","isNewRecord","include","includeValidated","attributes","originalAttributes","length","isShowOrDescribeQuery","isCallQuery","_logQuery","debugContext","parameters","benchmark","logQueryParameters","startTime","Date","now","logParameter","delimiter","endsWith","paramStr","p","JSON","stringify","join","fmt","afterMsg","rows","includeOptions","i","$i","$length","rowsI","row","rowsLength","keyI","keyLength","prevKey","topValues","topExists","itemHash","parentHash","topHash","resultMap","$keyPrefix","$keyPrefixString","$prevKeyPrefixString","$prevKeyPrefix","$lastKeyPrefix","$current","$parent","previousPiece","buildIncludeMap","piece","keyPrefixStringMemo","keyPrefixString","memo","substr","lastIndexOf","removeKeyPrefixMemo","removeKeyPrefix","index","keyPrefixMemo","keyPrefix","prefixString","split","lastKeyPrefixMemo","lastKeyPrefix","prefix","getUniqueKeyAttributes","uniqueKeyAttributes","chain","findKey","chr","value","obj","Buffer","toString","primaryKeyAttributes","isEmpty","forEach","association","isSingleAssociation","push","module","exports","default"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/abstract/query.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst SqlString = require('../../sql-string');\nconst QueryTypes = require('../../query-types');\nconst Dot = require('dottie');\nconst deprecations = require('../../utils/deprecations');\nconst uuid = require('uuid').v4;\n\nclass AbstractQuery {\n\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = Object.assign({\n      plain: false,\n      raw: false,\n      // eslint-disable-next-line no-console\n      logging: console.log\n    }, options || {});\n    this.checkLoggingOption();\n  }\n\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   *\n   * @param {string} sql\n   * @param {Object|Array} values\n   * @param {string} dialect\n   * @param {Function} [replacementFunc]\n   * @param {Object} [options]\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n          return undefined;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n      replacementFunc = (match, key, values, timeZone, dialect, options) => {\n        if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n          return match;\n        }\n        return undefined;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n\n    sql = sql.replace(/\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n      if (replVal === undefined) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @private\n   */\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @private\n   */\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      // eslint-disable-next-line no-console\n      this.options.logging = console.log;\n    }\n  }\n\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @returns {string} The field name.\n   * @private\n   */\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : 'Must be unique';\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, ''))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    // is insert query if sql contains insert into\n    result = result && this.sql.toLowerCase().startsWith('insert into');\n\n    // is insert query if no results are passed or if the result has the inserted id\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n\n    // is insert query if no metadata are passed or if the metadata has the inserted id\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => _.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n\n    // Map raw fields to names if a mapping is provided\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined && name !== field) {\n          result[name] = result[field];\n          delete result[field];\n        }\n        return result;\n      }, result));\n    }\n\n    // Raw queries\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (Object.prototype.hasOwnProperty.call(result, key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n\n    // return the first real model instance if options.plain is set (e.g. Model.find)\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('show');\n    result = result || this.sql.toLowerCase().startsWith('describe');\n\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith('call');\n  }\n\n  /**\n   * @param {string} sql\n   * @param {Function} debugContext\n   * @param {Array|Object} parameters\n   * @protected\n   * @returns {Function} A function to call after the query was completed.\n   */\n  _logQuery(sql, debugContext, parameters) {\n    const { connection, options } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = '';\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(';') ? '' : ';';\n      let paramStr;\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p=>JSON.stringify(p)).join(', ');\n      } else {\n        paramStr = JSON.stringify(parameters);\n      }\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   *\n   * @param {Array} rows\n   * @param {Object} includeOptions\n   * @param {Object} options\n   * @private\n   */\n  static _groupJoinData(rows, includeOptions, options) {\n\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    }\n\n    // Generic looping\n    let i;\n    let length;\n    let $i;\n    let $length;\n    // Row specific looping\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    // Key specific looping\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    // If we don't have to deduplicate we can pre-allocate the resulting array\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    // Result variables for the respective functions\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    // Map each key to an include option\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n      return memo[key];\n    };\n    // Removes the prefix from a key ('id' for 'User.Results.id')\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key];\n    };\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n    const keyPrefixMemo = {};\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key];\n    };\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n      return lastKeyPrefixMemo[key];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes = uniqueKeyAttributes\n        .result(`${uniqueKeyAttributes.findKey()}.fields`)\n        .map(field => _.findKey(model.attributes, chr => chr.field === field))\n        .value();\n\n      return uniqueKeyAttributes;\n    };\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      // Keys are the same for all rows, so only need to compute them on the first row\n      if (rowsI === 0) {\n        keys = Object.keys(row);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n\n        // Compute top level hash key (this is usually just the primary key values)\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        }\n        else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        }\n        else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n\n        // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        // On the first row we compute the includeMap\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        // End of key set\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                }\n                else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                }\n                else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n\n            // Reset values\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n\n        // End of iteration, set value and set prev values (for next iteration)\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            }\n            else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            }\n            else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}