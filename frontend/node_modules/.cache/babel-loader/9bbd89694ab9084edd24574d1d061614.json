{"ast":null,"code":"import { ValidationError } from \"../utils/validationError\";\nimport { csrfFetch } from './csrf';\nconst LOAD = \"playlist/LOAD\";\nconst ADD = \"playlist/ADD\";\nconst ADD_SONG = \"playlist/ADDSONG\";\n\nconst load = list => ({\n  type: LOAD,\n  list\n});\n\nconst addPlaylist = playlist => {\n  return {\n    type: ADD,\n    playlist: playlist\n  };\n};\n\nexport const getPlaylists = id => async dispatch => {\n  const response = await fetch(`/api/playlists`);\n\n  if (response.ok) {\n    const list = await response.json();\n    dispatch(load(list));\n    return list;\n  }\n};\nexport const createPlaylist = data => async dispatch => {\n  console.log(\"TOP OF THUNK IN STORE - data -> \", data);\n\n  try {\n    const response = await csrfFetch(`/api/playlists`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      let error;\n\n      if (response.status === 422) {\n        error = await response.json();\n        throw new ValidationError(error.errors, response.statusText);\n      } else {\n        let errorJSON;\n        error = await response.text();\n\n        try {\n          // Check if the error is JSON, i.e., from the Pokemon server. If so,\n          // don't throw error yet or it will be caught by the following catch\n          errorJSON = JSON.parse(error);\n        } catch {\n          // Case if server could not be reached\n          throw new Error(error);\n        }\n\n        throw new Error(`${errorJSON.title}: ${errorJSON.message}`);\n      }\n    }\n\n    const playlist = await response.json();\n    dispatch(addPlaylist(playlist));\n    return playlist;\n  } catch (error) {\n    throw error;\n  }\n};\nconst initialState = {\n  list: []\n};\n\nconst sortList = list => {\n  return list.sort((a, b) => {\n    return a - b;\n  }).map(song => song.id);\n};\n\nconst PlaylistReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOAD:\n      const Playlists = {};\n      action.list.forEach(playlist => {\n        Playlists[playlist.id] = playlist;\n      });\n      return { ...Playlists,\n        ...state,\n        list: sortList(action.list)\n      };\n\n    case ADD:\n      console.log('IN REDUCER ADD ONE CASE - ACTION -> ', action);\n\n      if (!state[action.playlist.id]) {\n        const newState = { ...state,\n          [action.playlist.id]: action.playlist\n        };\n        const playlistList = newState.list.map(id => newState[id]);\n        playlistList.push(action.playlist);\n        newState.list = sortList(playlistList);\n        return newState;\n      }\n\n      return { ...state,\n        [action.playlist.id]: { ...state[action.playlist.id],\n          ...action.playlist\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = PlaylistReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistReducer\");","map":{"version":3,"names":["ValidationError","csrfFetch","LOAD","ADD","ADD_SONG","load","list","type","addPlaylist","playlist","getPlaylists","id","dispatch","response","fetch","ok","json","createPlaylist","data","console","log","method","headers","body","JSON","stringify","error","status","errors","statusText","errorJSON","text","parse","Error","title","message","initialState","sortList","sort","a","b","map","song","PlaylistReducer","state","action","Playlists","forEach","newState","playlistList","push"],"sources":["/home/brian/w15/practice-for-week-15-react-redux-authenticate-me-long-practice-main/authenticate-me/frontend/src/store/playlist.js"],"sourcesContent":["import { ValidationError } from \"../utils/validationError\"\nimport { csrfFetch } from './csrf';\nconst LOAD = \"playlist/LOAD\";\nconst ADD = \"playlist/ADD\";\nconst ADD_SONG = \"playlist/ADDSONG\"\n\n\n\nconst load = (list) => ({\n    type: LOAD,\n    list,\n  });\n\n\n  const addPlaylist= (playlist) => {\n\n    return {\n      type: ADD,\n      playlist:playlist,\n    };\n  };\n\n  export const getPlaylists = (id) => async (dispatch) => {\n    const response = await fetch(`/api/playlists`);\n\n    if (response.ok) {\n      const list = await response.json();\n      dispatch(load(list));\n      return list;\n    }\n  };\n\n\n  export const createPlaylist = (data) => async (dispatch) => {\n    console.log(\"TOP OF THUNK IN STORE - data -> \", data);\n    try {\n      const response = await csrfFetch(`/api/playlists`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n\n\n    if (!response.ok) {\n        let error;\n        if (response.status === 422) {\n          error = await response.json();\n          throw new ValidationError(error.errors, response.statusText);\n        } else {\n          let errorJSON;\n          error = await response.text();\n          try {\n            // Check if the error is JSON, i.e., from the Pokemon server. If so,\n            // don't throw error yet or it will be caught by the following catch\n            errorJSON = JSON.parse(error);\n          } catch {\n            // Case if server could not be reached\n            throw new Error(error);\n          }\n          throw new Error(`${errorJSON.title}: ${errorJSON.message}`);\n        }\n      }\n      const playlist = await response.json();\n      dispatch(addPlaylist(playlist));\n      return playlist;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const initialState = {list:[]}\n  const sortList = (list) => {\n    return list\n      .sort((a, b) => {\n        return a - b;\n      })\n      .map((song) => song.id);\n  };\n\n\n  const PlaylistReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOAD:\n            const Playlists = {};\n            action.list.forEach((playlist) => {\n              Playlists[playlist.id] = playlist\n            });\n            return {\n              ...Playlists,\n              ...state,\n              list: sortList(action.list),\n            };\n            case ADD:\n                console.log('IN REDUCER ADD ONE CASE - ACTION -> ', action);\n                if (!state[action.playlist.id]) {\n                  const newState = {\n                    ...state,\n                    [action.playlist.id]: action.playlist,\n                  };\n                  const playlistList = newState.list.map((id) => newState[id]);\n                 playlistList.push(action.playlist);\n                  newState.list = sortList(playlistList);\n                  return newState;\n                }\n                return {\n                  ...state,\n                  [action.playlist.id]: {\n                    ...state[action.playlist.id],\n                    ...action.playlist,\n                  },\n                };\n\n        default:\n            return state;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}