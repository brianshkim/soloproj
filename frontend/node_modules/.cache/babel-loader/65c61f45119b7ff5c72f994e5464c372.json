{"ast":null,"code":"'use strict';\n\nconst Promise = require('../../promise');\n\nconst AbstractQuery = require('../abstract/query');\n\nconst sequelizeErrors = require('../../errors');\n\nconst parserStore = require('../parserStore')('mssql');\n\nconst _ = require('lodash');\n\nconst {\n  logger\n} = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = {\n      type: TYPES.VarChar,\n      typeOptions: {}\n    };\n    paramType.type = TYPES.NVarChar;\n\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric; //Default to a reasonable numeric precision/scale pending more sophisticated logic\n\n        paramType.typeOptions = {\n          precision: 30,\n          scale: getScale(value)\n        };\n      }\n    }\n\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n\n    return paramType;\n  }\n\n  _run(connection, sql, parameters) {\n    this.sql = sql;\n    const {\n      options\n    } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    return new Promise((resolve, reject) => {\n      const handleTransaction = err => {\n        if (err) {\n          reject(this.formatError(err));\n          return;\n        }\n\n        resolve(this.formatResults());\n      }; // TRANSACTION SUPPORT\n\n\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(handleTransaction, options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(handleTransaction);\n      }\n\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(handleTransaction, options.transaction.name);\n      }\n\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(handleTransaction, options.transaction.name);\n      }\n\n      const results = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => {\n        complete();\n\n        if (err) {\n          err.sql = sql;\n          err.parameters = parameters;\n          reject(this.formatError(err));\n        } else {\n          resolve(this.formatResults(results, rowCount));\n        }\n      });\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        const row = {};\n\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n\n          row[column.metadata.colName] = value;\n        }\n\n        results.push(row);\n      });\n      connection.execSql(request);\n    });\n  }\n\n  run(sql, parameters) {\n    return Promise.using(this.connection.lock(), connection => this._run(connection, sql, parameters));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n\n      return undefined;\n    };\n\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam];\n  }\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n\n\n  formatResults(data, rowCount) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          // NOTE: super contrived. This just passes the newly added query-interface\n          //       test returning only the PK. There isn't a way in MSSQL to identify\n          //       that a given return value is the PK, and we have no schema information\n          //       because there was no calling Model.\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (result[_result.Name].type.includes('CHAR') && _result.Length) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n\n    if (this.isUpsertQuery()) {\n      this.handleInsertQuery(data);\n      return this.instance || data[0];\n    }\n\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n\n    if (this.isBulkDeleteQuery()) {\n      return data[0] && data[0].AFFECTEDROWS;\n    }\n\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, rowCount];\n    }\n\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n\n    if (this.isRawQuery()) {\n      // MSSQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n\n      return constraint;\n    });\n  }\n\n  formatError(err) {\n    let match;\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '((.|\\s)*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      if (match[4]) {\n        const values = match[4].split(',').map(part => part.trim());\n\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[4];\n        }\n      }\n\n      const errors = [];\n\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), 'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n        field, value, this.instance, 'not_unique'));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        parent: err,\n        fields\n      });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) || err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err);\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== undefined) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n    }\n  }\n\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"names":["Promise","require","AbstractQuery","sequelizeErrors","parserStore","_","logger","debug","debugContext","getScale","aNum","Number","isFinite","e","Math","round","log10","Query","getInsertIdField","getSQLTypeFromJsType","value","TYPES","paramType","type","VarChar","typeOptions","NVarChar","isInteger","Int","BigInt","Numeric","precision","scale","Buffer","isBuffer","VarBinary","_run","connection","sql","parameters","options","complete","_logQuery","resolve","reject","handleTransaction","err","formatError","formatResults","startsWith","beginTransaction","transaction","name","lib","ISOLATION_LEVEL","isolationLevel","commitTransaction","rollbackTransaction","saveTransaction","results","request","Request","rowCount","forOwn","key","addParameter","on","columns","row","column","typeid","metadata","id","parse","get","colName","push","execSql","run","using","lock","formatBindParameters","values","dialect","bindParam","replacementFunc","match","undefined","data","result","instance","isInsertQuery","handleInsertQuery","plain","record","Object","keys","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Default","replace","Name","Type","toUpperCase","allowNull","IsNull","defaultValue","primaryKey","Constraint","autoIncrement","IsIdentity","comment","Comment","includes","Length","isSelectQuery","handleSelectQuery","isShowIndexesQuery","handleShowIndexesQuery","isUpsertQuery","isCallQuery","isBulkUpdateQuery","returning","isBulkDeleteQuery","AFFECTEDROWS","isVersionQuery","version","isForeignKeysQuery","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","map","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","slice","constraint","camelCase","message","length","fields","uniqueKey","model","uniqueKeys","msg","split","part","trim","zipObject","errors","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","table","UnknownConstraintError","DatabaseError","isShowOrDescribeQuery","toLowerCase","reduce","acc","item","index_name","index_keys","forEach","columnName","attribute","order","collate","primary","unique","index_description","metaData","autoIncrementAttribute","autoIncrementAttributeAlias","prototype","hasOwnProperty","call","rawAttributes","dataValues","attr","find","fieldName","module","exports","default"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/mssql/query.js"],"sourcesContent":["'use strict';\n\nconst Promise = require('../../promise');\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('mssql');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:mssql');\n\nfunction getScale(aNum) {\n  if (!Number.isFinite(aNum)) return 0;\n  let e = 1;\n  while (Math.round(aNum * e) / e !== aNum) e *= 10;\n  return Math.log10(e);\n}\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value, TYPES) {\n    const paramType = { type: TYPES.VarChar, typeOptions: {} };\n    paramType.type = TYPES.NVarChar;\n    if (typeof value === 'number') {\n      if (Number.isInteger(value)) {\n        if (value >= -2147483648 && value <= 2147483647) {\n          paramType.type = TYPES.Int;\n        } else {\n          paramType.type = TYPES.BigInt;\n        }\n      } else {\n        paramType.type = TYPES.Numeric;\n        //Default to a reasonable numeric precision/scale pending more sophisticated logic\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\n      }\n    }\n    if (Buffer.isBuffer(value)) {\n      paramType.type = TYPES.VarBinary;\n    }\n    return paramType;\n  }\n\n  _run(connection, sql, parameters) {\n    this.sql = sql;\n    const { options } = this;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    return new Promise((resolve, reject) => {\n      const handleTransaction = err => {\n        if (err) {\n          reject(this.formatError(err));\n          return;\n        }\n        resolve(this.formatResults());\n      };\n      // TRANSACTION SUPPORT\n      if (sql.startsWith('BEGIN TRANSACTION')) {\n        return connection.beginTransaction(handleTransaction, options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\n      }\n      if (sql.startsWith('COMMIT TRANSACTION')) {\n        return connection.commitTransaction(handleTransaction);\n      }\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\n        return connection.rollbackTransaction(handleTransaction, options.transaction.name);\n      }\n      if (sql.startsWith('SAVE TRANSACTION')) {\n        return connection.saveTransaction(handleTransaction, options.transaction.name);\n      }\n      const results = [];\n      const request = new connection.lib.Request(sql, (err, rowCount) => {\n\n        complete();\n\n        if (err) {\n          err.sql = sql;\n          err.parameters = parameters;\n          reject(this.formatError(err));\n        } else {\n          resolve(this.formatResults(results, rowCount));\n        }\n      });\n\n      if (parameters) {\n        _.forOwn(parameters, (value, key) => {\n          const paramType = this.getSQLTypeFromJsType(value, connection.lib.TYPES);\n          request.addParameter(key, paramType.type, value, paramType.typeOptions);\n        });\n      }\n\n      request.on('row', columns => {\n        const row = {};\n        for (const column of columns) {\n          const typeid = column.metadata.type.id;\n          const parse = parserStore.get(typeid);\n          let value = column.value;\n\n          if (value !== null & !!parse) {\n            value = parse(value);\n          }\n          row[column.metadata.colName] = value;\n        }\n\n        results.push(row);\n      });\n\n      connection.execSql(request);\n    });\n  }\n\n  run(sql, parameters) {\n    return Promise.using(this.connection.lock(), connection => this._run(connection, sql, parameters));\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return `@${key}`;\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n\n    return [sql, bindParam];\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {number} rowCount\n   * @private\n   * @example\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   */\n  formatResults(data, rowCount) {\n    let result = this.instance;\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          // NOTE: super contrived. This just passes the newly added query-interface\n          //       test returning only the PK. There isn't a way in MSSQL to identify\n          //       that a given return value is the PK, and we have no schema information\n          //       because there was no calling Model.\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'YES' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\n          autoIncrement: _result.IsIdentity === 1,\n          comment: _result.Comment\n        };\n\n        if (\n          result[_result.Name].type.includes('CHAR')\n          && _result.Length\n        ) {\n          if (_result.Length === -1) {\n            result[_result.Name].type += '(MAX)';\n          } else {\n            result[_result.Name].type += `(${_result.Length})`;\n          }\n        }\n\n      }\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isUpsertQuery()) {\n      this.handleInsertQuery(data);\n      return this.instance || data[0];\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery()) {\n      if (this.options.returning) {\n        return this.handleSelectQuery(data);\n      }\n\n      return rowCount;\n    }\n    if (this.isBulkDeleteQuery()) {\n      return data[0] && data[0].AFFECTEDROWS;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, rowCount];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return this.handleShowConstraintsQuery(data);\n    }\n    if (this.isRawQuery()) {\n      // MSSQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    //Convert snake_case keys to camelCase as it's generated by stored procedure\n    return data.slice(1).map(result => {\n      const constraint = {};\n      for (const key in result) {\n        constraint[_.camelCase(key)] = result[key];\n      }\n      return constraint;\n    });\n  }\n\n  formatError(err) {\n    let match;\n\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '((.|\\s)*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\n    if (match && match.length > 1) {\n      let fields = {};\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\n      let message = 'Validation error';\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      if (match[4]) {\n        const values = match[4].split(',').map(part => part.trim());\n        if (uniqueKey) {\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[match[1]] = match[4];\n        }\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n    }\n\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./) ||\n      err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./) ||\n      err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err\n      });\n    }\n\n    match = err.message.match(/Could not drop constraint. See previous errors./);\n    if (match && match.length > 0) {\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)\\]/i);\n      constraint = constraint ? constraint[1] : undefined;\n      let table = err.sql.match(/table \\[(.+?)\\]/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[1],\n        constraint,\n        table,\n        parent: err\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err);\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n\n  isShowIndexesQuery() {\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.index_name in acc)) {\n        acc[item.index_name] = item;\n        item.fields = [];\n      }\n\n      item.index_keys.split(',').forEach(column => {\n        let columnName = column.trim();\n        if (columnName.includes('(-)')) {\n          columnName = columnName.replace('(-)', '');\n        }\n\n        acc[item.index_name].fields.push({\n          attribute: columnName,\n          length: undefined,\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\n          collate: undefined\n        });\n      });\n      delete item.index_keys;\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.index_name.toLowerCase().startsWith('pk'),\n      fields: item.fields,\n      name: item.index_name,\n      tableName: undefined,\n      unique: item.index_description.toLowerCase().includes('unique'),\n      type: undefined\n    }));\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n        this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n\n      this.instance[autoIncrementAttribute] = id;\n\n      if (this.instance.dataValues) {\n        for (const key in results[0]) {\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\n            const record = results[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}