{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst NOOP = function () {};\n\nconst removeWhere = (list, predicate) => {\n  const i = list.findIndex(predicate);\n  return i === -1 ? undefined : list.splice(i, 1)[0];\n};\n\nclass IdleItem {\n  constructor(client, idleListener, timeoutId) {\n    this.client = client;\n    this.idleListener = idleListener;\n    this.timeoutId = timeoutId;\n  }\n\n}\n\nclass PendingItem {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n}\n\nfunction throwOnDoubleRelease() {\n  throw new Error('Release called on client which has already been released to the pool.');\n}\n\nfunction promisify(Promise, callback) {\n  if (callback) {\n    return {\n      callback: callback,\n      result: undefined\n    };\n  }\n\n  let rej;\n  let res;\n\n  const cb = function (err, client) {\n    err ? rej(err) : res(client);\n  };\n\n  const result = new Promise(function (resolve, reject) {\n    res = resolve;\n    rej = reject;\n  });\n  return {\n    callback: cb,\n    result: result\n  };\n}\n\nfunction makeIdleListener(pool, client) {\n  return function idleListener(err) {\n    err.client = client;\n    client.removeListener('error', idleListener);\n    client.on('error', () => {\n      pool.log('additional client error after disconnection due to error', err);\n    });\n\n    pool._remove(client); // TODO - document that once the pool emits an error\n    // the client has already been closed & purged and is unusable\n\n\n    pool.emit('error', err, client);\n  };\n}\n\nclass Pool extends EventEmitter {\n  constructor(options, Client) {\n    super();\n    this.options = Object.assign({}, options);\n\n    if (options != null && 'password' in options) {\n      // \"hiding\" the password so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options, 'password', {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: options.password\n      });\n    }\n\n    if (options != null && options.ssl && options.ssl.key) {\n      // \"hiding\" the ssl->key so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options.ssl, 'key', {\n        enumerable: false\n      });\n    }\n\n    this.options.max = this.options.max || this.options.poolSize || 10;\n    this.options.maxUses = this.options.maxUses || Infinity;\n    this.options.allowExitOnIdle = this.options.allowExitOnIdle || false;\n    this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0;\n\n    this.log = this.options.log || function () {};\n\n    this.Client = this.options.Client || Client || require('pg').Client;\n    this.Promise = this.options.Promise || global.Promise;\n\n    if (typeof this.options.idleTimeoutMillis === 'undefined') {\n      this.options.idleTimeoutMillis = 10000;\n    }\n\n    this._clients = [];\n    this._idle = [];\n    this._expired = new WeakSet();\n    this._pendingQueue = [];\n    this._endCallback = undefined;\n    this.ending = false;\n    this.ended = false;\n  }\n\n  _isFull() {\n    return this._clients.length >= this.options.max;\n  }\n\n  _pulseQueue() {\n    this.log('pulse queue');\n\n    if (this.ended) {\n      this.log('pulse queue ended');\n      return;\n    }\n\n    if (this.ending) {\n      this.log('pulse queue on ending');\n\n      if (this._idle.length) {\n        this._idle.slice().map(item => {\n          this._remove(item.client);\n        });\n      }\n\n      if (!this._clients.length) {\n        this.ended = true;\n\n        this._endCallback();\n      }\n\n      return;\n    } // if we don't have any waiting, do nothing\n\n\n    if (!this._pendingQueue.length) {\n      this.log('no queued requests');\n      return;\n    } // if we don't have any idle clients and we have no more room do nothing\n\n\n    if (!this._idle.length && this._isFull()) {\n      return;\n    }\n\n    const pendingItem = this._pendingQueue.shift();\n\n    if (this._idle.length) {\n      const idleItem = this._idle.pop();\n\n      clearTimeout(idleItem.timeoutId);\n      const client = idleItem.client;\n      client.ref && client.ref();\n      const idleListener = idleItem.idleListener;\n      return this._acquireClient(client, pendingItem, idleListener, false);\n    }\n\n    if (!this._isFull()) {\n      return this.newClient(pendingItem);\n    }\n\n    throw new Error('unexpected condition');\n  }\n\n  _remove(client) {\n    const removed = removeWhere(this._idle, item => item.client === client);\n\n    if (removed !== undefined) {\n      clearTimeout(removed.timeoutId);\n    }\n\n    this._clients = this._clients.filter(c => c !== client);\n    client.end();\n    this.emit('remove', client);\n  }\n\n  connect(cb) {\n    if (this.ending) {\n      const err = new Error('Cannot use a pool after calling end on the pool');\n      return cb ? cb(err) : this.Promise.reject(err);\n    }\n\n    const response = promisify(this.Promise, cb);\n    const result = response.result; // if we don't have to connect a new client, don't do so\n\n    if (this._isFull() || this._idle.length) {\n      // if we have idle clients schedule a pulse immediately\n      if (this._idle.length) {\n        process.nextTick(() => this._pulseQueue());\n      }\n\n      if (!this.options.connectionTimeoutMillis) {\n        this._pendingQueue.push(new PendingItem(response.callback));\n\n        return result;\n      }\n\n      const queueCallback = (err, res, done) => {\n        clearTimeout(tid);\n        response.callback(err, res, done);\n      };\n\n      const pendingItem = new PendingItem(queueCallback); // set connection timeout on checking out an existing client\n\n      const tid = setTimeout(() => {\n        // remove the callback from pending waiters because\n        // we're going to call it with a timeout error\n        removeWhere(this._pendingQueue, i => i.callback === queueCallback);\n        pendingItem.timedOut = true;\n        response.callback(new Error('timeout exceeded when trying to connect'));\n      }, this.options.connectionTimeoutMillis);\n\n      this._pendingQueue.push(pendingItem);\n\n      return result;\n    }\n\n    this.newClient(new PendingItem(response.callback));\n    return result;\n  }\n\n  newClient(pendingItem) {\n    const client = new this.Client(this.options);\n\n    this._clients.push(client);\n\n    const idleListener = makeIdleListener(this, client);\n    this.log('checking client timeout'); // connection timeout logic\n\n    let tid;\n    let timeoutHit = false;\n\n    if (this.options.connectionTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('ending client due to timeout');\n        timeoutHit = true; // force kill the node driver, and let libpq do its teardown\n\n        client.connection ? client.connection.stream.destroy() : client.end();\n      }, this.options.connectionTimeoutMillis);\n    }\n\n    this.log('connecting new client');\n    client.connect(err => {\n      if (tid) {\n        clearTimeout(tid);\n      }\n\n      client.on('error', idleListener);\n\n      if (err) {\n        this.log('client failed to connect', err); // remove the dead client from our list of clients\n\n        this._clients = this._clients.filter(c => c !== client);\n\n        if (timeoutHit) {\n          err.message = 'Connection terminated due to connection timeout';\n        } // this client wonâ€™t be released, so move on immediately\n\n\n        this._pulseQueue();\n\n        if (!pendingItem.timedOut) {\n          pendingItem.callback(err, undefined, NOOP);\n        }\n      } else {\n        this.log('new client connected');\n\n        if (this.options.maxLifetimeSeconds !== 0) {\n          setTimeout(() => {\n            this.log('ending client due to expired lifetime');\n\n            this._expired.add(client);\n\n            const idleIndex = this._idle.findIndex(idleItem => idleItem.client === client);\n\n            if (idleIndex !== -1) {\n              this._acquireClient(client, new PendingItem((err, client, clientRelease) => clientRelease()), idleListener, false);\n            }\n          }, this.options.maxLifetimeSeconds * 1000);\n        }\n\n        return this._acquireClient(client, pendingItem, idleListener, true);\n      }\n    });\n  } // acquire a client for a pending work item\n\n\n  _acquireClient(client, pendingItem, idleListener, isNew) {\n    if (isNew) {\n      this.emit('connect', client);\n    }\n\n    this.emit('acquire', client);\n    client.release = this._releaseOnce(client, idleListener);\n    client.removeListener('error', idleListener);\n\n    if (!pendingItem.timedOut) {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, err => {\n          if (err) {\n            client.release(err);\n            return pendingItem.callback(err, undefined, NOOP);\n          }\n\n          pendingItem.callback(undefined, client, client.release);\n        });\n      } else {\n        pendingItem.callback(undefined, client, client.release);\n      }\n    } else {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, client.release);\n      } else {\n        client.release();\n      }\n    }\n  } // returns a function that wraps _release and throws if called more than once\n\n\n  _releaseOnce(client, idleListener) {\n    let released = false;\n    return err => {\n      if (released) {\n        throwOnDoubleRelease();\n      }\n\n      released = true;\n\n      this._release(client, idleListener, err);\n    };\n  } // release a client back to the poll, include an error\n  // to remove it from the pool\n\n\n  _release(client, idleListener, err) {\n    client.on('error', idleListener);\n    client._poolUseCount = (client._poolUseCount || 0) + 1; // TODO(bmc): expose a proper, public interface _queryable and _ending\n\n    if (err || this.ending || !client._queryable || client._ending || client._poolUseCount >= this.options.maxUses) {\n      if (client._poolUseCount >= this.options.maxUses) {\n        this.log('remove expended client');\n      }\n\n      this._remove(client);\n\n      this._pulseQueue();\n\n      return;\n    }\n\n    const isExpired = this._expired.has(client);\n\n    if (isExpired) {\n      this.log('remove expired client');\n\n      this._expired.delete(client);\n\n      this._remove(client);\n\n      this._pulseQueue();\n\n      return;\n    } // idle timeout\n\n\n    let tid;\n\n    if (this.options.idleTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('remove idle client');\n\n        this._remove(client);\n      }, this.options.idleTimeoutMillis);\n\n      if (this.options.allowExitOnIdle) {\n        // allow Node to exit if this is all that's left\n        tid.unref();\n      }\n    }\n\n    if (this.options.allowExitOnIdle) {\n      client.unref();\n    }\n\n    this._idle.push(new IdleItem(client, idleListener, tid));\n\n    this._pulseQueue();\n  }\n\n  query(text, values, cb) {\n    // guard clause against passing a function as the first parameter\n    if (typeof text === 'function') {\n      const response = promisify(this.Promise, text);\n      setImmediate(function () {\n        return response.callback(new Error('Passing a function as the first parameter to pool.query is not supported'));\n      });\n      return response.result;\n    } // allow plain text query without values\n\n\n    if (typeof values === 'function') {\n      cb = values;\n      values = undefined;\n    }\n\n    const response = promisify(this.Promise, cb);\n    cb = response.callback;\n    this.connect((err, client) => {\n      if (err) {\n        return cb(err);\n      }\n\n      let clientReleased = false;\n\n      const onError = err => {\n        if (clientReleased) {\n          return;\n        }\n\n        clientReleased = true;\n        client.release(err);\n        cb(err);\n      };\n\n      client.once('error', onError);\n      this.log('dispatching query');\n      client.query(text, values, (err, res) => {\n        this.log('query dispatched');\n        client.removeListener('error', onError);\n\n        if (clientReleased) {\n          return;\n        }\n\n        clientReleased = true;\n        client.release(err);\n\n        if (err) {\n          return cb(err);\n        } else {\n          return cb(undefined, res);\n        }\n      });\n    });\n    return response.result;\n  }\n\n  end(cb) {\n    this.log('ending');\n\n    if (this.ending) {\n      const err = new Error('Called end on pool more than once');\n      return cb ? cb(err) : this.Promise.reject(err);\n    }\n\n    this.ending = true;\n    const promised = promisify(this.Promise, cb);\n    this._endCallback = promised.callback;\n\n    this._pulseQueue();\n\n    return promised.result;\n  }\n\n  get waitingCount() {\n    return this._pendingQueue.length;\n  }\n\n  get idleCount() {\n    return this._idle.length;\n  }\n\n  get expiredCount() {\n    return this._clients.reduce((acc, client) => acc + (this._expired.has(client) ? 1 : 0), 0);\n  }\n\n  get totalCount() {\n    return this._clients.length;\n  }\n\n}\n\nmodule.exports = Pool;","map":{"version":3,"names":["EventEmitter","require","NOOP","removeWhere","list","predicate","i","findIndex","undefined","splice","IdleItem","constructor","client","idleListener","timeoutId","PendingItem","callback","throwOnDoubleRelease","Error","promisify","Promise","result","rej","res","cb","err","resolve","reject","makeIdleListener","pool","removeListener","on","log","_remove","emit","Pool","options","Client","Object","assign","defineProperty","configurable","enumerable","writable","value","password","ssl","key","max","poolSize","maxUses","Infinity","allowExitOnIdle","maxLifetimeSeconds","global","idleTimeoutMillis","_clients","_idle","_expired","WeakSet","_pendingQueue","_endCallback","ending","ended","_isFull","length","_pulseQueue","slice","map","item","pendingItem","shift","idleItem","pop","clearTimeout","ref","_acquireClient","newClient","removed","filter","c","end","connect","response","process","nextTick","connectionTimeoutMillis","push","queueCallback","done","tid","setTimeout","timedOut","timeoutHit","connection","stream","destroy","message","add","idleIndex","clientRelease","isNew","release","_releaseOnce","verify","released","_release","_poolUseCount","_queryable","_ending","isExpired","has","delete","unref","query","text","values","setImmediate","clientReleased","onError","once","promised","waitingCount","idleCount","expiredCount","reduce","acc","totalCount","module","exports"],"sources":["/home/brian/node_modules/pg-pool/index.js"],"sourcesContent":["'use strict'\nconst EventEmitter = require('events').EventEmitter\n\nconst NOOP = function () {}\n\nconst removeWhere = (list, predicate) => {\n  const i = list.findIndex(predicate)\n\n  return i === -1 ? undefined : list.splice(i, 1)[0]\n}\n\nclass IdleItem {\n  constructor(client, idleListener, timeoutId) {\n    this.client = client\n    this.idleListener = idleListener\n    this.timeoutId = timeoutId\n  }\n}\n\nclass PendingItem {\n  constructor(callback) {\n    this.callback = callback\n  }\n}\n\nfunction throwOnDoubleRelease() {\n  throw new Error('Release called on client which has already been released to the pool.')\n}\n\nfunction promisify(Promise, callback) {\n  if (callback) {\n    return { callback: callback, result: undefined }\n  }\n  let rej\n  let res\n  const cb = function (err, client) {\n    err ? rej(err) : res(client)\n  }\n  const result = new Promise(function (resolve, reject) {\n    res = resolve\n    rej = reject\n  })\n  return { callback: cb, result: result }\n}\n\nfunction makeIdleListener(pool, client) {\n  return function idleListener(err) {\n    err.client = client\n\n    client.removeListener('error', idleListener)\n    client.on('error', () => {\n      pool.log('additional client error after disconnection due to error', err)\n    })\n    pool._remove(client)\n    // TODO - document that once the pool emits an error\n    // the client has already been closed & purged and is unusable\n    pool.emit('error', err, client)\n  }\n}\n\nclass Pool extends EventEmitter {\n  constructor(options, Client) {\n    super()\n    this.options = Object.assign({}, options)\n\n    if (options != null && 'password' in options) {\n      // \"hiding\" the password so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options, 'password', {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: options.password,\n      })\n    }\n    if (options != null && options.ssl && options.ssl.key) {\n      // \"hiding\" the ssl->key so it doesn't show up in stack traces\n      // or if the client is console.logged\n      Object.defineProperty(this.options.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this.options.max = this.options.max || this.options.poolSize || 10\n    this.options.maxUses = this.options.maxUses || Infinity\n    this.options.allowExitOnIdle = this.options.allowExitOnIdle || false\n    this.options.maxLifetimeSeconds = this.options.maxLifetimeSeconds || 0\n    this.log = this.options.log || function () {}\n    this.Client = this.options.Client || Client || require('pg').Client\n    this.Promise = this.options.Promise || global.Promise\n\n    if (typeof this.options.idleTimeoutMillis === 'undefined') {\n      this.options.idleTimeoutMillis = 10000\n    }\n\n    this._clients = []\n    this._idle = []\n    this._expired = new WeakSet()\n    this._pendingQueue = []\n    this._endCallback = undefined\n    this.ending = false\n    this.ended = false\n  }\n\n  _isFull() {\n    return this._clients.length >= this.options.max\n  }\n\n  _pulseQueue() {\n    this.log('pulse queue')\n    if (this.ended) {\n      this.log('pulse queue ended')\n      return\n    }\n    if (this.ending) {\n      this.log('pulse queue on ending')\n      if (this._idle.length) {\n        this._idle.slice().map((item) => {\n          this._remove(item.client)\n        })\n      }\n      if (!this._clients.length) {\n        this.ended = true\n        this._endCallback()\n      }\n      return\n    }\n\n    // if we don't have any waiting, do nothing\n    if (!this._pendingQueue.length) {\n      this.log('no queued requests')\n      return\n    }\n    // if we don't have any idle clients and we have no more room do nothing\n    if (!this._idle.length && this._isFull()) {\n      return\n    }\n    const pendingItem = this._pendingQueue.shift()\n    if (this._idle.length) {\n      const idleItem = this._idle.pop()\n      clearTimeout(idleItem.timeoutId)\n      const client = idleItem.client\n      client.ref && client.ref()\n      const idleListener = idleItem.idleListener\n\n      return this._acquireClient(client, pendingItem, idleListener, false)\n    }\n    if (!this._isFull()) {\n      return this.newClient(pendingItem)\n    }\n    throw new Error('unexpected condition')\n  }\n\n  _remove(client) {\n    const removed = removeWhere(this._idle, (item) => item.client === client)\n\n    if (removed !== undefined) {\n      clearTimeout(removed.timeoutId)\n    }\n\n    this._clients = this._clients.filter((c) => c !== client)\n    client.end()\n    this.emit('remove', client)\n  }\n\n  connect(cb) {\n    if (this.ending) {\n      const err = new Error('Cannot use a pool after calling end on the pool')\n      return cb ? cb(err) : this.Promise.reject(err)\n    }\n\n    const response = promisify(this.Promise, cb)\n    const result = response.result\n\n    // if we don't have to connect a new client, don't do so\n    if (this._isFull() || this._idle.length) {\n      // if we have idle clients schedule a pulse immediately\n      if (this._idle.length) {\n        process.nextTick(() => this._pulseQueue())\n      }\n\n      if (!this.options.connectionTimeoutMillis) {\n        this._pendingQueue.push(new PendingItem(response.callback))\n        return result\n      }\n\n      const queueCallback = (err, res, done) => {\n        clearTimeout(tid)\n        response.callback(err, res, done)\n      }\n\n      const pendingItem = new PendingItem(queueCallback)\n\n      // set connection timeout on checking out an existing client\n      const tid = setTimeout(() => {\n        // remove the callback from pending waiters because\n        // we're going to call it with a timeout error\n        removeWhere(this._pendingQueue, (i) => i.callback === queueCallback)\n        pendingItem.timedOut = true\n        response.callback(new Error('timeout exceeded when trying to connect'))\n      }, this.options.connectionTimeoutMillis)\n\n      this._pendingQueue.push(pendingItem)\n      return result\n    }\n\n    this.newClient(new PendingItem(response.callback))\n\n    return result\n  }\n\n  newClient(pendingItem) {\n    const client = new this.Client(this.options)\n    this._clients.push(client)\n    const idleListener = makeIdleListener(this, client)\n\n    this.log('checking client timeout')\n\n    // connection timeout logic\n    let tid\n    let timeoutHit = false\n    if (this.options.connectionTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('ending client due to timeout')\n        timeoutHit = true\n        // force kill the node driver, and let libpq do its teardown\n        client.connection ? client.connection.stream.destroy() : client.end()\n      }, this.options.connectionTimeoutMillis)\n    }\n\n    this.log('connecting new client')\n    client.connect((err) => {\n      if (tid) {\n        clearTimeout(tid)\n      }\n      client.on('error', idleListener)\n      if (err) {\n        this.log('client failed to connect', err)\n        // remove the dead client from our list of clients\n        this._clients = this._clients.filter((c) => c !== client)\n        if (timeoutHit) {\n          err.message = 'Connection terminated due to connection timeout'\n        }\n\n        // this client wonâ€™t be released, so move on immediately\n        this._pulseQueue()\n\n        if (!pendingItem.timedOut) {\n          pendingItem.callback(err, undefined, NOOP)\n        }\n      } else {\n        this.log('new client connected')\n\n        if (this.options.maxLifetimeSeconds !== 0) {\n          setTimeout(() => {\n            this.log('ending client due to expired lifetime')\n            this._expired.add(client)\n            const idleIndex = this._idle.findIndex((idleItem) => idleItem.client === client)\n            if (idleIndex !== -1) {\n              this._acquireClient(\n                client,\n                new PendingItem((err, client, clientRelease) => clientRelease()),\n                idleListener,\n                false\n              )\n            }\n          }, this.options.maxLifetimeSeconds * 1000)\n        }\n\n        return this._acquireClient(client, pendingItem, idleListener, true)\n      }\n    })\n  }\n\n  // acquire a client for a pending work item\n  _acquireClient(client, pendingItem, idleListener, isNew) {\n    if (isNew) {\n      this.emit('connect', client)\n    }\n\n    this.emit('acquire', client)\n\n    client.release = this._releaseOnce(client, idleListener)\n\n    client.removeListener('error', idleListener)\n\n    if (!pendingItem.timedOut) {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, (err) => {\n          if (err) {\n            client.release(err)\n            return pendingItem.callback(err, undefined, NOOP)\n          }\n\n          pendingItem.callback(undefined, client, client.release)\n        })\n      } else {\n        pendingItem.callback(undefined, client, client.release)\n      }\n    } else {\n      if (isNew && this.options.verify) {\n        this.options.verify(client, client.release)\n      } else {\n        client.release()\n      }\n    }\n  }\n\n  // returns a function that wraps _release and throws if called more than once\n  _releaseOnce(client, idleListener) {\n    let released = false\n\n    return (err) => {\n      if (released) {\n        throwOnDoubleRelease()\n      }\n\n      released = true\n      this._release(client, idleListener, err)\n    }\n  }\n\n  // release a client back to the poll, include an error\n  // to remove it from the pool\n  _release(client, idleListener, err) {\n    client.on('error', idleListener)\n\n    client._poolUseCount = (client._poolUseCount || 0) + 1\n\n    // TODO(bmc): expose a proper, public interface _queryable and _ending\n    if (err || this.ending || !client._queryable || client._ending || client._poolUseCount >= this.options.maxUses) {\n      if (client._poolUseCount >= this.options.maxUses) {\n        this.log('remove expended client')\n      }\n      this._remove(client)\n      this._pulseQueue()\n      return\n    }\n\n    const isExpired = this._expired.has(client)\n    if (isExpired) {\n      this.log('remove expired client')\n      this._expired.delete(client)\n      this._remove(client)\n      this._pulseQueue()\n      return\n    }\n\n    // idle timeout\n    let tid\n    if (this.options.idleTimeoutMillis) {\n      tid = setTimeout(() => {\n        this.log('remove idle client')\n        this._remove(client)\n      }, this.options.idleTimeoutMillis)\n\n      if (this.options.allowExitOnIdle) {\n        // allow Node to exit if this is all that's left\n        tid.unref()\n      }\n    }\n\n    if (this.options.allowExitOnIdle) {\n      client.unref()\n    }\n\n    this._idle.push(new IdleItem(client, idleListener, tid))\n    this._pulseQueue()\n  }\n\n  query(text, values, cb) {\n    // guard clause against passing a function as the first parameter\n    if (typeof text === 'function') {\n      const response = promisify(this.Promise, text)\n      setImmediate(function () {\n        return response.callback(new Error('Passing a function as the first parameter to pool.query is not supported'))\n      })\n      return response.result\n    }\n\n    // allow plain text query without values\n    if (typeof values === 'function') {\n      cb = values\n      values = undefined\n    }\n    const response = promisify(this.Promise, cb)\n    cb = response.callback\n\n    this.connect((err, client) => {\n      if (err) {\n        return cb(err)\n      }\n\n      let clientReleased = false\n      const onError = (err) => {\n        if (clientReleased) {\n          return\n        }\n        clientReleased = true\n        client.release(err)\n        cb(err)\n      }\n\n      client.once('error', onError)\n      this.log('dispatching query')\n      client.query(text, values, (err, res) => {\n        this.log('query dispatched')\n        client.removeListener('error', onError)\n        if (clientReleased) {\n          return\n        }\n        clientReleased = true\n        client.release(err)\n        if (err) {\n          return cb(err)\n        } else {\n          return cb(undefined, res)\n        }\n      })\n    })\n    return response.result\n  }\n\n  end(cb) {\n    this.log('ending')\n    if (this.ending) {\n      const err = new Error('Called end on pool more than once')\n      return cb ? cb(err) : this.Promise.reject(err)\n    }\n    this.ending = true\n    const promised = promisify(this.Promise, cb)\n    this._endCallback = promised.callback\n    this._pulseQueue()\n    return promised.result\n  }\n\n  get waitingCount() {\n    return this._pendingQueue.length\n  }\n\n  get idleCount() {\n    return this._idle.length\n  }\n\n  get expiredCount() {\n    return this._clients.reduce((acc, client) => acc + (this._expired.has(client) ? 1 : 0), 0)\n  }\n\n  get totalCount() {\n    return this._clients.length\n  }\n}\nmodule.exports = Pool\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}