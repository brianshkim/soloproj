{"ast":null,"code":"'use strict'; // eslint-disable-next-line\n\nvar Native = require('pg-native');\n\nvar TypeOverrides = require('../type-overrides');\n\nvar pkg = require('../../package.json');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar util = require('util');\n\nvar ConnectionParameters = require('../connection-parameters');\n\nvar NativeQuery = require('./query');\n\nvar Client = module.exports = function (config) {\n  EventEmitter.call(this);\n  config = config || {};\n  this._Promise = config.Promise || global.Promise;\n  this._types = new TypeOverrides(config.types);\n  this.native = new Native({\n    types: this._types\n  });\n  this._queryQueue = [];\n  this._ending = false;\n  this._connecting = false;\n  this._connected = false;\n  this._queryable = true; // keep these on the object for legacy reasons\n  // for the time being. TODO: deprecate all this jazz\n\n  var cp = this.connectionParameters = new ConnectionParameters(config);\n  this.user = cp.user; // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: cp.password\n  });\n  this.database = cp.database;\n  this.host = cp.host;\n  this.port = cp.port; // a hash to hold named queries\n\n  this.namedQueries = {};\n};\n\nClient.Query = NativeQuery;\nutil.inherits(Client, EventEmitter);\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = query => {\n    process.nextTick(() => {\n      query.native = this.native;\n      query.handleError(err);\n    });\n  };\n\n  if (this._hasActiveQuery()) {\n    enqueueError(this._activeQuery);\n    this._activeQuery = null;\n  }\n\n  this._queryQueue.forEach(enqueueError);\n\n  this._queryQueue.length = 0;\n}; // connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\n\n\nClient.prototype._connect = function (cb) {\n  var self = this;\n\n  if (this._connecting) {\n    process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')));\n    return;\n  }\n\n  this._connecting = true;\n  this.connectionParameters.getLibpqConnectionString(function (err, conString) {\n    if (err) return cb(err);\n    self.native.connect(conString, function (err) {\n      if (err) {\n        self.native.end();\n        return cb(err);\n      } // set internal states to connected\n\n\n      self._connected = true; // handle connection errors from the native layer\n\n      self.native.on('error', function (err) {\n        self._queryable = false;\n\n        self._errorAllQueries(err);\n\n        self.emit('error', err);\n      });\n      self.native.on('notification', function (msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra\n        });\n      }); // signal we are connected now\n\n      self.emit('connect');\n\n      self._pulseQueryQueue(true);\n\n      cb();\n    });\n  });\n};\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback);\n\n    return;\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect(error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n}; // send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\n\n\nClient.prototype.query = function (config, values, callback) {\n  var query;\n  var result;\n  var readTimeout;\n  var readTimeoutTimer;\n  var queryCallback;\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query');\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout;\n    result = query = config; // accept query(new Query(...), (err, res) => { }) style\n\n    if (typeof values === 'function') {\n      config.callback = values;\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout;\n    query = new NativeQuery(config, values, callback);\n\n    if (!query.callback) {\n      let resolveOut, rejectOut;\n      result = new this._Promise((resolve, reject) => {\n        resolveOut = resolve;\n        rejectOut = reject;\n      });\n\n      query.callback = (err, res) => err ? rejectOut(err) : resolveOut(res);\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback;\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout');\n      process.nextTick(() => {\n        query.handleError(error, this.connection);\n      });\n      queryCallback(error); // we already returned an error,\n      // just do nothing if query completes\n\n      query.callback = () => {}; // Remove from queue\n\n\n      var index = this._queryQueue.indexOf(query);\n\n      if (index > -1) {\n        this._queryQueue.splice(index, 1);\n      }\n\n      this._pulseQueryQueue();\n    }, readTimeout);\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer);\n      queryCallback(err, res);\n    };\n  }\n\n  if (!this._queryable) {\n    query.native = this.native;\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'));\n    });\n    return result;\n  }\n\n  if (this._ending) {\n    query.native = this.native;\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'));\n    });\n    return result;\n  }\n\n  this._queryQueue.push(query);\n\n  this._pulseQueryQueue();\n\n  return result;\n}; // disconnect from the backend server\n\n\nClient.prototype.end = function (cb) {\n  var self = this;\n  this._ending = true;\n\n  if (!this._connected) {\n    this.once('connect', this.end.bind(this, cb));\n  }\n\n  var result;\n\n  if (!cb) {\n    result = new this._Promise(function (resolve, reject) {\n      cb = err => err ? reject(err) : resolve();\n    });\n  }\n\n  this.native.end(function () {\n    self._errorAllQueries(new Error('Connection terminated'));\n\n    process.nextTick(() => {\n      self.emit('end');\n      if (cb) cb();\n    });\n  });\n  return result;\n};\n\nClient.prototype._hasActiveQuery = function () {\n  return this._activeQuery && this._activeQuery.state !== 'error' && this._activeQuery.state !== 'end';\n};\n\nClient.prototype._pulseQueryQueue = function (initialConnection) {\n  if (!this._connected) {\n    return;\n  }\n\n  if (this._hasActiveQuery()) {\n    return;\n  }\n\n  var query = this._queryQueue.shift();\n\n  if (!query) {\n    if (!initialConnection) {\n      this.emit('drain');\n    }\n\n    return;\n  }\n\n  this._activeQuery = query;\n  query.submit(this);\n  var self = this;\n  query.once('_done', function () {\n    self._pulseQueryQueue();\n  });\n}; // attempt to cancel an in-progress query\n\n\nClient.prototype.cancel = function (query) {\n  if (this._activeQuery === query) {\n    this.native.cancel(function () {});\n  } else if (this._queryQueue.indexOf(query) !== -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1);\n  }\n};\n\nClient.prototype.ref = function () {};\n\nClient.prototype.unref = function () {};\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn);\n};\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format);\n};","map":{"version":3,"names":["Native","require","TypeOverrides","pkg","EventEmitter","util","ConnectionParameters","NativeQuery","Client","module","exports","config","call","_Promise","Promise","global","_types","types","native","_queryQueue","_ending","_connecting","_connected","_queryable","cp","connectionParameters","user","Object","defineProperty","configurable","enumerable","writable","value","password","database","host","port","namedQueries","Query","inherits","prototype","_errorAllQueries","err","enqueueError","query","process","nextTick","handleError","_hasActiveQuery","_activeQuery","forEach","length","_connect","cb","self","Error","getLibpqConnectionString","conString","connect","end","on","emit","msg","channel","relname","payload","extra","_pulseQueryQueue","callback","resolve","reject","error","values","result","readTimeout","readTimeoutTimer","queryCallback","undefined","TypeError","submit","query_timeout","resolveOut","rejectOut","res","setTimeout","connection","index","indexOf","splice","clearTimeout","push","once","bind","state","initialConnection","shift","cancel","ref","unref","setTypeParser","oid","format","parseFn","getTypeParser"],"sources":["/home/brian/node_modules/pg/lib/native/client.js"],"sourcesContent":["'use strict'\n\n// eslint-disable-next-line\nvar Native = require('pg-native')\nvar TypeOverrides = require('../type-overrides')\nvar pkg = require('../../package.json')\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar ConnectionParameters = require('../connection-parameters')\n\nvar NativeQuery = require('./query')\n\nvar Client = (module.exports = function (config) {\n  EventEmitter.call(this)\n  config = config || {}\n\n  this._Promise = config.Promise || global.Promise\n  this._types = new TypeOverrides(config.types)\n\n  this.native = new Native({\n    types: this._types,\n  })\n\n  this._queryQueue = []\n  this._ending = false\n  this._connecting = false\n  this._connected = false\n  this._queryable = true\n\n  // keep these on the object for legacy reasons\n  // for the time being. TODO: deprecate all this jazz\n  var cp = (this.connectionParameters = new ConnectionParameters(config))\n  this.user = cp.user\n\n  // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: cp.password,\n  })\n  this.database = cp.database\n  this.host = cp.host\n  this.port = cp.port\n\n  // a hash to hold named queries\n  this.namedQueries = {}\n})\n\nClient.Query = NativeQuery\n\nutil.inherits(Client, EventEmitter)\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = (query) => {\n    process.nextTick(() => {\n      query.native = this.native\n      query.handleError(err)\n    })\n  }\n\n  if (this._hasActiveQuery()) {\n    enqueueError(this._activeQuery)\n    this._activeQuery = null\n  }\n\n  this._queryQueue.forEach(enqueueError)\n  this._queryQueue.length = 0\n}\n\n// connect to the backend\n// pass an optional callback to be called once connected\n// or with an error if there was a connection error\nClient.prototype._connect = function (cb) {\n  var self = this\n\n  if (this._connecting) {\n    process.nextTick(() => cb(new Error('Client has already been connected. You cannot reuse a client.')))\n    return\n  }\n\n  this._connecting = true\n\n  this.connectionParameters.getLibpqConnectionString(function (err, conString) {\n    if (err) return cb(err)\n    self.native.connect(conString, function (err) {\n      if (err) {\n        self.native.end()\n        return cb(err)\n      }\n\n      // set internal states to connected\n      self._connected = true\n\n      // handle connection errors from the native layer\n      self.native.on('error', function (err) {\n        self._queryable = false\n        self._errorAllQueries(err)\n        self.emit('error', err)\n      })\n\n      self.native.on('notification', function (msg) {\n        self.emit('notification', {\n          channel: msg.relname,\n          payload: msg.extra,\n        })\n      })\n\n      // signal we are connected now\n      self.emit('connect')\n      self._pulseQueryQueue(true)\n\n      cb()\n    })\n  })\n}\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback)\n    return\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect((error) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\n// send a query to the server\n// this method is highly overloaded to take\n// 1) string query, optional array of parameters, optional function callback\n// 2) object query with {\n//    string query\n//    optional array values,\n//    optional function callback instead of as a separate parameter\n//    optional string name to name & cache the query plan\n//    optional string rowMode = 'array' for an array of results\n//  }\nClient.prototype.query = function (config, values, callback) {\n  var query\n  var result\n  var readTimeout\n  var readTimeoutTimer\n  var queryCallback\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query')\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    result = query = config\n    // accept query(new Query(...), (err, res) => { }) style\n    if (typeof values === 'function') {\n      config.callback = values\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout\n    query = new NativeQuery(config, values, callback)\n    if (!query.callback) {\n      let resolveOut, rejectOut\n      result = new this._Promise((resolve, reject) => {\n        resolveOut = resolve\n        rejectOut = reject\n      })\n      query.callback = (err, res) => (err ? rejectOut(err) : resolveOut(res))\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback\n\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout')\n\n      process.nextTick(() => {\n        query.handleError(error, this.connection)\n      })\n\n      queryCallback(error)\n\n      // we already returned an error,\n      // just do nothing if query completes\n      query.callback = () => {}\n\n      // Remove from queue\n      var index = this._queryQueue.indexOf(query)\n      if (index > -1) {\n        this._queryQueue.splice(index, 1)\n      }\n\n      this._pulseQueryQueue()\n    }, readTimeout)\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer)\n      queryCallback(err, res)\n    }\n  }\n\n  if (!this._queryable) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'))\n    })\n    return result\n  }\n\n  if (this._ending) {\n    query.native = this.native\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'))\n    })\n    return result\n  }\n\n  this._queryQueue.push(query)\n  this._pulseQueryQueue()\n  return result\n}\n\n// disconnect from the backend server\nClient.prototype.end = function (cb) {\n  var self = this\n\n  this._ending = true\n\n  if (!this._connected) {\n    this.once('connect', this.end.bind(this, cb))\n  }\n  var result\n  if (!cb) {\n    result = new this._Promise(function (resolve, reject) {\n      cb = (err) => (err ? reject(err) : resolve())\n    })\n  }\n  this.native.end(function () {\n    self._errorAllQueries(new Error('Connection terminated'))\n\n    process.nextTick(() => {\n      self.emit('end')\n      if (cb) cb()\n    })\n  })\n  return result\n}\n\nClient.prototype._hasActiveQuery = function () {\n  return this._activeQuery && this._activeQuery.state !== 'error' && this._activeQuery.state !== 'end'\n}\n\nClient.prototype._pulseQueryQueue = function (initialConnection) {\n  if (!this._connected) {\n    return\n  }\n  if (this._hasActiveQuery()) {\n    return\n  }\n  var query = this._queryQueue.shift()\n  if (!query) {\n    if (!initialConnection) {\n      this.emit('drain')\n    }\n    return\n  }\n  this._activeQuery = query\n  query.submit(this)\n  var self = this\n  query.once('_done', function () {\n    self._pulseQueryQueue()\n  })\n}\n\n// attempt to cancel an in-progress query\nClient.prototype.cancel = function (query) {\n  if (this._activeQuery === query) {\n    this.native.cancel(function () {})\n  } else if (this._queryQueue.indexOf(query) !== -1) {\n    this._queryQueue.splice(this._queryQueue.indexOf(query), 1)\n  }\n}\n\nClient.prototype.ref = function () {}\nClient.prototype.unref = function () {}\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn)\n}\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format)\n}\n"],"mappings":"AAAA,a,CAEA;;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,mBAAD,CAA3B;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,oBAAD,CAAjB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,QAAD,CAAP,CAAkBG,YAArC;;AACA,IAAIC,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIK,oBAAoB,GAAGL,OAAO,CAAC,0BAAD,CAAlC;;AAEA,IAAIM,WAAW,GAAGN,OAAO,CAAC,SAAD,CAAzB;;AAEA,IAAIO,MAAM,GAAIC,MAAM,CAACC,OAAP,GAAiB,UAAUC,MAAV,EAAkB;EAC/CP,YAAY,CAACQ,IAAb,CAAkB,IAAlB;EACAD,MAAM,GAAGA,MAAM,IAAI,EAAnB;EAEA,KAAKE,QAAL,GAAgBF,MAAM,CAACG,OAAP,IAAkBC,MAAM,CAACD,OAAzC;EACA,KAAKE,MAAL,GAAc,IAAId,aAAJ,CAAkBS,MAAM,CAACM,KAAzB,CAAd;EAEA,KAAKC,MAAL,GAAc,IAAIlB,MAAJ,CAAW;IACvBiB,KAAK,EAAE,KAAKD;EADW,CAAX,CAAd;EAIA,KAAKG,WAAL,GAAmB,EAAnB;EACA,KAAKC,OAAL,GAAe,KAAf;EACA,KAAKC,WAAL,GAAmB,KAAnB;EACA,KAAKC,UAAL,GAAkB,KAAlB;EACA,KAAKC,UAAL,GAAkB,IAAlB,CAf+C,CAiB/C;EACA;;EACA,IAAIC,EAAE,GAAI,KAAKC,oBAAL,GAA4B,IAAInB,oBAAJ,CAAyBK,MAAzB,CAAtC;EACA,KAAKe,IAAL,GAAYF,EAAE,CAACE,IAAf,CApB+C,CAsB/C;EACA;;EACAC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,UAA5B,EAAwC;IACtCC,YAAY,EAAE,IADwB;IAEtCC,UAAU,EAAE,KAF0B;IAGtCC,QAAQ,EAAE,IAH4B;IAItCC,KAAK,EAAER,EAAE,CAACS;EAJ4B,CAAxC;EAMA,KAAKC,QAAL,GAAgBV,EAAE,CAACU,QAAnB;EACA,KAAKC,IAAL,GAAYX,EAAE,CAACW,IAAf;EACA,KAAKC,IAAL,GAAYZ,EAAE,CAACY,IAAf,CAhC+C,CAkC/C;;EACA,KAAKC,YAAL,GAAoB,EAApB;AACD,CApCD;;AAsCA7B,MAAM,CAAC8B,KAAP,GAAe/B,WAAf;AAEAF,IAAI,CAACkC,QAAL,CAAc/B,MAAd,EAAsBJ,YAAtB;;AAEAI,MAAM,CAACgC,SAAP,CAAiBC,gBAAjB,GAAoC,UAAUC,GAAV,EAAe;EACjD,MAAMC,YAAY,GAAIC,KAAD,IAAW;IAC9BC,OAAO,CAACC,QAAR,CAAiB,MAAM;MACrBF,KAAK,CAAC1B,MAAN,GAAe,KAAKA,MAApB;MACA0B,KAAK,CAACG,WAAN,CAAkBL,GAAlB;IACD,CAHD;EAID,CALD;;EAOA,IAAI,KAAKM,eAAL,EAAJ,EAA4B;IAC1BL,YAAY,CAAC,KAAKM,YAAN,CAAZ;IACA,KAAKA,YAAL,GAAoB,IAApB;EACD;;EAED,KAAK9B,WAAL,CAAiB+B,OAAjB,CAAyBP,YAAzB;;EACA,KAAKxB,WAAL,CAAiBgC,MAAjB,GAA0B,CAA1B;AACD,CAfD,C,CAiBA;AACA;AACA;;;AACA3C,MAAM,CAACgC,SAAP,CAAiBY,QAAjB,GAA4B,UAAUC,EAAV,EAAc;EACxC,IAAIC,IAAI,GAAG,IAAX;;EAEA,IAAI,KAAKjC,WAAT,EAAsB;IACpBwB,OAAO,CAACC,QAAR,CAAiB,MAAMO,EAAE,CAAC,IAAIE,KAAJ,CAAU,+DAAV,CAAD,CAAzB;IACA;EACD;;EAED,KAAKlC,WAAL,GAAmB,IAAnB;EAEA,KAAKI,oBAAL,CAA0B+B,wBAA1B,CAAmD,UAAUd,GAAV,EAAee,SAAf,EAA0B;IAC3E,IAAIf,GAAJ,EAAS,OAAOW,EAAE,CAACX,GAAD,CAAT;IACTY,IAAI,CAACpC,MAAL,CAAYwC,OAAZ,CAAoBD,SAApB,EAA+B,UAAUf,GAAV,EAAe;MAC5C,IAAIA,GAAJ,EAAS;QACPY,IAAI,CAACpC,MAAL,CAAYyC,GAAZ;QACA,OAAON,EAAE,CAACX,GAAD,CAAT;MACD,CAJ2C,CAM5C;;;MACAY,IAAI,CAAChC,UAAL,GAAkB,IAAlB,CAP4C,CAS5C;;MACAgC,IAAI,CAACpC,MAAL,CAAY0C,EAAZ,CAAe,OAAf,EAAwB,UAAUlB,GAAV,EAAe;QACrCY,IAAI,CAAC/B,UAAL,GAAkB,KAAlB;;QACA+B,IAAI,CAACb,gBAAL,CAAsBC,GAAtB;;QACAY,IAAI,CAACO,IAAL,CAAU,OAAV,EAAmBnB,GAAnB;MACD,CAJD;MAMAY,IAAI,CAACpC,MAAL,CAAY0C,EAAZ,CAAe,cAAf,EAA+B,UAAUE,GAAV,EAAe;QAC5CR,IAAI,CAACO,IAAL,CAAU,cAAV,EAA0B;UACxBE,OAAO,EAAED,GAAG,CAACE,OADW;UAExBC,OAAO,EAAEH,GAAG,CAACI;QAFW,CAA1B;MAID,CALD,EAhB4C,CAuB5C;;MACAZ,IAAI,CAACO,IAAL,CAAU,SAAV;;MACAP,IAAI,CAACa,gBAAL,CAAsB,IAAtB;;MAEAd,EAAE;IACH,CA5BD;EA6BD,CA/BD;AAgCD,CA1CD;;AA4CA7C,MAAM,CAACgC,SAAP,CAAiBkB,OAAjB,GAA2B,UAAUU,QAAV,EAAoB;EAC7C,IAAIA,QAAJ,EAAc;IACZ,KAAKhB,QAAL,CAAcgB,QAAd;;IACA;EACD;;EAED,OAAO,IAAI,KAAKvD,QAAT,CAAkB,CAACwD,OAAD,EAAUC,MAAV,KAAqB;IAC5C,KAAKlB,QAAL,CAAemB,KAAD,IAAW;MACvB,IAAIA,KAAJ,EAAW;QACTD,MAAM,CAACC,KAAD,CAAN;MACD,CAFD,MAEO;QACLF,OAAO;MACR;IACF,CAND;EAOD,CARM,CAAP;AASD,CAfD,C,CAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7D,MAAM,CAACgC,SAAP,CAAiBI,KAAjB,GAAyB,UAAUjC,MAAV,EAAkB6D,MAAlB,EAA0BJ,QAA1B,EAAoC;EAC3D,IAAIxB,KAAJ;EACA,IAAI6B,MAAJ;EACA,IAAIC,WAAJ;EACA,IAAIC,gBAAJ;EACA,IAAIC,aAAJ;;EAEA,IAAIjE,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAKkE,SAAlC,EAA6C;IAC3C,MAAM,IAAIC,SAAJ,CAAc,6CAAd,CAAN;EACD,CAFD,MAEO,IAAI,OAAOnE,MAAM,CAACoE,MAAd,KAAyB,UAA7B,EAAyC;IAC9CL,WAAW,GAAG/D,MAAM,CAACqE,aAAP,IAAwB,KAAKvD,oBAAL,CAA0BuD,aAAhE;IACAP,MAAM,GAAG7B,KAAK,GAAGjC,MAAjB,CAF8C,CAG9C;;IACA,IAAI,OAAO6D,MAAP,KAAkB,UAAtB,EAAkC;MAChC7D,MAAM,CAACyD,QAAP,GAAkBI,MAAlB;IACD;EACF,CAPM,MAOA;IACLE,WAAW,GAAG,KAAKjD,oBAAL,CAA0BuD,aAAxC;IACApC,KAAK,GAAG,IAAIrC,WAAJ,CAAgBI,MAAhB,EAAwB6D,MAAxB,EAAgCJ,QAAhC,CAAR;;IACA,IAAI,CAACxB,KAAK,CAACwB,QAAX,EAAqB;MACnB,IAAIa,UAAJ,EAAgBC,SAAhB;MACAT,MAAM,GAAG,IAAI,KAAK5D,QAAT,CAAkB,CAACwD,OAAD,EAAUC,MAAV,KAAqB;QAC9CW,UAAU,GAAGZ,OAAb;QACAa,SAAS,GAAGZ,MAAZ;MACD,CAHQ,CAAT;;MAIA1B,KAAK,CAACwB,QAAN,GAAiB,CAAC1B,GAAD,EAAMyC,GAAN,KAAezC,GAAG,GAAGwC,SAAS,CAACxC,GAAD,CAAZ,GAAoBuC,UAAU,CAACE,GAAD,CAAjE;IACD;EACF;;EAED,IAAIT,WAAJ,EAAiB;IACfE,aAAa,GAAGhC,KAAK,CAACwB,QAAtB;IAEAO,gBAAgB,GAAGS,UAAU,CAAC,MAAM;MAClC,IAAIb,KAAK,GAAG,IAAIhB,KAAJ,CAAU,oBAAV,CAAZ;MAEAV,OAAO,CAACC,QAAR,CAAiB,MAAM;QACrBF,KAAK,CAACG,WAAN,CAAkBwB,KAAlB,EAAyB,KAAKc,UAA9B;MACD,CAFD;MAIAT,aAAa,CAACL,KAAD,CAAb,CAPkC,CASlC;MACA;;MACA3B,KAAK,CAACwB,QAAN,GAAiB,MAAM,CAAE,CAAzB,CAXkC,CAalC;;;MACA,IAAIkB,KAAK,GAAG,KAAKnE,WAAL,CAAiBoE,OAAjB,CAAyB3C,KAAzB,CAAZ;;MACA,IAAI0C,KAAK,GAAG,CAAC,CAAb,EAAgB;QACd,KAAKnE,WAAL,CAAiBqE,MAAjB,CAAwBF,KAAxB,EAA+B,CAA/B;MACD;;MAED,KAAKnB,gBAAL;IACD,CApB4B,EAoB1BO,WApB0B,CAA7B;;IAsBA9B,KAAK,CAACwB,QAAN,GAAiB,CAAC1B,GAAD,EAAMyC,GAAN,KAAc;MAC7BM,YAAY,CAACd,gBAAD,CAAZ;MACAC,aAAa,CAAClC,GAAD,EAAMyC,GAAN,CAAb;IACD,CAHD;EAID;;EAED,IAAI,CAAC,KAAK5D,UAAV,EAAsB;IACpBqB,KAAK,CAAC1B,MAAN,GAAe,KAAKA,MAApB;IACA2B,OAAO,CAACC,QAAR,CAAiB,MAAM;MACrBF,KAAK,CAACG,WAAN,CAAkB,IAAIQ,KAAJ,CAAU,gEAAV,CAAlB;IACD,CAFD;IAGA,OAAOkB,MAAP;EACD;;EAED,IAAI,KAAKrD,OAAT,EAAkB;IAChBwB,KAAK,CAAC1B,MAAN,GAAe,KAAKA,MAApB;IACA2B,OAAO,CAACC,QAAR,CAAiB,MAAM;MACrBF,KAAK,CAACG,WAAN,CAAkB,IAAIQ,KAAJ,CAAU,wCAAV,CAAlB;IACD,CAFD;IAGA,OAAOkB,MAAP;EACD;;EAED,KAAKtD,WAAL,CAAiBuE,IAAjB,CAAsB9C,KAAtB;;EACA,KAAKuB,gBAAL;;EACA,OAAOM,MAAP;AACD,CA/ED,C,CAiFA;;;AACAjE,MAAM,CAACgC,SAAP,CAAiBmB,GAAjB,GAAuB,UAAUN,EAAV,EAAc;EACnC,IAAIC,IAAI,GAAG,IAAX;EAEA,KAAKlC,OAAL,GAAe,IAAf;;EAEA,IAAI,CAAC,KAAKE,UAAV,EAAsB;IACpB,KAAKqE,IAAL,CAAU,SAAV,EAAqB,KAAKhC,GAAL,CAASiC,IAAT,CAAc,IAAd,EAAoBvC,EAApB,CAArB;EACD;;EACD,IAAIoB,MAAJ;;EACA,IAAI,CAACpB,EAAL,EAAS;IACPoB,MAAM,GAAG,IAAI,KAAK5D,QAAT,CAAkB,UAAUwD,OAAV,EAAmBC,MAAnB,EAA2B;MACpDjB,EAAE,GAAIX,GAAD,IAAUA,GAAG,GAAG4B,MAAM,CAAC5B,GAAD,CAAT,GAAiB2B,OAAO,EAA1C;IACD,CAFQ,CAAT;EAGD;;EACD,KAAKnD,MAAL,CAAYyC,GAAZ,CAAgB,YAAY;IAC1BL,IAAI,CAACb,gBAAL,CAAsB,IAAIc,KAAJ,CAAU,uBAAV,CAAtB;;IAEAV,OAAO,CAACC,QAAR,CAAiB,MAAM;MACrBQ,IAAI,CAACO,IAAL,CAAU,KAAV;MACA,IAAIR,EAAJ,EAAQA,EAAE;IACX,CAHD;EAID,CAPD;EAQA,OAAOoB,MAAP;AACD,CAvBD;;AAyBAjE,MAAM,CAACgC,SAAP,CAAiBQ,eAAjB,GAAmC,YAAY;EAC7C,OAAO,KAAKC,YAAL,IAAqB,KAAKA,YAAL,CAAkB4C,KAAlB,KAA4B,OAAjD,IAA4D,KAAK5C,YAAL,CAAkB4C,KAAlB,KAA4B,KAA/F;AACD,CAFD;;AAIArF,MAAM,CAACgC,SAAP,CAAiB2B,gBAAjB,GAAoC,UAAU2B,iBAAV,EAA6B;EAC/D,IAAI,CAAC,KAAKxE,UAAV,EAAsB;IACpB;EACD;;EACD,IAAI,KAAK0B,eAAL,EAAJ,EAA4B;IAC1B;EACD;;EACD,IAAIJ,KAAK,GAAG,KAAKzB,WAAL,CAAiB4E,KAAjB,EAAZ;;EACA,IAAI,CAACnD,KAAL,EAAY;IACV,IAAI,CAACkD,iBAAL,EAAwB;MACtB,KAAKjC,IAAL,CAAU,OAAV;IACD;;IACD;EACD;;EACD,KAAKZ,YAAL,GAAoBL,KAApB;EACAA,KAAK,CAACmC,MAAN,CAAa,IAAb;EACA,IAAIzB,IAAI,GAAG,IAAX;EACAV,KAAK,CAAC+C,IAAN,CAAW,OAAX,EAAoB,YAAY;IAC9BrC,IAAI,CAACa,gBAAL;EACD,CAFD;AAGD,CApBD,C,CAsBA;;;AACA3D,MAAM,CAACgC,SAAP,CAAiBwD,MAAjB,GAA0B,UAAUpD,KAAV,EAAiB;EACzC,IAAI,KAAKK,YAAL,KAAsBL,KAA1B,EAAiC;IAC/B,KAAK1B,MAAL,CAAY8E,MAAZ,CAAmB,YAAY,CAAE,CAAjC;EACD,CAFD,MAEO,IAAI,KAAK7E,WAAL,CAAiBoE,OAAjB,CAAyB3C,KAAzB,MAAoC,CAAC,CAAzC,EAA4C;IACjD,KAAKzB,WAAL,CAAiBqE,MAAjB,CAAwB,KAAKrE,WAAL,CAAiBoE,OAAjB,CAAyB3C,KAAzB,CAAxB,EAAyD,CAAzD;EACD;AACF,CAND;;AAQApC,MAAM,CAACgC,SAAP,CAAiByD,GAAjB,GAAuB,YAAY,CAAE,CAArC;;AACAzF,MAAM,CAACgC,SAAP,CAAiB0D,KAAjB,GAAyB,YAAY,CAAE,CAAvC;;AAEA1F,MAAM,CAACgC,SAAP,CAAiB2D,aAAjB,GAAiC,UAAUC,GAAV,EAAeC,MAAf,EAAuBC,OAAvB,EAAgC;EAC/D,OAAO,KAAKtF,MAAL,CAAYmF,aAAZ,CAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,OAAvC,CAAP;AACD,CAFD;;AAIA9F,MAAM,CAACgC,SAAP,CAAiB+D,aAAjB,GAAiC,UAAUH,GAAV,EAAeC,MAAf,EAAuB;EACtD,OAAO,KAAKrF,MAAL,CAAYuF,aAAZ,CAA0BH,GAA1B,EAA+BC,MAA/B,CAAP;AACD,CAFD"},"metadata":{},"sourceType":"script"}