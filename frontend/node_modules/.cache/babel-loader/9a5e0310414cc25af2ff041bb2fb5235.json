{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\n\nconst DataTypes = require('../../data-types');\n\nconst TableHints = require('../../table-hints');\n\nconst AbstractQueryGenerator = require('../abstract/query-generator');\n\nconst randomBytes = require('crypto').randomBytes;\n\nconst semver = require('semver');\n\nconst Op = require('../../operators');\n/* istanbul ignore next */\n\n\nconst throwMethodUndefined = function (methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n};\n\nclass MSSQLQueryGenerator extends AbstractQueryGenerator {\n  createDatabaseQuery(databaseName, options) {\n    options = Object.assign({\n      collate: null\n    }, options || {});\n    const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : '';\n    return ['IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')', 'BEGIN', 'CREATE DATABASE', this.quoteIdentifier(databaseName), `${collation};`, 'END;'].join(' ');\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return ['IF EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')', 'BEGIN', 'DROP DATABASE', this.quoteIdentifier(databaseName), ';', 'END;'].join(' ');\n  }\n\n  createSchema(schema) {\n    return ['IF NOT EXISTS (SELECT schema_name', 'FROM information_schema.schemata', 'WHERE schema_name =', wrapSingleQuote(schema), ')', 'BEGIN', \"EXEC sp_executesql N'CREATE SCHEMA\", this.quoteIdentifier(schema), \";'\", 'END;'].join(' ');\n  }\n\n  dropSchema(schema) {\n    // Mimics Postgres CASCADE, will drop objects belonging to the schema\n    const quotedSchema = wrapSingleQuote(schema);\n    return ['IF EXISTS (SELECT schema_name', 'FROM information_schema.schemata', 'WHERE schema_name =', quotedSchema, ')', 'BEGIN', 'DECLARE @id INT, @ms_sql NVARCHAR(2000);', 'DECLARE @cascade TABLE (', 'id INT NOT NULL IDENTITY PRIMARY KEY,', 'ms_sql NVARCHAR(2000) NOT NULL );', 'INSERT INTO @cascade ( ms_sql )', \"SELECT CASE WHEN o.type IN ('F','PK')\", \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\", \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\", 'FROM sys.objects o', 'JOIN sys.schemas s on o.schema_id = s.schema_id', 'LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id', \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", quotedSchema, 'ORDER BY o.type ASC;', 'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;', 'WHILE @id IS NOT NULL', 'BEGIN', 'BEGIN TRY EXEC sp_executesql @ms_sql; END TRY', 'BEGIN CATCH BREAK; THROW; END CATCH;', 'DELETE FROM @cascade WHERE id = @id;', 'SELECT @id = NULL, @ms_sql = NULL;', 'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;', 'END', \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(schema), \";'\", 'END;'].join(' ');\n  }\n\n  showSchemasQuery() {\n    return ['SELECT \"name\" as \"schema_name\" FROM sys.schemas as s', 'WHERE \"s\".\"name\" NOT IN (', \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\", ')', 'AND', '\"s\".\"name\" NOT LIKE', \"'db_%'\"].join(' ');\n  }\n\n  versionQuery() {\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\n    return ['DECLARE @ms_ver NVARCHAR(20);', \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\", \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"].join(' ');\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    const query = (table, attrs) => `IF OBJECT_ID('${table}', 'U') IS NULL CREATE TABLE ${table} (${attrs})`,\n          primaryKeys = [],\n          foreignKeys = {},\n          attrStr = [];\n\n    let commentStr = '';\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n\n        if (dataType.includes('COMMENT ')) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          const commentText = commentMatch[2].replace('COMMENT', '').trim();\n          commentStr += this.commentTemplate(commentText, tableName, attr); // remove comment related substring from dataType\n\n          dataType = commentMatch[1];\n        }\n\n        if (dataType.includes('PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (dataType.includes('REFERENCES')) {\n            // MSSQL doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n          }\n        } else if (dataType.includes('REFERENCES')) {\n          // MSSQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n      }\n    }\n\n    let attributesClause = attrStr.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n\n          attributesClause += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return `${query(this.quoteTable(tableName), attributesClause)};${commentStr}`;\n  }\n\n  describeTableQuery(tableName, schema) {\n    let sql = ['SELECT', \"c.COLUMN_NAME AS 'Name',\", \"c.DATA_TYPE AS 'Type',\", \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\", \"c.IS_NULLABLE as 'IsNull',\", \"COLUMN_DEFAULT AS 'Default',\", \"pk.CONSTRAINT_TYPE AS 'Constraint',\", \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',\", \"prop.value AS 'Comment'\", 'FROM', 'INFORMATION_SCHEMA.TABLES t', 'INNER JOIN', 'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA', 'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ', 'cu.column_name, tc.CONSTRAINT_TYPE ', 'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ', 'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu ', 'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ', 'and tc.constraint_name=cu.constraint_name ', 'and tc.CONSTRAINT_TYPE=\\'PRIMARY KEY\\') pk ', 'ON pk.table_schema=c.table_schema ', 'AND pk.table_name=c.table_name ', 'AND pk.column_name=c.column_name ', 'INNER JOIN sys.columns AS sc', \"ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name\", 'LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id', 'AND prop.minor_id = sc.column_id', \"AND prop.name = 'MS_Description'\", 'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)].join(' ');\n\n    if (schema) {\n      sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;\n    }\n\n    return sql;\n  }\n\n  renameTableQuery(before, after) {\n    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';\";\n  }\n\n  dropTableQuery(tableName) {\n    const qouteTbl = this.quoteTable(tableName);\n    return `IF OBJECT_ID('${qouteTbl}', 'U') IS NOT NULL DROP TABLE ${qouteTbl};`;\n  }\n\n  addColumnQuery(table, key, dataType) {\n    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery\n    //        but instead we need to pass the key along as the field here\n    dataType.field = key;\n    let commentStr = '';\n\n    if (dataType.comment && _.isString(dataType.comment)) {\n      commentStr = this.commentTemplate(dataType.comment, table, key); // attributeToSQL will try to include `COMMENT 'Comment Text'` when it returns if the comment key\n      // is present. This is needed for createTable statement where that part is extracted with regex.\n      // Here we can intercept the object and remove comment property since we have the original object.\n\n      delete dataType['comment'];\n    }\n\n    const def = this.attributeToSQL(dataType, {\n      context: 'addColumn'\n    });\n    return `ALTER TABLE ${this.quoteTable(table)} ADD ${this.quoteIdentifier(key)} ${def};${commentStr}`;\n  }\n\n  commentTemplate(comment, table, column) {\n    return ' EXEC sp_addextendedproperty ' + `@name = N'MS_Description', @value = ${this.escape(comment)}, ` + '@level0type = N\\'Schema\\', @level0name = \\'dbo\\', ' + `@level1type = N'Table', @level1name = ${this.quoteIdentifier(table)}, ` + `@level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP COLUMN ${this.quoteIdentifier(attributeName)};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [],\n          constraintString = [];\n    let commentString = '';\n\n    for (const attributeName in attributes) {\n      const quotedAttrName = this.quoteIdentifier(attributeName);\n      let definition = attributes[attributeName];\n\n      if (definition.includes('COMMENT ')) {\n        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);\n        const commentText = commentMatch[2].replace('COMMENT', '').trim();\n        commentString += this.commentTemplate(commentText, tableName, attributeName); // remove comment related substring from dataType\n\n        definition = commentMatch[1];\n      }\n\n      if (definition.includes('REFERENCES')) {\n        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, '')}`);\n      } else {\n        attrString.push(`${quotedAttrName} ${definition}`);\n      }\n    }\n\n    let finalQuery = '';\n\n    if (attrString.length) {\n      finalQuery += `ALTER COLUMN ${attrString.join(', ')}`;\n      finalQuery += constraintString.length ? ' ' : '';\n    }\n\n    if (constraintString.length) {\n      finalQuery += `ADD ${constraintString.join(', ')}`;\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} ${finalQuery};${commentString}`;\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const newName = Object.keys(attributes)[0];\n    return `EXEC sp_rename '${this.quoteTable(tableName)}.${attrBefore}', '${newName}', 'COLUMN';`;\n  }\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    const quotedTable = this.quoteTable(tableName);\n    options = options || {};\n    attributes = attributes || {};\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n    let needIdentityInsertWrapper = false,\n        outputFragment = '';\n\n    if (options.returning) {\n      outputFragment = ' OUTPUT INSERTED.*';\n    }\n\n    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;\n    attrValueHashes.forEach(attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      } // normal case\n\n\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement) return;\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    if (allAttributes.length > 0) {\n      attrValueHashes.forEach(attrValueHash => {\n        tuples.push(`(${allAttributes.map(key => this.escape(attrValueHash[key])).join(',')})`);\n      });\n      const quotedAttributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(',');\n      allQueries.push(tupleStr => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);\n    }\n\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n\n    while (offset < Math.max(tuples.length, 1)) {\n      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));\n      let generatedQuery = allQueries.map(v => typeof v === 'string' ? v : v(tupleStr)).join(';');\n\n      if (needIdentityInsertWrapper) {\n        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;\n      }\n\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n\n    return commands.join(';');\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql.query = sql.query.replace('UPDATE', updateArgs);\n    }\n\n    return sql;\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false; //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    } //Add unique indexes defined by indexes option to uniqueAttrs\n\n\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n\n    let joinCondition; //IDENTITY_INSERT Condition\n\n    identityAttrs.forEach(key => {\n      if (updateValues[key] && updateValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n        /*\n         * IDENTITY_INSERT Column Cannot be updated, only inserted\n         * http://stackoverflow.com/a/30176254/2254360\n         */\n      }\n    }); //Filter NULL Clauses\n\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n\n      for (const key in clause) {\n        if (!clause[key]) {\n          valid = false;\n          break;\n        }\n      }\n\n      return valid;\n    });\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n\n        if (primaryKeysAttrs.includes(keys[0])) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    } // Remove the IDENTITY_INSERT Column from update\n\n\n    const updateSnippet = updateKeys.filter(key => !identityAttrs.includes(key)).map(key => {\n      const value = this.escape(updateValues[key]);\n      key = this.quoteIdentifier(key);\n      return `${targetTableAlias}.${key} = ${value}`;\n    }).join(', ');\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` WHEN MATCHED THEN UPDATE SET ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let model = arguments.length > 3 ? arguments[3] : undefined;\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    let limit = '';\n\n    if (options.limit) {\n      limit = ` TOP(${this.escape(options.limit)})`;\n    }\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    return `DELETE${limit} FROM ${table}${whereClause}; SELECT @@ROWCOUNT AS AFFECTEDROWS;`;\n  }\n\n  showIndexesQuery(tableName) {\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;\n  }\n\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;\n  }\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    } // handle self referential constraints\n\n\n    if (attribute.references) {\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log('MSSQL does not support self referencial constraints, ' + 'we will remove it but we recommend restructuring your query');\n        attribute.onDelete = '';\n        attribute.onUpdate = '';\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values; // enums are a special case\n\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(', ')}))`;\n      return template;\n    }\n\n    template = attribute.type.toString();\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' IDENTITY(1,1)';\n    } // Blobs/texts cannot have a defaultValue\n\n\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n          existingConstraints = [];\n    let key, attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n        if (existingConstraints.includes(attribute.references.model.toString())) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString()); // NOTE: this really just disables cascading updates for all\n          //       definitions. Can be made more robust to support the\n          //       few cases where MSSQL actually supports them\n\n          attribute.onUpdate = '';\n        }\n      }\n\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  }\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  }\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  }\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  }\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  }\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  }\n  /**\n   * Generate common SQL prefix for ForeignKeysQuery.\n   *\n   * @param {string} catalogName\n   * @returns {string}\n   */\n\n\n  _getForeignKeysQueryPrefix(catalogName) {\n    return `${'SELECT ' + 'constraint_name = OBJ.NAME, ' + 'constraintName = OBJ.NAME, '}${catalogName ? `constraintCatalog = '${catalogName}', ` : ''}constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), ` + 'tableName = TB.NAME, ' + `tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${catalogName ? `tableCatalog = '${catalogName}', ` : ''}columnName = COL.NAME, ` + `referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${catalogName ? `referencedCatalog = '${catalogName}', ` : ''}referencedTableName = RTB.NAME, ` + 'referencedColumnName = RCOL.NAME ' + 'FROM sys.foreign_key_columns FKC ' + 'INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID ' + 'INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID ' + 'INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID ' + 'INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID ' + 'INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID';\n  }\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * @param {string|Object} table\n   * @param {string} catalogName database name\n   * @returns {string}\n   */\n\n\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix(catalogName)} WHERE TB.NAME =${wrapSingleQuote(tableName)}`;\n\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n\n    return sql;\n  }\n\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix()} WHERE TB.NAME =${wrapSingleQuote(tableName)} AND COL.NAME =${wrapSingleQuote(attributeName)}`;\n\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n\n    return sql;\n  }\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return ['SELECT K.TABLE_NAME AS tableName,', 'K.COLUMN_NAME AS columnName,', 'K.CONSTRAINT_NAME AS constraintName', 'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C', 'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K', 'ON C.TABLE_NAME = K.TABLE_NAME', 'AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG', 'AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA', 'AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME', 'WHERE C.CONSTRAINT_TYPE = \\'PRIMARY KEY\\'', `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`, `AND K.TABLE_NAME = ${tableName};`].join(' ');\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP ${this.quoteIdentifier(foreignKey)}`;\n  }\n\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const quotedTable = this.quoteTable(tableName);\n    return 'SELECT name FROM sys.default_constraints ' + `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U') ` + `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}') ` + `AND object_id = OBJECT_ID('${quotedTable}', 'U'));`;\n  }\n\n  dropConstraintQuery(tableName, constraintName) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(constraintName)};`;\n  }\n\n  setIsolationLevelQuery() {}\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'BEGIN TRANSACTION;';\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  }\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    let topFragment = '';\n    let mainFragment = `SELECT ${attributes.join(', ')} FROM ${tables}`; // Handle SQL Server 2008 with TOP instead of LIMIT\n\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      if (options.limit) {\n        topFragment = `TOP ${options.limit} `;\n      }\n\n      if (options.offset) {\n        const offset = options.offset || 0,\n              isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n        let orders = {\n          mainQueryOrder: []\n        };\n\n        if (options.order) {\n          orders = this.getQueryOrders(options, model, isSubQuery);\n        }\n\n        if (!orders.mainQueryOrder.length) {\n          orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n        }\n\n        const tmpTable = mainTableAs ? mainTableAs : 'OffsetTable';\n        const whereFragment = where ? ` WHERE ${where}` : '';\n        /*\n         * For earlier versions of SQL server, we need to nest several queries\n         * in order to emulate the OFFSET behavior.\n         *\n         * 1. The outermost query selects all items from the inner query block.\n         *    This is due to a limitation in SQL server with the use of computed\n         *    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.\n         * 2. The next query handles the LIMIT and OFFSET behavior by getting\n         *    the TOP N rows of the query where the row number is > OFFSET\n         * 3. The innermost query is the actual set we want information from\n         */\n\n        const fragment = `SELECT TOP 100 PERCENT ${attributes.join(', ')} FROM ` + `(SELECT ${topFragment}*` + ` FROM (SELECT ROW_NUMBER() OVER (ORDER BY ${orders.mainQueryOrder.join(', ')}) as row_num, * ` + ` FROM ${tables} AS ${tmpTable}${whereFragment})` + ` AS ${tmpTable} WHERE row_num > ${offset})` + ` AS ${tmpTable}`;\n        return fragment;\n      }\n\n      mainFragment = `SELECT ${topFragment}${attributes.join(', ')} FROM ${tables}`;\n    }\n\n    if (mainTableAs) {\n      mainFragment += ` AS ${mainTableAs}`;\n    }\n\n    if (options.tableHint && TableHints[options.tableHint]) {\n      mainFragment += ` WITH (${TableHints[options.tableHint]})`;\n    }\n\n    return mainFragment;\n  }\n\n  addLimitAndOffset(options, model) {\n    // Skip handling of limit and offset as postfixes for older SQL Server versions\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      return '';\n    }\n\n    const offset = options.offset || 0;\n    const isSubQuery = options.subQuery === undefined ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation : options.subQuery;\n    let fragment = '';\n    let orders = {};\n\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      if (!options.order || options.include && !orders.subQueryOrder.length) {\n        fragment += options.order && !isSubQuery ? ', ' : ' ORDER BY ';\n        fragment += `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(model.primaryKeyField)}`;\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n      }\n\n      if (options.limit) {\n        fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n      }\n    }\n\n    return fragment;\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n\n} // private methods\n\n\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\n\nmodule.exports = MSSQLQueryGenerator;","map":{"version":3,"names":["_","require","Utils","DataTypes","TableHints","AbstractQueryGenerator","randomBytes","semver","Op","throwMethodUndefined","methodName","Error","MSSQLQueryGenerator","createDatabaseQuery","databaseName","options","Object","assign","collate","collation","escape","wrapSingleQuote","quoteIdentifier","join","dropDatabaseQuery","createSchema","schema","dropSchema","quotedSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","query","table","attrs","primaryKeys","foreignKeys","attrStr","commentStr","attr","prototype","hasOwnProperty","call","dataType","match","includes","commentMatch","commentText","replace","trim","commentTemplate","push","attributesClause","pkString","map","pk","uniqueKeys","each","columns","indexName","customIndex","fields","field","length","fkey","quoteTable","describeTableQuery","sql","renameTableQuery","before","after","showTablesQuery","dropTableQuery","qouteTbl","addColumnQuery","key","comment","isString","def","attributeToSQL","context","column","removeColumnQuery","attributeName","changeColumnQuery","attrString","constraintString","commentString","quotedAttrName","definition","finalQuery","renameColumnQuery","attrBefore","newName","keys","bulkInsertQuery","attrValueHashes","quotedTable","tuples","allAttributes","allQueries","needIdentityInsertWrapper","outputFragment","returning","emptyQuery","forEach","attrValueHash","firstAttr","autoIncrement","forOwn","value","quotedAttributes","tupleStr","commands","offset","batch","Math","floor","max","slice","min","generatedQuery","v","updateQuery","where","limit","updateArgs","upsertQuery","insertValues","updateValues","model","targetTableAlias","sourceTableAlias","primaryKeysAttrs","identityAttrs","uniqueAttrs","tableNameQuoted","rawAttributes","primaryKey","unique","index","_indexes","fieldName","name","attribute","updateKeys","insertKeys","insertKeysQuoted","insertValuesEscaped","sourceTableQuery","joinCondition","clauses","or","filter","clause","valid","getJoinSnippet","array","updateSnippet","insertSnippet","truncateTableQuery","deleteQuery","whereClause","getWhereConditions","showIndexesQuery","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","underscore","quoteIdentifiers","isPlainObject","type","references","Model","sequelize","log","onDelete","onUpdate","template","ENUM","values","toSql","toString","allowNull","defaultValueSchemable","defaultValue","_binary","toUpperCase","attributesToSQL","result","existingConstraints","createTrigger","dropTrigger","renameTrigger","createFunction","dropFunction","renameFunction","_getForeignKeysQueryPrefix","catalogName","getForeignKeysQuery","getForeignKeyQuery","getPrimaryKeyConstraintQuery","dropForeignKeyQuery","foreignKey","getDefaultConstraintQuery","dropConstraintQuery","constraintName","setIsolationLevelQuery","generateTransactionId","startTransactionQuery","transaction","parent","commitTransactionQuery","rollbackTransactionQuery","selectFromTableFragment","tables","mainTableAs","topFragment","mainFragment","databaseVersion","lt","isSubQuery","hasIncludeWhere","hasIncludeRequired","hasMultiAssociation","orders","mainQueryOrder","order","getQueryOrders","primaryKeyField","tmpTable","whereFragment","fragment","tableHint","addLimitAndOffset","subQuery","undefined","include","subQueryOrder","tableAs","booleanValue","identifier","addTicks","removeTicks","module","exports"],"sources":["/home/brian/node_modules/sequelize/lib/dialects/mssql/query-generator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst DataTypes = require('../../data-types');\nconst TableHints = require('../../table-hints');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst randomBytes = require('crypto').randomBytes;\nconst semver = require('semver');\nconst Op = require('../../operators');\n\n/* istanbul ignore next */\nconst throwMethodUndefined = function(methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n};\n\nclass MSSQLQueryGenerator extends AbstractQueryGenerator {\n  createDatabaseQuery(databaseName, options) {\n    options = Object.assign({\n      collate: null\n    }, options || {});\n\n    const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : '';\n\n    return [\n      'IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\n      'BEGIN',\n      'CREATE DATABASE', this.quoteIdentifier(databaseName),\n      `${collation};`,\n      'END;'\n    ].join(' ');\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return [\n      'IF EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\n      'BEGIN',\n      'DROP DATABASE', this.quoteIdentifier(databaseName), ';',\n      'END;'\n    ].join(' ');\n  }\n\n  createSchema(schema) {\n    return [\n      'IF NOT EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', wrapSingleQuote(schema), ')',\n      'BEGIN',\n      \"EXEC sp_executesql N'CREATE SCHEMA\",\n      this.quoteIdentifier(schema),\n      \";'\",\n      'END;'\n    ].join(' ');\n  }\n\n  dropSchema(schema) {\n    // Mimics Postgres CASCADE, will drop objects belonging to the schema\n    const quotedSchema = wrapSingleQuote(schema);\n    return [\n      'IF EXISTS (SELECT schema_name',\n      'FROM information_schema.schemata',\n      'WHERE schema_name =', quotedSchema, ')',\n      'BEGIN',\n      'DECLARE @id INT, @ms_sql NVARCHAR(2000);',\n      'DECLARE @cascade TABLE (',\n      'id INT NOT NULL IDENTITY PRIMARY KEY,',\n      'ms_sql NVARCHAR(2000) NOT NULL );',\n      'INSERT INTO @cascade ( ms_sql )',\n      \"SELECT CASE WHEN o.type IN ('F','PK')\",\n      \"THEN N'ALTER TABLE ['+ s.name + N'].[' + p.name + N'] DROP CONSTRAINT [' + o.name + N']'\",\n      \"ELSE N'DROP TABLE ['+ s.name + N'].[' + o.name + N']' END\",\n      'FROM sys.objects o',\n      'JOIN sys.schemas s on o.schema_id = s.schema_id',\n      'LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id',\n      \"WHERE o.type IN ('F', 'PK', 'U') AND s.name = \", quotedSchema,\n      'ORDER BY o.type ASC;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'WHILE @id IS NOT NULL',\n      'BEGIN',\n      'BEGIN TRY EXEC sp_executesql @ms_sql; END TRY',\n      'BEGIN CATCH BREAK; THROW; END CATCH;',\n      'DELETE FROM @cascade WHERE id = @id;',\n      'SELECT @id = NULL, @ms_sql = NULL;',\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\n      'END',\n      \"EXEC sp_executesql N'DROP SCHEMA\", this.quoteIdentifier(schema), \";'\",\n      'END;'\n    ].join(' ');\n  }\n\n  showSchemasQuery() {\n    return [\n      'SELECT \"name\" as \"schema_name\" FROM sys.schemas as s',\n      'WHERE \"s\".\"name\" NOT IN (',\n      \"'INFORMATION_SCHEMA', 'dbo', 'guest', 'sys', 'archive'\",\n      ')', 'AND', '\"s\".\"name\" NOT LIKE', \"'db_%'\"\n    ].join(' ');\n  }\n\n  versionQuery() {\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\n    return [\n      'DECLARE @ms_ver NVARCHAR(20);',\n      \"SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY('ProductVersion')));\",\n      \"SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX('.', @ms_ver)+1, 20)) AS 'version'\"\n    ].join(' ');\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    const query = (table, attrs) => `IF OBJECT_ID('${table}', 'U') IS NULL CREATE TABLE ${table} (${attrs})`,\n      primaryKeys = [],\n      foreignKeys = {},\n      attrStr = [];\n\n    let commentStr = '';\n\n    for (const attr in attributes) {\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n\n        if (dataType.includes('COMMENT ')) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          const commentText = commentMatch[2].replace('COMMENT', '').trim();\n          commentStr += this.commentTemplate(commentText, tableName, attr);\n          // remove comment related substring from dataType\n          dataType = commentMatch[1];\n        }\n\n        if (dataType.includes('PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (dataType.includes('REFERENCES')) {\n            // MSSQL doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n          }\n        } else if (dataType.includes('REFERENCES')) {\n          // MSSQL doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n      }\n    }\n\n\n    let attributesClause = attrStr.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n          attributesClause += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return `${query(this.quoteTable(tableName), attributesClause)};${commentStr}`;\n  }\n\n  describeTableQuery(tableName, schema) {\n    let sql = [\n      'SELECT',\n      \"c.COLUMN_NAME AS 'Name',\",\n      \"c.DATA_TYPE AS 'Type',\",\n      \"c.CHARACTER_MAXIMUM_LENGTH AS 'Length',\",\n      \"c.IS_NULLABLE as 'IsNull',\",\n      \"COLUMN_DEFAULT AS 'Default',\",\n      \"pk.CONSTRAINT_TYPE AS 'Constraint',\",\n      \"COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',\",\n      \"prop.value AS 'Comment'\",\n      'FROM',\n      'INFORMATION_SCHEMA.TABLES t',\n      'INNER JOIN',\n      'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA',\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ',\n      'cu.column_name, tc.CONSTRAINT_TYPE ',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu ',\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ',\n      'and tc.constraint_name=cu.constraint_name ',\n      'and tc.CONSTRAINT_TYPE=\\'PRIMARY KEY\\') pk ',\n      'ON pk.table_schema=c.table_schema ',\n      'AND pk.table_name=c.table_name ',\n      'AND pk.column_name=c.column_name ',\n      'INNER JOIN sys.columns AS sc',\n      \"ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name\",\n      'LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id',\n      'AND prop.minor_id = sc.column_id',\n      \"AND prop.name = 'MS_Description'\",\n      'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName)\n    ].join(' ');\n\n    if (schema) {\n      sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;\n    }\n\n    return sql;\n  }\n\n  renameTableQuery(before, after) {\n    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;\n  }\n\n  showTablesQuery() {\n    return \"SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';\";\n  }\n\n  dropTableQuery(tableName) {\n    const qouteTbl = this.quoteTable(tableName);\n    return `IF OBJECT_ID('${qouteTbl}', 'U') IS NOT NULL DROP TABLE ${qouteTbl};`;\n  }\n\n  addColumnQuery(table, key, dataType) {\n    // FIXME: attributeToSQL SHOULD be using attributes in addColumnQuery\n    //        but instead we need to pass the key along as the field here\n    dataType.field = key;\n    let commentStr = '';\n\n    if (dataType.comment && _.isString(dataType.comment)) {\n      commentStr = this.commentTemplate(dataType.comment, table, key);\n      // attributeToSQL will try to include `COMMENT 'Comment Text'` when it returns if the comment key\n      // is present. This is needed for createTable statement where that part is extracted with regex.\n      // Here we can intercept the object and remove comment property since we have the original object.\n      delete dataType['comment'];\n    }\n\n    const def = this.attributeToSQL(dataType, {\n      context: 'addColumn'\n    });\n    return `ALTER TABLE ${this.quoteTable(table)} ADD ${this.quoteIdentifier(key)} ${def};${commentStr}`;\n  }\n\n  commentTemplate(comment, table, column) {\n    return ' EXEC sp_addextendedproperty ' +\n        `@name = N'MS_Description', @value = ${this.escape(comment)}, ` +\n        '@level0type = N\\'Schema\\', @level0name = \\'dbo\\', ' +\n        `@level1type = N'Table', @level1name = ${this.quoteIdentifier(table)}, ` +\n        `@level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP COLUMN ${this.quoteIdentifier(attributeName)};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [],\n      constraintString = [];\n    let commentString = '';\n\n    for (const attributeName in attributes) {\n      const quotedAttrName = this.quoteIdentifier(attributeName);\n      let definition = attributes[attributeName];\n      if (definition.includes('COMMENT ')) {\n        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);\n        const commentText = commentMatch[2].replace('COMMENT', '').trim();\n        commentString += this.commentTemplate(commentText, tableName, attributeName);\n        // remove comment related substring from dataType\n        definition = commentMatch[1];\n      }\n      if (definition.includes('REFERENCES')) {\n        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, '')}`);\n      } else {\n        attrString.push(`${quotedAttrName} ${definition}`);\n      }\n    }\n\n    let finalQuery = '';\n    if (attrString.length) {\n      finalQuery += `ALTER COLUMN ${attrString.join(', ')}`;\n      finalQuery += constraintString.length ? ' ' : '';\n    }\n    if (constraintString.length) {\n      finalQuery += `ADD ${constraintString.join(', ')}`;\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} ${finalQuery};${commentString}`;\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const newName = Object.keys(attributes)[0];\n    return `EXEC sp_rename '${this.quoteTable(tableName)}.${attrBefore}', '${newName}', 'COLUMN';`;\n  }\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    const quotedTable = this.quoteTable(tableName);\n    options = options || {};\n    attributes = attributes || {};\n\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n\n\n\n    let needIdentityInsertWrapper = false,\n      outputFragment = '';\n\n    if (options.returning) {\n      outputFragment = ' OUTPUT INSERTED.*';\n    }\n\n    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;\n\n    attrValueHashes.forEach(attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        allQueries.push(emptyQuery);\n        return;\n      }\n\n      // normal case\n      _.forOwn(attrValueHash, (value, key) => {\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\n          needIdentityInsertWrapper = true;\n        }\n\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement)\n            return;\n\n          allAttributes.push(key);\n        }\n      });\n    });\n\n    if (allAttributes.length > 0) {\n      attrValueHashes.forEach(attrValueHash => {\n        tuples.push(`(${\n          allAttributes.map(key =>\n            this.escape(attrValueHash[key])).join(',')\n        })`);\n      });\n\n      const quotedAttributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(',');\n      allQueries.push(tupleStr => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);\n    }\n    const commands = [];\n    let offset = 0;\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\n    while (offset < Math.max(tuples.length, 1)) {\n      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));\n      let generatedQuery = allQueries.map(v => typeof v === 'string' ? v : v(tupleStr)).join(';');\n      if (needIdentityInsertWrapper) {\n        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;\n      }\n      commands.push(generatedQuery);\n      offset += batch;\n    }\n    return commands.join(';');\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    if (options.limit) {\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit)})`;\n      sql.query = sql.query.replace('UPDATE', updateArgs);\n    }\n    return sql;\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysAttrs = [];\n    const identityAttrs = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n    let needIdentityInsertWrapper = false;\n\n    //Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n    for (const key in model.rawAttributes) {\n      if (model.rawAttributes[key].primaryKey) {\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].unique) {\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\n      }\n      if (model.rawAttributes[key].autoIncrement) {\n        identityAttrs.push(model.rawAttributes[key].field || key);\n      }\n    }\n\n    //Add unique indexes defined by indexes option to uniqueAttrs\n    for (const index of model._indexes) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key])).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; //Virtual Table\n    let joinCondition;\n\n    //IDENTITY_INSERT Condition\n    identityAttrs.forEach(key => {\n      if (updateValues[key] && updateValues[key] !== null) {\n        needIdentityInsertWrapper = true;\n        /*\n         * IDENTITY_INSERT Column Cannot be updated, only inserted\n         * http://stackoverflow.com/a/30176254/2254360\n         */\n      }\n    });\n\n    //Filter NULL Clauses\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n      for (const key in clause) {\n        if (!clause[key]) {\n          valid = false;\n          break;\n        }\n      }\n      return valid;\n    });\n\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        if (primaryKeysAttrs.includes(keys[0])) {\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\n          break;\n        }\n      }\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    }\n\n    // Remove the IDENTITY_INSERT Column from update\n    const updateSnippet = updateKeys.filter(key => !identityAttrs.includes(key))\n      .map(key => {\n        const value = this.escape(updateValues[key]);\n        key = this.quoteIdentifier(key);\n        return `${targetTableAlias}.${key} = ${value}`;\n      }).join(', ');\n\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` WHEN MATCHED THEN UPDATE SET ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\n    if (needIdentityInsertWrapper) {\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\n    }\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    let limit = '';\n\n    if (options.limit) {\n      limit = ` TOP(${this.escape(options.limit)})`;\n    }\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    return `DELETE${limit} FROM ${table}${whereClause}; SELECT @@ROWCOUNT AS AFFECTEDROWS;`;\n  }\n\n  showIndexesQuery(tableName) {\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;\n  }\n\n  showConstraintsQuery(tableName) {\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;\n  }\n\n  attributeToSQL(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    // handle self referential constraints\n    if (attribute.references) {\n\n      if (attribute.Model && attribute.Model.tableName === attribute.references.model) {\n        this.sequelize.log('MSSQL does not support self referencial constraints, '\n          + 'we will remove it but we recommend restructuring your query');\n        attribute.onDelete = '';\n        attribute.onUpdate = '';\n      }\n    }\n\n    let template;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) attribute.values = attribute.type.values;\n\n      // enums are a special case\n      template = attribute.type.toSql();\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(', ') }))`;\n      return template;\n    }\n    template = attribute.type.toString();\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ' NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' IDENTITY(1,1)';\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true &&\n        Utils.defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate) {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {},\n      existingConstraints = [];\n    let key,\n      attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n\n        if (existingConstraints.includes(attribute.references.model.toString())) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(attribute.references.model.toString());\n\n          // NOTE: this really just disables cascading updates for all\n          //       definitions. Can be made more robust to support the\n          //       few cases where MSSQL actually supports them\n          attribute.onUpdate = '';\n        }\n\n      }\n\n      if (key && !attribute.field) attribute.field = key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  }\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  }\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  }\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  }\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  }\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  }\n\n  /**\n   * Generate common SQL prefix for ForeignKeysQuery.\n   *\n   * @param {string} catalogName\n   * @returns {string}\n   */\n  _getForeignKeysQueryPrefix(catalogName) {\n    return `${'SELECT ' +\n        'constraint_name = OBJ.NAME, ' +\n        'constraintName = OBJ.NAME, '}${\n      catalogName ? `constraintCatalog = '${catalogName}', ` : ''\n    }constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), ` +\n        'tableName = TB.NAME, ' +\n        `tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${\n          catalogName ? `tableCatalog = '${catalogName}', ` : ''\n        }columnName = COL.NAME, ` +\n        `referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${\n          catalogName ? `referencedCatalog = '${catalogName}', ` : ''\n        }referencedTableName = RTB.NAME, ` +\n        'referencedColumnName = RCOL.NAME ' +\n      'FROM sys.foreign_key_columns FKC ' +\n        'INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID ' +\n        'INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID ' +\n        'INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID ' +\n        'INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID ' +\n        'INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * @param {string|Object} table\n   * @param {string} catalogName database name\n   * @returns {string}\n   */\n  getForeignKeysQuery(table, catalogName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix(catalogName)\n    } WHERE TB.NAME =${wrapSingleQuote(tableName)}`;\n\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n    return sql;\n  }\n\n  getForeignKeyQuery(table, attributeName) {\n    const tableName = table.tableName || table;\n    let sql = `${this._getForeignKeysQueryPrefix()\n    } WHERE TB.NAME =${wrapSingleQuote(tableName)\n    } AND COL.NAME =${wrapSingleQuote(attributeName)}`;\n\n    if (table.schema) {\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\n    }\n\n    return sql;\n  }\n\n  getPrimaryKeyConstraintQuery(table, attributeName) {\n    const tableName = wrapSingleQuote(table.tableName || table);\n    return [\n      'SELECT K.TABLE_NAME AS tableName,',\n      'K.COLUMN_NAME AS columnName,',\n      'K.CONSTRAINT_NAME AS constraintName',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K',\n      'ON C.TABLE_NAME = K.TABLE_NAME',\n      'AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG',\n      'AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA',\n      'AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME',\n      'WHERE C.CONSTRAINT_TYPE = \\'PRIMARY KEY\\'',\n      `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`,\n      `AND K.TABLE_NAME = ${tableName};`\n    ].join(' ');\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP ${this.quoteIdentifier(foreignKey)}`;\n  }\n\n  getDefaultConstraintQuery(tableName, attributeName) {\n    const quotedTable = this.quoteTable(tableName);\n    return 'SELECT name FROM sys.default_constraints ' +\n      `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U') ` +\n      `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}') ` +\n      `AND object_id = OBJECT_ID('${quotedTable}', 'U'));`;\n  }\n\n  dropConstraintQuery(tableName, constraintName) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(constraintName)};`;\n  }\n\n  setIsolationLevelQuery() {\n\n  }\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'BEGIN TRANSACTION;';\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  }\n\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\n    let topFragment = '';\n    let mainFragment = `SELECT ${attributes.join(', ')} FROM ${tables}`;\n\n    // Handle SQL Server 2008 with TOP instead of LIMIT\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      if (options.limit) {\n        topFragment = `TOP ${options.limit} `;\n      }\n      if (options.offset) {\n        const offset = options.offset || 0,\n          isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\n        let orders = { mainQueryOrder: [] };\n        if (options.order) {\n          orders = this.getQueryOrders(options, model, isSubQuery);\n        }\n\n        if (!orders.mainQueryOrder.length) {\n          orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\n        }\n\n        const tmpTable = mainTableAs ? mainTableAs : 'OffsetTable';\n        const whereFragment = where ? ` WHERE ${where}` : '';\n\n        /*\n         * For earlier versions of SQL server, we need to nest several queries\n         * in order to emulate the OFFSET behavior.\n         *\n         * 1. The outermost query selects all items from the inner query block.\n         *    This is due to a limitation in SQL server with the use of computed\n         *    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.\n         * 2. The next query handles the LIMIT and OFFSET behavior by getting\n         *    the TOP N rows of the query where the row number is > OFFSET\n         * 3. The innermost query is the actual set we want information from\n         */\n        const fragment = `SELECT TOP 100 PERCENT ${attributes.join(', ')} FROM ` +\n                        `(SELECT ${topFragment}*` +\n                          ` FROM (SELECT ROW_NUMBER() OVER (ORDER BY ${orders.mainQueryOrder.join(', ')}) as row_num, * ` +\n                            ` FROM ${tables} AS ${tmpTable}${whereFragment})` +\n                          ` AS ${tmpTable} WHERE row_num > ${offset})` +\n                        ` AS ${tmpTable}`;\n        return fragment;\n      }\n      mainFragment = `SELECT ${topFragment}${attributes.join(', ')} FROM ${tables}`;\n    }\n\n    if (mainTableAs) {\n      mainFragment += ` AS ${mainTableAs}`;\n    }\n\n    if (options.tableHint && TableHints[options.tableHint]) {\n      mainFragment += ` WITH (${TableHints[options.tableHint]})`;\n    }\n\n    return mainFragment;\n  }\n\n  addLimitAndOffset(options, model) {\n    // Skip handling of limit and offset as postfixes for older SQL Server versions\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\n      return '';\n    }\n\n    const offset = options.offset || 0;\n    const isSubQuery = options.subQuery === undefined\n      ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation\n      : options.subQuery;\n\n    let fragment = '';\n    let orders = {};\n\n    if (options.order) {\n      orders = this.getQueryOrders(options, model, isSubQuery);\n    }\n\n    if (options.limit || options.offset) {\n      if (!options.order || options.include && !orders.subQueryOrder.length) {\n        fragment += options.order && !isSubQuery ? ', ' : ' ORDER BY ';\n        fragment += `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(model.primaryKeyField)}`;\n      }\n\n      if (options.offset || options.limit) {\n        fragment += ` OFFSET ${this.escape(offset)} ROWS`;\n      }\n\n      if (options.limit) {\n        fragment += ` FETCH NEXT ${this.escape(options.limit)} ROWS ONLY`;\n      }\n    }\n\n    return fragment;\n  }\n\n  booleanValue(value) {\n    return value ? 1 : 0;\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(Utils.removeTicks(identifier, \"'\"), \"'\");\n}\n\nmodule.exports = MSSQLQueryGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}