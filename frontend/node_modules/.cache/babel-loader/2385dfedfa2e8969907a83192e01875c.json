{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('./utils');\n\nconst sequelizeError = require('./errors');\n\nconst Promise = require('./promise');\n\nconst DataTypes = require('./data-types');\n\nconst BelongsTo = require('./associations/belongs-to');\n\nconst validator = require('./utils/validator-extras').validator;\n/**\n * Instance Validator.\n *\n * @param {Instance} modelInstance The model instance.\n * @param {Object} options A dictionary with options.\n *\n * @private\n */\n\n\nclass InstanceValidator {\n  constructor(modelInstance, options) {\n    options = _.clone(options) || {};\n\n    if (options.fields && !options.skip) {\n      options.skip = _.difference(Object.keys(modelInstance.constructor.rawAttributes), options.fields);\n    } // assign defined and default options\n\n\n    this.options = _.defaults(options, {\n      skip: [],\n      hooks: true\n    });\n    this.modelInstance = modelInstance;\n    /**\n     * Exposes a reference to validator.js. This allows you to add custom validations using `validator.extend`\n     * @name validator\n     * @private\n     */\n\n    this.validator = validator;\n    /**\n     *  All errors will be stored here from the validations.\n     *\n     * @type {Array} Will contain keys that correspond to attributes which will\n     *   be Arrays of Errors.\n     * @private\n     */\n\n    this.errors = [];\n    /**\n     * @type {boolean} Indicates if validations are in progress\n     * @private\n     */\n\n    this.inProgress = false;\n  }\n  /**\n   * The main entry point for the Validation module, invoke to start the dance.\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\n  _validate() {\n    if (this.inProgress) throw new Error('Validations already in progress.');\n    this.inProgress = true;\n    return Promise.all([this._perAttributeValidators().reflect(), this._customValidators().reflect()]).then(() => {\n      if (this.errors.length) {\n        throw new sequelizeError.ValidationError(null, this.errors);\n      }\n    });\n  }\n  /**\n   * Invoke the Validation sequence and run validation hooks if defined\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\n  validate() {\n    return this.options.hooks ? this._validateAndRunHooks() : this._validate();\n  }\n  /**\n   * Invoke the Validation sequence and run hooks\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n\n\n  _validateAndRunHooks() {\n    const runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);\n    return runHooks('beforeValidate', this.modelInstance, this.options).then(() => this._validate().catch(error => runHooks('validationFailed', this.modelInstance, this.options, error).then(newError => {\n      throw newError || error;\n    }))).then(() => runHooks('afterValidate', this.modelInstance, this.options)).return(this.modelInstance);\n  }\n  /**\n   * Will run all the validators defined per attribute (built-in validators and custom validators)\n   *\n   * @returns {Promise<Array.<Promise.PromiseInspection>>} A promise from .reflect().\n   * @private\n   */\n\n\n  _perAttributeValidators() {\n    // promisify all attribute invocations\n    const validators = [];\n\n    _.forIn(this.modelInstance.rawAttributes, (rawAttribute, field) => {\n      if (this.options.skip.includes(field)) {\n        return;\n      }\n\n      const value = this.modelInstance.dataValues[field];\n\n      if (value instanceof Utils.SequelizeMethod) {\n        return;\n      }\n\n      if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {\n        // perform validations based on schema\n        this._validateSchema(rawAttribute, field, value);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(this.modelInstance.validators, field)) {\n        validators.push(this._singleAttrValidate(value, field, rawAttribute.allowNull).reflect());\n      }\n    });\n\n    return Promise.all(validators);\n  }\n  /**\n   * Will run all the custom validators defined in the model's options.\n   *\n   * @returns {Promise<Array.<Promise.PromiseInspection>>} A promise from .reflect().\n   * @private\n   */\n\n\n  _customValidators() {\n    const validators = [];\n\n    _.each(this.modelInstance._modelOptions.validate, (validator, validatorType) => {\n      if (this.options.skip.includes(validatorType)) {\n        return;\n      }\n\n      const valprom = this._invokeCustomValidator(validator, validatorType) // errors are handled in settling, stub this\n      .catch(() => {}).reflect();\n\n      validators.push(valprom);\n    });\n\n    return Promise.all(validators);\n  }\n  /**\n   * Validate a single attribute with all the defined built-in validators and custom validators.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {string} field The field name.\n   * @param {boolean} allowNull Whether or not the schema allows null values\n   *\n   * @returns {Promise} A promise, will always resolve, auto populates error on this.error local object.\n   */\n\n\n  _singleAttrValidate(value, field, allowNull) {\n    // If value is null and allowNull is false, no validators should run (see #9143)\n    if ((value === null || value === undefined) && !allowNull) {\n      // The schema validator (_validateSchema) has already generated the validation error. Nothing to do here.\n      return Promise.resolve();\n    } // Promisify each validator\n\n\n    const validators = [];\n\n    _.forIn(this.modelInstance.validators[field], (test, validatorType) => {\n      if (validatorType === 'isUrl' || validatorType === 'isURL' || validatorType === 'isEmail') {\n        // Preserve backwards compat. Validator.js now expects the second param to isURL and isEmail to be an object\n        if (typeof test === 'object' && test !== null && test.msg) {\n          test = {\n            msg: test.msg\n          };\n        } else if (test === true) {\n          test = {};\n        }\n      } // Custom validators should always run, except if value is null and allowNull is false (see #9143)\n\n\n      if (typeof test === 'function') {\n        validators.push(this._invokeCustomValidator(test, validatorType, true, value, field).reflect());\n        return;\n      } // If value is null, built-in validators should not run (only custom validators have to run) (see #9134).\n\n\n      if (value === null || value === undefined) {\n        return;\n      }\n\n      const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, field); // errors are handled in settling, stub this\n\n\n      validatorPromise.catch(() => {});\n      validators.push(validatorPromise.reflect());\n    });\n\n    return Promise.all(validators).then(results => this._handleReflectedResult(field, value, results));\n  }\n  /**\n   * Prepare and invoke a custom validator.\n   *\n   * @private\n   *\n   * @param {Function} validator The custom validator.\n   * @param {string} validatorType the custom validator type (name).\n   * @param {boolean} optAttrDefined Set to true if custom validator was defined from the attribute\n   * @param {*} optValue value for attribute\n   * @param {string} optField field for attribute\n   *\n   * @returns {Promise} A promise.\n   */\n\n\n  _invokeCustomValidator(validator, validatorType, optAttrDefined, optValue, optField) {\n    let validatorFunction = null; // the validation function to call\n\n    let isAsync = false;\n    const validatorArity = validator.length; // check if validator is async and requires a callback\n\n    let asyncArity = 1;\n    let errorKey = validatorType;\n    let invokeArgs;\n\n    if (optAttrDefined) {\n      asyncArity = 2;\n      invokeArgs = optValue;\n      errorKey = optField;\n    }\n\n    if (validatorArity === asyncArity) {\n      isAsync = true;\n    }\n\n    if (isAsync) {\n      if (optAttrDefined) {\n        validatorFunction = Promise.promisify(validator.bind(this.modelInstance, invokeArgs));\n      } else {\n        validatorFunction = Promise.promisify(validator.bind(this.modelInstance));\n      }\n\n      return validatorFunction().catch(e => this._pushError(false, errorKey, e, optValue, validatorType));\n    }\n\n    return Promise.try(() => validator.call(this.modelInstance, invokeArgs)).catch(e => this._pushError(false, errorKey, e, optValue, validatorType));\n  }\n  /**\n   * Prepare and invoke a build-in validator.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated\n   *\n   * @returns {Object} An object with specific keys to invoke the validator.\n   */\n\n\n  _invokeBuiltinValidator(value, test, validatorType, field) {\n    return Promise.try(() => {\n      // Cast value as string to pass new Validator.js string requirement\n      const valueString = String(value); // check if Validator knows that kind of validation test\n\n      if (typeof validator[validatorType] !== 'function') {\n        throw new Error(`Invalid validator function: ${validatorType}`);\n      }\n\n      const validatorArgs = this._extractValidatorArgs(test, validatorType, field);\n\n      if (!validator[validatorType](valueString, ...validatorArgs)) {\n        throw Object.assign(new Error(test.msg || `Validation ${validatorType} on ${field} failed`), {\n          validatorName: validatorType,\n          validatorArgs\n        });\n      }\n    });\n  }\n  /**\n   * Will extract arguments for the validator.\n   *\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated.\n   *\n   * @private\n   */\n\n\n  _extractValidatorArgs(test, validatorType, field) {\n    let validatorArgs = test.args || test;\n    const isLocalizedValidator = typeof validatorArgs !== 'string' && (validatorType === 'isAlpha' || validatorType === 'isAlphanumeric' || validatorType === 'isMobilePhone');\n\n    if (!Array.isArray(validatorArgs)) {\n      if (validatorType === 'isImmutable') {\n        validatorArgs = [validatorArgs, field, this.modelInstance];\n      } else if (isLocalizedValidator || validatorType === 'isIP') {\n        validatorArgs = [];\n      } else {\n        validatorArgs = [validatorArgs];\n      }\n    } else {\n      validatorArgs = validatorArgs.slice(0);\n    }\n\n    return validatorArgs;\n  }\n  /**\n   * Will validate a single field against its schema definition (isnull).\n   *\n   * @param {Object} rawAttribute As defined in the Schema.\n   * @param {string} field The field name.\n   * @param {*} value anything.\n   *\n   * @private\n   */\n\n\n  _validateSchema(rawAttribute, field, value) {\n    if (rawAttribute.allowNull === false && (value === null || value === undefined)) {\n      const association = _.values(this.modelInstance.constructor.associations).find(association => association instanceof BelongsTo && association.foreignKey === rawAttribute.fieldName);\n\n      if (!association || !this.modelInstance.get(association.associationAccessor)) {\n        const validators = this.modelInstance.validators[field];\n\n        const errMsg = _.get(validators, 'notNull.msg', `${this.modelInstance.constructor.name}.${field} cannot be null`);\n\n        this.errors.push(new sequelizeError.ValidationErrorItem(errMsg, 'notNull Violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n        field, value, this.modelInstance, 'is_null'));\n      }\n    }\n\n    if (rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type instanceof DataTypes.TEXT || rawAttribute.type instanceof DataTypes.CITEXT) {\n      if (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils.SequelizeMethod) && !Buffer.isBuffer(value)) {\n        this.errors.push(new sequelizeError.ValidationErrorItem(`${field} cannot be an array or an object`, 'string violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n        field, value, this.modelInstance, 'not_a_string'));\n      }\n    }\n  }\n  /**\n   * Handles the returned result of a Promise.reflect.\n   *\n   * If errors are found it populates this.error.\n   *\n   * @param {string} field The attribute name.\n   * @param {string|number} value The data value.\n   * @param {Array<Promise.PromiseInspection>} promiseInspections objects.\n   *\n   * @private\n   */\n\n\n  _handleReflectedResult(field, value, promiseInspections) {\n    for (const promiseInspection of promiseInspections) {\n      if (promiseInspection.isRejected()) {\n        const rejection = promiseInspection.error();\n        const isBuiltIn = !!rejection.validatorName;\n\n        this._pushError(isBuiltIn, field, rejection, value, rejection.validatorName, rejection.validatorArgs);\n      }\n    }\n  }\n  /**\n   * Signs all errors retaining the original.\n   *\n   * @param {boolean}       isBuiltin   - Determines if error is from builtin validator.\n   * @param {string}        errorKey    - name of invalid attribute.\n   * @param {Error|string}  rawError    - The original error.\n   * @param {string|number} value       - The data that triggered the error.\n   * @param {string}        fnName      - Name of the validator, if any\n   * @param {Array}         fnArgs      - Arguments for the validator [function], if any\n   *\n   * @private\n   */\n\n\n  _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {\n    const message = rawError.message || rawError || 'Validation error';\n    const error = new sequelizeError.ValidationErrorItem(message, 'Validation error', // sequelizeError.ValidationErrorItem.Origins.FUNCTION,\n    errorKey, value, this.modelInstance, fnName, isBuiltin ? fnName : undefined, isBuiltin ? fnArgs : undefined);\n    error[InstanceValidator.RAW_KEY_NAME] = rawError;\n    this.errors.push(error);\n  }\n\n}\n/**\n * @define {string} The error key for arguments as passed by custom validators\n * @private\n */\n\n\nInstanceValidator.RAW_KEY_NAME = 'original';\nmodule.exports = InstanceValidator;\nmodule.exports.InstanceValidator = InstanceValidator;\nmodule.exports.default = InstanceValidator;","map":{"version":3,"names":["_","require","Utils","sequelizeError","Promise","DataTypes","BelongsTo","validator","InstanceValidator","constructor","modelInstance","options","clone","fields","skip","difference","Object","keys","rawAttributes","defaults","hooks","errors","inProgress","_validate","Error","all","_perAttributeValidators","reflect","_customValidators","then","length","ValidationError","validate","_validateAndRunHooks","runHooks","bind","catch","error","newError","return","validators","forIn","rawAttribute","field","includes","value","dataValues","SequelizeMethod","_autoGenerated","autoIncrement","_validateSchema","prototype","hasOwnProperty","call","push","_singleAttrValidate","allowNull","each","_modelOptions","validatorType","valprom","_invokeCustomValidator","undefined","resolve","test","msg","validatorPromise","_invokeBuiltinValidator","results","_handleReflectedResult","optAttrDefined","optValue","optField","validatorFunction","isAsync","validatorArity","asyncArity","errorKey","invokeArgs","promisify","e","_pushError","try","valueString","String","validatorArgs","_extractValidatorArgs","assign","validatorName","args","isLocalizedValidator","Array","isArray","slice","association","values","associations","find","foreignKey","fieldName","get","associationAccessor","errMsg","name","ValidationErrorItem","type","STRING","TEXT","CITEXT","isObject","Buffer","isBuffer","promiseInspections","promiseInspection","isRejected","rejection","isBuiltIn","isBuiltin","rawError","fnName","fnArgs","message","RAW_KEY_NAME","module","exports","default"],"sources":["/home/brian/node_modules/sequelize/lib/instance-validator.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('./utils');\nconst sequelizeError = require('./errors');\nconst Promise = require('./promise');\nconst DataTypes = require('./data-types');\nconst BelongsTo = require('./associations/belongs-to');\nconst validator = require('./utils/validator-extras').validator;\n\n/**\n * Instance Validator.\n *\n * @param {Instance} modelInstance The model instance.\n * @param {Object} options A dictionary with options.\n *\n * @private\n */\nclass InstanceValidator {\n  constructor(modelInstance, options) {\n    options = _.clone(options) || {};\n\n    if (options.fields && !options.skip) {\n      options.skip = _.difference(Object.keys(modelInstance.constructor.rawAttributes), options.fields);\n    }\n\n    // assign defined and default options\n    this.options = _.defaults(options, {\n      skip: [],\n      hooks: true\n    });\n\n    this.modelInstance = modelInstance;\n\n    /**\n     * Exposes a reference to validator.js. This allows you to add custom validations using `validator.extend`\n     * @name validator\n     * @private\n     */\n    this.validator = validator;\n\n    /**\n     *  All errors will be stored here from the validations.\n     *\n     * @type {Array} Will contain keys that correspond to attributes which will\n     *   be Arrays of Errors.\n     * @private\n     */\n    this.errors = [];\n\n    /**\n     * @type {boolean} Indicates if validations are in progress\n     * @private\n     */\n    this.inProgress = false;\n  }\n\n  /**\n   * The main entry point for the Validation module, invoke to start the dance.\n   *\n   * @returns {Promise}\n   * @private\n   */\n  _validate() {\n    if (this.inProgress) throw new Error('Validations already in progress.');\n\n    this.inProgress = true;\n\n    return Promise.all([\n      this._perAttributeValidators().reflect(),\n      this._customValidators().reflect()\n    ]).then(() => {\n      if (this.errors.length) {\n        throw new sequelizeError.ValidationError(null, this.errors);\n      }\n    });\n  }\n\n  /**\n   * Invoke the Validation sequence and run validation hooks if defined\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n  validate() {\n    return this.options.hooks ? this._validateAndRunHooks() : this._validate();\n  }\n\n  /**\n   * Invoke the Validation sequence and run hooks\n   *   - Before Validation Model Hooks\n   *   - Validation\n   *   - On validation success: After Validation Model Hooks\n   *   - On validation failure: Validation Failed Model Hooks\n   *\n   * @returns {Promise}\n   * @private\n   */\n  _validateAndRunHooks() {\n    const runHooks = this.modelInstance.constructor.runHooks.bind(this.modelInstance.constructor);\n    return runHooks('beforeValidate', this.modelInstance, this.options)\n      .then(() =>\n        this._validate()\n          .catch(error => runHooks('validationFailed', this.modelInstance, this.options, error)\n            .then(newError => { throw newError || error; }))\n      )\n      .then(() => runHooks('afterValidate', this.modelInstance, this.options))\n      .return(this.modelInstance);\n  }\n\n  /**\n   * Will run all the validators defined per attribute (built-in validators and custom validators)\n   *\n   * @returns {Promise<Array.<Promise.PromiseInspection>>} A promise from .reflect().\n   * @private\n   */\n  _perAttributeValidators() {\n    // promisify all attribute invocations\n    const validators = [];\n\n    _.forIn(this.modelInstance.rawAttributes, (rawAttribute, field) => {\n      if (this.options.skip.includes(field)) {\n        return;\n      }\n\n      const value = this.modelInstance.dataValues[field];\n\n      if (value instanceof Utils.SequelizeMethod) {\n        return;\n      }\n\n      if (!rawAttribute._autoGenerated && !rawAttribute.autoIncrement) {\n        // perform validations based on schema\n        this._validateSchema(rawAttribute, field, value);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(this.modelInstance.validators, field)) {\n        validators.push(this._singleAttrValidate(value, field, rawAttribute.allowNull).reflect());\n      }\n    });\n\n    return Promise.all(validators);\n  }\n\n  /**\n   * Will run all the custom validators defined in the model's options.\n   *\n   * @returns {Promise<Array.<Promise.PromiseInspection>>} A promise from .reflect().\n   * @private\n   */\n  _customValidators() {\n    const validators = [];\n    _.each(this.modelInstance._modelOptions.validate, (validator, validatorType) => {\n      if (this.options.skip.includes(validatorType)) {\n        return;\n      }\n\n      const valprom = this._invokeCustomValidator(validator, validatorType)\n        // errors are handled in settling, stub this\n        .catch(() => {})\n        .reflect();\n\n      validators.push(valprom);\n    });\n\n    return Promise.all(validators);\n  }\n\n  /**\n   * Validate a single attribute with all the defined built-in validators and custom validators.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {string} field The field name.\n   * @param {boolean} allowNull Whether or not the schema allows null values\n   *\n   * @returns {Promise} A promise, will always resolve, auto populates error on this.error local object.\n   */\n  _singleAttrValidate(value, field, allowNull) {\n    // If value is null and allowNull is false, no validators should run (see #9143)\n    if ((value === null || value === undefined) && !allowNull) {\n      // The schema validator (_validateSchema) has already generated the validation error. Nothing to do here.\n      return Promise.resolve();\n    }\n\n    // Promisify each validator\n    const validators = [];\n    _.forIn(this.modelInstance.validators[field], (test, validatorType) => {\n\n      if (validatorType === 'isUrl' || validatorType === 'isURL' || validatorType === 'isEmail') {\n        // Preserve backwards compat. Validator.js now expects the second param to isURL and isEmail to be an object\n        if (typeof test === 'object' && test !== null && test.msg) {\n          test = {\n            msg: test.msg\n          };\n        } else if (test === true) {\n          test = {};\n        }\n      }\n\n      // Custom validators should always run, except if value is null and allowNull is false (see #9143)\n      if (typeof test === 'function') {\n        validators.push(this._invokeCustomValidator(test, validatorType, true, value, field).reflect());\n        return;\n      }\n\n      // If value is null, built-in validators should not run (only custom validators have to run) (see #9134).\n      if (value === null || value === undefined) {\n        return;\n      }\n\n      const validatorPromise = this._invokeBuiltinValidator(value, test, validatorType, field);\n      // errors are handled in settling, stub this\n      validatorPromise.catch(() => {});\n      validators.push(validatorPromise.reflect());\n    });\n\n    return Promise\n      .all(validators)\n      .then(results => this._handleReflectedResult(field, value, results));\n  }\n\n  /**\n   * Prepare and invoke a custom validator.\n   *\n   * @private\n   *\n   * @param {Function} validator The custom validator.\n   * @param {string} validatorType the custom validator type (name).\n   * @param {boolean} optAttrDefined Set to true if custom validator was defined from the attribute\n   * @param {*} optValue value for attribute\n   * @param {string} optField field for attribute\n   *\n   * @returns {Promise} A promise.\n   */\n  _invokeCustomValidator(validator, validatorType, optAttrDefined, optValue, optField) {\n    let validatorFunction = null; // the validation function to call\n    let isAsync = false;\n\n    const validatorArity = validator.length;\n    // check if validator is async and requires a callback\n    let asyncArity = 1;\n    let errorKey = validatorType;\n    let invokeArgs;\n    if (optAttrDefined) {\n      asyncArity = 2;\n      invokeArgs = optValue;\n      errorKey = optField;\n    }\n    if (validatorArity === asyncArity) {\n      isAsync = true;\n    }\n\n    if (isAsync) {\n      if (optAttrDefined) {\n        validatorFunction = Promise.promisify(validator.bind(this.modelInstance, invokeArgs));\n      } else {\n        validatorFunction = Promise.promisify(validator.bind(this.modelInstance));\n      }\n      return validatorFunction()\n        .catch(e => this._pushError(false, errorKey, e, optValue, validatorType));\n    }\n    return Promise\n      .try(() => validator.call(this.modelInstance, invokeArgs))\n      .catch(e => this._pushError(false, errorKey, e, optValue, validatorType));\n  }\n\n  /**\n   * Prepare and invoke a build-in validator.\n   *\n   * @private\n   *\n   * @param {*} value Anything.\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated\n   *\n   * @returns {Object} An object with specific keys to invoke the validator.\n   */\n  _invokeBuiltinValidator(value, test, validatorType, field) {\n    return Promise.try(() => {\n      // Cast value as string to pass new Validator.js string requirement\n      const valueString = String(value);\n      // check if Validator knows that kind of validation test\n      if (typeof validator[validatorType] !== 'function') {\n        throw new Error(`Invalid validator function: ${validatorType}`);\n      }\n\n      const validatorArgs = this._extractValidatorArgs(test, validatorType, field);\n\n      if (!validator[validatorType](valueString, ...validatorArgs)) {\n        throw Object.assign(new Error(test.msg || `Validation ${validatorType} on ${field} failed`), { validatorName: validatorType, validatorArgs });\n      }\n    });\n  }\n\n  /**\n   * Will extract arguments for the validator.\n   *\n   * @param {*} test The test case.\n   * @param {string} validatorType One of known to Sequelize validators.\n   * @param {string} field The field that is being validated.\n   *\n   * @private\n   */\n  _extractValidatorArgs(test, validatorType, field) {\n    let validatorArgs = test.args || test;\n    const isLocalizedValidator = typeof validatorArgs !== 'string' && (validatorType === 'isAlpha' || validatorType === 'isAlphanumeric' || validatorType === 'isMobilePhone');\n\n    if (!Array.isArray(validatorArgs)) {\n      if (validatorType === 'isImmutable') {\n        validatorArgs = [validatorArgs, field, this.modelInstance];\n      } else if (isLocalizedValidator || validatorType === 'isIP') {\n        validatorArgs = [];\n      } else {\n        validatorArgs = [validatorArgs];\n      }\n    } else {\n      validatorArgs = validatorArgs.slice(0);\n    }\n    return validatorArgs;\n  }\n\n  /**\n   * Will validate a single field against its schema definition (isnull).\n   *\n   * @param {Object} rawAttribute As defined in the Schema.\n   * @param {string} field The field name.\n   * @param {*} value anything.\n   *\n   * @private\n   */\n  _validateSchema(rawAttribute, field, value) {\n    if (rawAttribute.allowNull === false && (value === null || value === undefined)) {\n      const association = _.values(this.modelInstance.constructor.associations).find(association => association instanceof BelongsTo && association.foreignKey === rawAttribute.fieldName);\n      if (!association || !this.modelInstance.get(association.associationAccessor)) {\n        const validators = this.modelInstance.validators[field];\n        const errMsg = _.get(validators, 'notNull.msg', `${this.modelInstance.constructor.name}.${field} cannot be null`);\n\n        this.errors.push(new sequelizeError.ValidationErrorItem(\n          errMsg,\n          'notNull Violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n          field,\n          value,\n          this.modelInstance,\n          'is_null'\n        ));\n      }\n    }\n\n    if (rawAttribute.type instanceof DataTypes.STRING || rawAttribute.type instanceof DataTypes.TEXT || rawAttribute.type instanceof DataTypes.CITEXT) {\n      if (Array.isArray(value) || _.isObject(value) && !(value instanceof Utils.SequelizeMethod) && !Buffer.isBuffer(value)) {\n        this.errors.push(new sequelizeError.ValidationErrorItem(\n          `${field} cannot be an array or an object`,\n          'string violation', // sequelizeError.ValidationErrorItem.Origins.CORE,\n          field,\n          value,\n          this.modelInstance,\n          'not_a_string'\n        ));\n      }\n    }\n  }\n\n\n  /**\n   * Handles the returned result of a Promise.reflect.\n   *\n   * If errors are found it populates this.error.\n   *\n   * @param {string} field The attribute name.\n   * @param {string|number} value The data value.\n   * @param {Array<Promise.PromiseInspection>} promiseInspections objects.\n   *\n   * @private\n   */\n  _handleReflectedResult(field, value, promiseInspections) {\n    for (const promiseInspection of promiseInspections) {\n      if (promiseInspection.isRejected()) {\n        const rejection = promiseInspection.error();\n        const isBuiltIn = !!rejection.validatorName;\n\n        this._pushError(isBuiltIn, field, rejection, value, rejection.validatorName, rejection.validatorArgs);\n      }\n    }\n  }\n\n  /**\n   * Signs all errors retaining the original.\n   *\n   * @param {boolean}       isBuiltin   - Determines if error is from builtin validator.\n   * @param {string}        errorKey    - name of invalid attribute.\n   * @param {Error|string}  rawError    - The original error.\n   * @param {string|number} value       - The data that triggered the error.\n   * @param {string}        fnName      - Name of the validator, if any\n   * @param {Array}         fnArgs      - Arguments for the validator [function], if any\n   *\n   * @private\n   */\n  _pushError(isBuiltin, errorKey, rawError, value, fnName, fnArgs) {\n    const message = rawError.message || rawError || 'Validation error';\n    const error = new sequelizeError.ValidationErrorItem(\n      message,\n      'Validation error', // sequelizeError.ValidationErrorItem.Origins.FUNCTION,\n      errorKey,\n      value,\n      this.modelInstance,\n      fnName,\n      isBuiltin ? fnName : undefined,\n      isBuiltin ? fnArgs : undefined\n    );\n\n    error[InstanceValidator.RAW_KEY_NAME] = rawError;\n\n    this.errors.push(error);\n  }\n}\n/**\n * @define {string} The error key for arguments as passed by custom validators\n * @private\n */\nInstanceValidator.RAW_KEY_NAME = 'original';\n\nmodule.exports = InstanceValidator;\nmodule.exports.InstanceValidator = InstanceValidator;\nmodule.exports.default = InstanceValidator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}