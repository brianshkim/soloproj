{"ast":null,"code":"'use strict';\n/*\n * cls-bluebird\n * Function to shim `Promise.coroutine`\n *\n * Works by binding the `.next()` and `.throw()` methods of generator to CLS context\n * at time when coroutine is executed.\n *\n * In bluebird v3.x, running the coroutine internally calls `.lastly()` if cancellation is enabled.\n * To prevent unnecessary binding of the `.lastly()` callback to CLS context, this patch\n * temporarily disables the patch on `Promise.prototype.lastly`.\n * NB This patch could break if bluebird internals change, but this is covered by the tests.\n */\n// Modules\n\nvar shimmer = require('shimmer'); // Exports\n\n/**\n * Patch `Promise.coroutine` or `Promise.spawn` to maintain current CLS context after all `yield` statements.\n *\n * @param {string} methodName - method name (either 'coroutine' or 'spawn')\n * @param {Function} Promise - Bluebird Promise constructor to patch\n * @param {Object} ns - CLS namespace to bind callbacks to\n * @returns {undefined}\n */\n\n\nmodule.exports = function (methodName, Promise, ns, v3) {\n  var lastlyPatched = Promise.prototype.lastly,\n      lastlyOriginal = Promise.prototype.lastly.__original; // Patch method\n\n  shimmer.wrap(Promise, methodName, function (original) {\n    return function (generatorFunction, options) {\n      // NB If `generatorFunction` is not a function, do not alter it.\n      // Pass value directly to bluebird which will throw an error.\n      if (typeof generatorFunction === 'function') {\n        // Create proxy generator function\n        var generatorFunctionOriginal = generatorFunction;\n\n        generatorFunction = function () {\n          // Create generator from generator function\n          var generator = generatorFunctionOriginal.apply(this, arguments); // Bind `.next()`, '.throw()' and `.return()` to current CLS context.\n          // NB CLS context is from when coroutine is called, not when created.\n\n          ['next', 'throw', 'return'].forEach(function (name) {\n            if (typeof generator[name] === 'function') generator[name] = ns.bind(generator[name]);\n          });\n          return generator;\n        };\n      } // Temporarily remove patch from `Promise.prototype.lastly` in bluebird v3\n      // to avoid unnecessary binding to CLS context.\n\n\n      var self = this;\n\n      if (methodName === 'spawn' && v3) {\n        return tempPatchLastly(function () {\n          return original.call(self, generatorFunction, options);\n        });\n      }\n\n      var fn = original.call(this, generatorFunction, options);\n\n      if (methodName === 'coroutine' && v3) {\n        return function () {\n          var self = this,\n              args = arguments;\n          return tempPatchLastly(function () {\n            return fn.apply(self, args);\n          });\n        };\n      }\n\n      return fn;\n    };\n  });\n\n  function tempPatchLastly(fn) {\n    Promise.prototype.lastly = lastlyOriginal;\n    var res = fn();\n    Promise.prototype.lastly = lastlyPatched;\n    return res;\n  }\n};","map":{"version":3,"names":["shimmer","require","module","exports","methodName","Promise","ns","v3","lastlyPatched","prototype","lastly","lastlyOriginal","__original","wrap","original","generatorFunction","options","generatorFunctionOriginal","generator","apply","arguments","forEach","name","bind","self","tempPatchLastly","call","fn","args","res"],"sources":["/home/brian/node_modules/cls-bluebird/lib/shimCoroutine.js"],"sourcesContent":["'use strict';\n\n/*\n * cls-bluebird\n * Function to shim `Promise.coroutine`\n *\n * Works by binding the `.next()` and `.throw()` methods of generator to CLS context\n * at time when coroutine is executed.\n *\n * In bluebird v3.x, running the coroutine internally calls `.lastly()` if cancellation is enabled.\n * To prevent unnecessary binding of the `.lastly()` callback to CLS context, this patch\n * temporarily disables the patch on `Promise.prototype.lastly`.\n * NB This patch could break if bluebird internals change, but this is covered by the tests.\n */\n\n// Modules\nvar shimmer = require('shimmer');\n\n// Exports\n\n/**\n * Patch `Promise.coroutine` or `Promise.spawn` to maintain current CLS context after all `yield` statements.\n *\n * @param {string} methodName - method name (either 'coroutine' or 'spawn')\n * @param {Function} Promise - Bluebird Promise constructor to patch\n * @param {Object} ns - CLS namespace to bind callbacks to\n * @returns {undefined}\n */\nmodule.exports = function(methodName, Promise, ns, v3) {\n\tvar lastlyPatched = Promise.prototype.lastly,\n\t\tlastlyOriginal = Promise.prototype.lastly.__original;\n\n\t// Patch method\n\tshimmer.wrap(Promise, methodName, function(original) {\n\t\treturn function(generatorFunction, options) {\n\t\t\t// NB If `generatorFunction` is not a function, do not alter it.\n\t\t\t// Pass value directly to bluebird which will throw an error.\n\t\t\tif (typeof generatorFunction === 'function') {\n\t\t\t\t// Create proxy generator function\n\t\t\t\tvar generatorFunctionOriginal = generatorFunction;\n\t\t\t\tgeneratorFunction = function() {\n\t\t\t\t\t// Create generator from generator function\n\t\t\t\t\tvar generator = generatorFunctionOriginal.apply(this, arguments);\n\n\t\t\t\t\t// Bind `.next()`, '.throw()' and `.return()` to current CLS context.\n\t\t\t\t\t// NB CLS context is from when coroutine is called, not when created.\n\t\t\t\t\t['next', 'throw', 'return'].forEach(function(name) {\n\t\t\t\t\t\tif (typeof generator[name] === 'function') generator[name] = ns.bind(generator[name]);\n\t\t\t\t\t});\n\n\t\t\t\t\treturn generator;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Temporarily remove patch from `Promise.prototype.lastly` in bluebird v3\n\t\t\t// to avoid unnecessary binding to CLS context.\n\t\t\tvar self = this;\n\t\t\tif (methodName === 'spawn' && v3) {\n\t\t\t\treturn tempPatchLastly(function() {\n\t\t\t\t\treturn original.call(self, generatorFunction, options);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar fn = original.call(this, generatorFunction, options);\n\n\t\t\tif (methodName === 'coroutine' && v3) {\n\t\t\t\treturn function() {\n\t\t\t\t\tvar self = this, args = arguments;\n\t\t\t\t\treturn tempPatchLastly(function() {\n\t\t\t\t\t\treturn fn.apply(self, args);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t};\n\t});\n\n\tfunction tempPatchLastly(fn) {\n\t\tPromise.prototype.lastly = lastlyOriginal;\n\t\tvar res = fn();\n\t\tPromise.prototype.lastly = lastlyPatched;\n\t\treturn res;\n\t}\n};\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAASC,UAAT,EAAqBC,OAArB,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsC;EACtD,IAAIC,aAAa,GAAGH,OAAO,CAACI,SAAR,CAAkBC,MAAtC;EAAA,IACCC,cAAc,GAAGN,OAAO,CAACI,SAAR,CAAkBC,MAAlB,CAAyBE,UAD3C,CADsD,CAItD;;EACAZ,OAAO,CAACa,IAAR,CAAaR,OAAb,EAAsBD,UAAtB,EAAkC,UAASU,QAAT,EAAmB;IACpD,OAAO,UAASC,iBAAT,EAA4BC,OAA5B,EAAqC;MAC3C;MACA;MACA,IAAI,OAAOD,iBAAP,KAA6B,UAAjC,EAA6C;QAC5C;QACA,IAAIE,yBAAyB,GAAGF,iBAAhC;;QACAA,iBAAiB,GAAG,YAAW;UAC9B;UACA,IAAIG,SAAS,GAAGD,yBAAyB,CAACE,KAA1B,CAAgC,IAAhC,EAAsCC,SAAtC,CAAhB,CAF8B,CAI9B;UACA;;UACA,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,EAA4BC,OAA5B,CAAoC,UAASC,IAAT,EAAe;YAClD,IAAI,OAAOJ,SAAS,CAACI,IAAD,CAAhB,KAA2B,UAA/B,EAA2CJ,SAAS,CAACI,IAAD,CAAT,GAAkBhB,EAAE,CAACiB,IAAH,CAAQL,SAAS,CAACI,IAAD,CAAjB,CAAlB;UAC3C,CAFD;UAIA,OAAOJ,SAAP;QACA,CAXD;MAYA,CAlB0C,CAoB3C;MACA;;;MACA,IAAIM,IAAI,GAAG,IAAX;;MACA,IAAIpB,UAAU,KAAK,OAAf,IAA0BG,EAA9B,EAAkC;QACjC,OAAOkB,eAAe,CAAC,YAAW;UACjC,OAAOX,QAAQ,CAACY,IAAT,CAAcF,IAAd,EAAoBT,iBAApB,EAAuCC,OAAvC,CAAP;QACA,CAFqB,CAAtB;MAGA;;MAED,IAAIW,EAAE,GAAGb,QAAQ,CAACY,IAAT,CAAc,IAAd,EAAoBX,iBAApB,EAAuCC,OAAvC,CAAT;;MAEA,IAAIZ,UAAU,KAAK,WAAf,IAA8BG,EAAlC,EAAsC;QACrC,OAAO,YAAW;UACjB,IAAIiB,IAAI,GAAG,IAAX;UAAA,IAAiBI,IAAI,GAAGR,SAAxB;UACA,OAAOK,eAAe,CAAC,YAAW;YACjC,OAAOE,EAAE,CAACR,KAAH,CAASK,IAAT,EAAeI,IAAf,CAAP;UACA,CAFqB,CAAtB;QAGA,CALD;MAMA;;MAED,OAAOD,EAAP;IACA,CAzCD;EA0CA,CA3CD;;EA6CA,SAASF,eAAT,CAAyBE,EAAzB,EAA6B;IAC5BtB,OAAO,CAACI,SAAR,CAAkBC,MAAlB,GAA2BC,cAA3B;IACA,IAAIkB,GAAG,GAAGF,EAAE,EAAZ;IACAtB,OAAO,CAACI,SAAR,CAAkBC,MAAlB,GAA2BF,aAA3B;IACA,OAAOqB,GAAP;EACA;AACD,CAxDD"},"metadata":{},"sourceType":"script"}