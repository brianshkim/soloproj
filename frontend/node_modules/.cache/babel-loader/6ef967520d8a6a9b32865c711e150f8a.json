{"ast":null,"code":"'use strict';\n\nconst dataTypes = require('./data-types');\n\nconst {\n  logger\n} = require('./utils/logger');\n\nfunction arrayToList(array, timeZone, dialect, format) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += ', ';\n    }\n\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format);\n    }\n\n    return sql;\n  }, '');\n}\n\nexports.arrayToList = arrayToList;\n\nfunction escape(val, timeZone, dialect, format) {\n  let prependN = false;\n\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n\n  switch (typeof val) {\n    case 'boolean':\n      // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n      // for us. Postgres actually has a boolean type with true/false literals,\n      // but sequelize doesn't use it yet.\n      if (dialect === 'sqlite' || dialect === 'mssql') {\n        return +!!val;\n      }\n\n      return (!!val).toString();\n\n    case 'number':\n      return val.toString();\n\n    case 'string':\n      // In mssql, prepend N to all quoted vals which are originally a string (for\n      // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, {\n      timezone: timeZone\n    });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = escVal => escape(escVal, timeZone, dialect, format);\n\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, {\n        escape: partialEscape\n      });\n    }\n\n    return arrayToList(val, timeZone, dialect, format);\n  }\n\n  if (!val.replace) {\n    throw new Error(`Invalid value ${logger.inspect(val)}`);\n  }\n\n  if (dialect === 'postgres' || dialect === 'sqlite' || dialect === 'mssql') {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, \"''\");\n\n    if (dialect === 'postgres') {\n      // null character is not allowed in Postgres\n      val = val.replace(/\\0/g, '\\\\0');\n    }\n  } else {\n    // eslint-disable-next-line no-control-regex\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, s => {\n      switch (s) {\n        case '\\0':\n          return '\\\\0';\n\n        case '\\n':\n          return '\\\\n';\n\n        case '\\r':\n          return '\\\\r';\n\n        case '\\b':\n          return '\\\\b';\n\n        case '\\t':\n          return '\\\\t';\n\n        case '\\x1a':\n          return '\\\\Z';\n\n        default:\n          return `\\\\${s}`;\n      }\n    });\n  }\n\n  return `${(prependN ? \"N'\" : \"'\") + val}'`;\n}\n\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== 'string') {\n    throw new Error(`Invalid SQL string provided: ${sql}`);\n  }\n\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\n\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, (value, key) => {\n    if ('postgres' === dialect && '::' === value.slice(0, 2)) {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n\n    throw new Error(`Named parameter \"${value}\" has no value in the given object.`);\n  });\n}\n\nexports.formatNamedParameters = formatNamedParameters;","map":{"version":3,"names":["dataTypes","require","logger","arrayToList","array","timeZone","dialect","format","reduce","sql","val","i","Array","isArray","escape","exports","prependN","undefined","toString","Date","DATE","prototype","stringify","timezone","Buffer","isBuffer","BLOB","partialEscape","escVal","ARRAY","replace","Error","inspect","s","values","concat","match","length","shift","formatNamedParameters","value","key","slice"],"sources":["/home/brian/node_modules/sequelize/lib/sql-string.js"],"sourcesContent":["'use strict';\n\nconst dataTypes = require('./data-types');\nconst { logger } = require('./utils/logger');\n\nfunction arrayToList(array, timeZone, dialect, format) {\n  return array.reduce((sql, val, i) => {\n    if (i !== 0) {\n      sql += ', ';\n    }\n    if (Array.isArray(val)) {\n      sql += `(${arrayToList(val, timeZone, dialect, format)})`;\n    } else {\n      sql += escape(val, timeZone, dialect, format);\n    }\n    return sql;\n  }, '');\n}\nexports.arrayToList = arrayToList;\n\nfunction escape(val, timeZone, dialect, format) {\n  let prependN = false;\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n  switch (typeof val) {\n    case 'boolean':\n    // SQLite doesn't have true/false support. MySQL aliases true/false to 1/0\n    // for us. Postgres actually has a boolean type with true/false literals,\n    // but sequelize doesn't use it yet.\n      if (dialect === 'sqlite' || dialect === 'mssql') {\n        return +!!val;\n      }\n      return (!!val).toString();\n    case 'number':\n      return val.toString();\n    case 'string':\n    // In mssql, prepend N to all quoted vals which are originally a string (for\n    // unicode compatibility)\n      prependN = dialect === 'mssql';\n      break;\n  }\n\n  if (val instanceof Date) {\n    val = dataTypes[dialect].DATE.prototype.stringify(val, { timezone: timeZone });\n  }\n\n  if (Buffer.isBuffer(val)) {\n    if (dataTypes[dialect].BLOB) {\n      return dataTypes[dialect].BLOB.prototype.stringify(val);\n    }\n\n    return dataTypes.BLOB.prototype.stringify(val);\n  }\n\n  if (Array.isArray(val)) {\n    const partialEscape = escVal => escape(escVal, timeZone, dialect, format);\n    if (dialect === 'postgres' && !format) {\n      return dataTypes.ARRAY.prototype.stringify(val, { escape: partialEscape });\n    }\n    return arrayToList(val, timeZone, dialect, format);\n  }\n\n  if (!val.replace) {\n    throw new Error(`Invalid value ${logger.inspect(val)}`);\n  }\n\n  if (dialect === 'postgres' || dialect === 'sqlite' || dialect === 'mssql') {\n    // http://www.postgresql.org/docs/8.2/static/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS\n    // http://stackoverflow.com/q/603572/130598\n    val = val.replace(/'/g, \"''\");\n\n    if (dialect === 'postgres') {\n      // null character is not allowed in Postgres\n      val = val.replace(/\\0/g, '\\\\0');\n    }\n  } else {\n    // eslint-disable-next-line no-control-regex\n    val = val.replace(/[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g, s => {\n      switch (s) {\n        case '\\0': return '\\\\0';\n        case '\\n': return '\\\\n';\n        case '\\r': return '\\\\r';\n        case '\\b': return '\\\\b';\n        case '\\t': return '\\\\t';\n        case '\\x1a': return '\\\\Z';\n        default: return `\\\\${s}`;\n      }\n    });\n  }\n  return `${(prependN ? \"N'\" : \"'\") + val}'`;\n}\nexports.escape = escape;\n\nfunction format(sql, values, timeZone, dialect) {\n  values = [].concat(values);\n\n  if (typeof sql !== 'string') {\n    throw new Error(`Invalid SQL string provided: ${sql}`);\n  }\n\n  return sql.replace(/\\?/g, match => {\n    if (!values.length) {\n      return match;\n    }\n\n    return escape(values.shift(), timeZone, dialect, true);\n  });\n}\nexports.format = format;\n\nfunction formatNamedParameters(sql, values, timeZone, dialect) {\n  return sql.replace(/:+(?!\\d)(\\w+)/g, (value, key) => {\n    if ('postgres' === dialect && '::' === value.slice(0, 2)) {\n      return value;\n    }\n\n    if (values[key] !== undefined) {\n      return escape(values[key], timeZone, dialect, true);\n    }\n    throw new Error(`Named parameter \"${value}\" has no value in the given object.`);\n  });\n}\nexports.formatNamedParameters = formatNamedParameters;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}