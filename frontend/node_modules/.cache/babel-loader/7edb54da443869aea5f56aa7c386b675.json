{"ast":null,"code":"'use strict';\n\nconst util = require('util');\n\nconst _ = require('lodash');\n\nconst wkx = require('wkx');\n\nconst sequelizeErrors = require('./errors');\n\nconst Validator = require('./utils/validator-extras').validator;\n\nconst momentTz = require('moment-timezone');\n\nconst moment = require('moment');\n\nconst {\n  logger\n} = require('./utils/logger');\n\nconst warnings = {};\n\nconst {\n  classToInvokable\n} = require('./utils/classToInvokable');\n\nclass ABSTRACT {\n  toString(options) {\n    return this.toSql(options);\n  }\n\n  toSql() {\n    return this.key;\n  }\n\n  stringify(value, options) {\n    if (this._stringify) {\n      return this._stringify(value, options);\n    }\n\n    return value;\n  }\n\n  bindParam(value, options) {\n    if (this._bindParam) {\n      return this._bindParam(value, options);\n    }\n\n    return options.bindParam(this.stringify(value, options));\n  }\n\n  static toString() {\n    return this.name;\n  }\n\n  static warn(link, text) {\n    if (!warnings[text]) {\n      warnings[text] = true;\n      logger.warn(`${text} \\n>> Check: ${link}`);\n    }\n  }\n\n  static extend(oldType) {\n    return new this(oldType.options);\n  }\n\n}\n\nABSTRACT.prototype.dialectTypes = '';\n/**\n * STRING A variable length string\n */\n\nclass STRING extends ABSTRACT {\n  /**\n   * @param {number} [length=255] length of string\n   * @param {boolean} [binary=false] Is this binary?\n   */\n  constructor(length, binary) {\n    super();\n    const options = typeof length === 'object' && length || {\n      length,\n      binary\n    };\n    this.options = options;\n    this._binary = options.binary;\n    this._length = options.length || 255;\n  }\n\n  toSql() {\n    return `VARCHAR(${this._length})${this._binary ? ' BINARY' : ''}`;\n  }\n\n  validate(value) {\n    if (Object.prototype.toString.call(value) !== '[object String]') {\n      if (this.options.binary && Buffer.isBuffer(value) || typeof value === 'number') {\n        return true;\n      }\n\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n\n    return true;\n  }\n\n  get BINARY() {\n    this._binary = true;\n    this.options.binary = true;\n    return this;\n  }\n\n  static get BINARY() {\n    return new this().BINARY;\n  }\n\n}\n/**\n * CHAR A fixed length string\n */\n\n\nclass CHAR extends STRING {\n  /**\n   * @param {number} [length=255] length of string\n   * @param {boolean} [binary=false] Is this binary?\n   */\n  constructor(length, binary) {\n    super(typeof length === 'object' && length || {\n      length,\n      binary\n    });\n  }\n\n  toSql() {\n    return `CHAR(${this._length})${this._binary ? ' BINARY' : ''}`;\n  }\n\n}\n/**\n * Unlimited length TEXT column\n */\n\n\nclass TEXT extends ABSTRACT {\n  /**\n   * @param {string} [length=''] could be tiny, medium, long.\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || {\n      length\n    };\n    this.options = options;\n    this._length = options.length || '';\n  }\n\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case 'tiny':\n        return 'TINYTEXT';\n\n      case 'medium':\n        return 'MEDIUMTEXT';\n\n      case 'long':\n        return 'LONGTEXT';\n\n      default:\n        return this.key;\n    }\n  }\n\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n\n    return true;\n  }\n\n}\n/**\n * An unlimited length case-insensitive text column.\n * Original case is preserved but acts case-insensitive when comparing values (such as when finding or unique constraints).\n * Only available in Postgres and SQLite.\n *\n */\n\n\nclass CITEXT extends ABSTRACT {\n  toSql() {\n    return 'CITEXT';\n  }\n\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n\n    return true;\n  }\n\n}\n/**\n * Base number type which is used to build other types\n */\n\n\nclass NUMBER extends ABSTRACT {\n  /**\n   * @param {Object} options type options\n   * @param {string|number} [options.length] length of type, like `INT(4)`\n   * @param {boolean} [options.zerofill] Is zero filled?\n   * @param {boolean} [options.unsigned] Is unsigned?\n   * @param {string|number} [options.decimals] number of decimal points, used with length `FLOAT(5, 4)`\n   * @param {string|number} [options.precision] defines precision for decimal type\n   * @param {string|number} [options.scale] defines scale for decimal type\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    if (typeof options === 'number') {\n      options = {\n        length: options\n      };\n    }\n\n    this.options = options;\n    this._length = options.length;\n    this._zerofill = options.zerofill;\n    this._decimals = options.decimals;\n    this._precision = options.precision;\n    this._scale = options.scale;\n    this._unsigned = options.unsigned;\n  }\n\n  toSql() {\n    let result = this.key;\n\n    if (this._length) {\n      result += `(${this._length}`;\n\n      if (typeof this._decimals === 'number') {\n        result += `,${this._decimals}`;\n      }\n\n      result += ')';\n    }\n\n    if (this._unsigned) {\n      result += ' UNSIGNED';\n    }\n\n    if (this._zerofill) {\n      result += ' ZEROFILL';\n    }\n\n    return result;\n  }\n\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n\n    return true;\n  }\n\n  _stringify(number) {\n    if (typeof number === 'number' || typeof number === 'boolean' || number === null || number === undefined) {\n      return number;\n    }\n\n    if (typeof number.toString === 'function') {\n      return number.toString();\n    }\n\n    return number;\n  }\n\n  get UNSIGNED() {\n    this._unsigned = true;\n    this.options.unsigned = true;\n    return this;\n  }\n\n  get ZEROFILL() {\n    this._zerofill = true;\n    this.options.zerofill = true;\n    return this;\n  }\n\n  static get UNSIGNED() {\n    return new this().UNSIGNED;\n  }\n\n  static get ZEROFILL() {\n    return new this().ZEROFILL;\n  }\n\n}\n/**\n * A 32 bit integer\n */\n\n\nclass INTEGER extends NUMBER {\n  validate(value) {\n    if (!Validator.isInt(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n\n    return true;\n  }\n\n}\n/**\n * A 8 bit integer\n */\n\n\nclass TINYINT extends INTEGER {}\n/**\n * A 16 bit integer\n */\n\n\nclass SMALLINT extends INTEGER {}\n/**\n * A 24 bit integer\n */\n\n\nclass MEDIUMINT extends INTEGER {}\n/**\n * A 64 bit integer\n */\n\n\nclass BIGINT extends INTEGER {}\n/**\n * Floating point number (4-byte precision).\n */\n\n\nclass FLOAT extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `FLOAT(4)`\n   * @param {string|number} [decimals] number of decimal points, used with length `FLOAT(5, 4)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || {\n      length,\n      decimals\n    });\n  }\n\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid float', value));\n    }\n\n    return true;\n  }\n\n}\n/**\n * Floating point number (4-byte precision).\n */\n\n\nclass REAL extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `REAL(4)`\n   * @param {string|number} [decimals] number of decimal points, used with length `REAL(5, 4)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || {\n      length,\n      decimals\n    });\n  }\n\n}\n/**\n * Floating point number (8-byte precision).\n */\n\n\nclass DOUBLE extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `DOUBLE PRECISION(25)`\n   * @param {string|number} [decimals] number of decimal points, used with length `DOUBLE PRECISION(25, 10)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || {\n      length,\n      decimals\n    });\n  }\n\n}\n/**\n * Decimal type, variable precision, take length as specified by user\n */\n\n\nclass DECIMAL extends NUMBER {\n  /**\n   * @param {string|number} [precision] defines precision\n   * @param {string|number} [scale] defines scale\n   */\n  constructor(precision, scale) {\n    super(typeof precision === 'object' && precision || {\n      precision,\n      scale\n    });\n  }\n\n  toSql() {\n    if (this._precision || this._scale) {\n      return `DECIMAL(${[this._precision, this._scale].filter(_.identity).join(',')})`;\n    }\n\n    return 'DECIMAL';\n  }\n\n  validate(value) {\n    if (!Validator.isDecimal(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid decimal', value));\n    }\n\n    return true;\n  }\n\n} // TODO: Create intermediate class\n\n\nconst protoExtensions = {\n  escape: false,\n\n  _value(value) {\n    if (isNaN(value)) {\n      return 'NaN';\n    }\n\n    if (!isFinite(value)) {\n      const sign = value < 0 ? '-' : '';\n      return `${sign}Infinity`;\n    }\n\n    return value;\n  },\n\n  _stringify(value) {\n    return `'${this._value(value)}'`;\n  },\n\n  _bindParam(value, options) {\n    return options.bindParam(this._value(value));\n  }\n\n};\n\nfor (const floating of [FLOAT, DOUBLE, REAL]) {\n  Object.assign(floating.prototype, protoExtensions);\n}\n/**\n * A boolean / tinyint column, depending on dialect\n */\n\n\nclass BOOLEAN extends ABSTRACT {\n  toSql() {\n    return 'TINYINT(1)';\n  }\n\n  validate(value) {\n    if (!Validator.isBoolean(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid boolean', value));\n    }\n\n    return true;\n  }\n\n  _sanitize(value) {\n    if (value !== null && value !== undefined) {\n      if (Buffer.isBuffer(value) && value.length === 1) {\n        // Bit fields are returned as buffers\n        value = value[0];\n      }\n\n      const type = typeof value;\n\n      if (type === 'string') {\n        // Only take action on valid boolean strings.\n        return value === 'true' ? true : value === 'false' ? false : value;\n      }\n\n      if (type === 'number') {\n        // Only take action on valid boolean integers.\n        return value === 1 ? true : value === 0 ? false : value;\n      }\n    }\n\n    return value;\n  }\n\n}\n\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\n/**\n * A time column\n *\n */\n\nclass TIME extends ABSTRACT {\n  toSql() {\n    return 'TIME';\n  }\n\n}\n/**\n * Date column with timezone, default is UTC\n */\n\n\nclass DATE extends ABSTRACT {\n  /**\n   * @param {string|number} [length] precision to allow storing milliseconds\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || {\n      length\n    };\n    this.options = options;\n    this._length = options.length || '';\n  }\n\n  toSql() {\n    return 'DATETIME';\n  }\n\n  validate(value) {\n    if (!Validator.isDate(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid date', value));\n    }\n\n    return true;\n  }\n\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {\n      return new Date(value);\n    }\n\n    return value;\n  }\n\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value && (value === originalValue || value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {\n      return false;\n    } // not changed when set to same empty value\n\n\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n\n    return true;\n  }\n\n  _applyTimezone(date, options) {\n    if (options.timezone) {\n      if (momentTz.tz.zone(options.timezone)) {\n        return momentTz(date).tz(options.timezone);\n      }\n\n      return date = moment(date).utcOffset(options.timezone);\n    }\n\n    return momentTz(date);\n  }\n\n  _stringify(date, options) {\n    date = this._applyTimezone(date, options); // Z here means current timezone, _not_ UTC\n\n    return date.format('YYYY-MM-DD HH:mm:ss.SSS Z');\n  }\n\n}\n/**\n * A date only column (no timestamp)\n */\n\n\nclass DATEONLY extends ABSTRACT {\n  toSql() {\n    return 'DATE';\n  }\n\n  _stringify(date) {\n    return moment(date).format('YYYY-MM-DD');\n  }\n\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !!value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n\n    return value;\n  }\n\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value && originalValue === value) {\n      return false;\n    } // not changed when set to same empty value\n\n\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\n/**\n * A key / value store column. Only available in Postgres.\n */\n\n\nclass HSTORE extends ABSTRACT {\n  validate(value) {\n    if (!_.isPlainObject(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid hstore', value));\n    }\n\n    return true;\n  }\n\n}\n/**\n * A JSON string column. Available in MySQL, Postgres and SQLite\n */\n\n\nclass JSONTYPE extends ABSTRACT {\n  validate() {\n    return true;\n  }\n\n  _stringify(value) {\n    return JSON.stringify(value);\n  }\n\n}\n/**\n * A binary storage JSON column. Only available in Postgres.\n */\n\n\nclass JSONB extends JSONTYPE {}\n/**\n * A default value of the current timestamp\n */\n\n\nclass NOW extends ABSTRACT {}\n/**\n * Binary storage\n */\n\n\nclass BLOB extends ABSTRACT {\n  /**\n   * @param {string} [length=''] could be tiny, medium, long.\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || {\n      length\n    };\n    this.options = options;\n    this._length = options.length || '';\n  }\n\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case 'tiny':\n        return 'TINYBLOB';\n\n      case 'medium':\n        return 'MEDIUMBLOB';\n\n      case 'long':\n        return 'LONGBLOB';\n\n      default:\n        return this.key;\n    }\n  }\n\n  validate(value) {\n    if (typeof value !== 'string' && !Buffer.isBuffer(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid blob', value));\n    }\n\n    return true;\n  }\n\n  _stringify(value) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n    }\n\n    const hex = value.toString('hex');\n    return this._hexify(hex);\n  }\n\n  _hexify(hex) {\n    return `X'${hex}'`;\n  }\n\n  _bindParam(value, options) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n    }\n\n    return options.bindParam(value);\n  }\n\n}\n\nBLOB.prototype.escape = false;\n/**\n * Range types are data types representing a range of values of some element type (called the range's subtype).\n * Only available in Postgres. See [the Postgres documentation](http://www.postgresql.org/docs/9.4/static/rangetypes.html) for more details\n */\n\nclass RANGE extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} subtype A subtype for range, like RANGE(DATE)\n   */\n  constructor(subtype) {\n    super();\n    const options = _.isPlainObject(subtype) ? subtype : {\n      subtype\n    };\n    if (!options.subtype) options.subtype = new INTEGER();\n\n    if (typeof options.subtype === 'function') {\n      options.subtype = new options.subtype();\n    }\n\n    this._subtype = options.subtype.key;\n    this.options = options;\n  }\n\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid range', value));\n    }\n\n    if (value.length !== 2) {\n      throw new sequelizeErrors.ValidationError('A range must be an array with two elements');\n    }\n\n    return true;\n  }\n\n}\n/**\n * A column storing a unique universal identifier.\n * Use with `UUIDV1` or `UUIDV4` for default values.\n */\n\n\nclass UUID extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n    }\n\n    return true;\n  }\n\n}\n/**\n * A default unique universal identifier generated following the UUID v1 standard\n */\n\n\nclass UUIDV1 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n    }\n\n    return true;\n  }\n\n}\n/**\n * A default unique universal identifier generated following the UUID v4 standard\n */\n\n\nclass UUIDV4 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuidv4', value));\n    }\n\n    return true;\n  }\n\n}\n/**\n * A virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.\n *\n * You could also use it to validate a value before permuting and storing it. VIRTUAL also takes a return type and dependency fields as arguments\n * If a virtual attribute is present in `attributes` it will automatically pull in the extra fields as well.\n * Return type is mostly useful for setups that rely on types like GraphQL.\n *\n * @example <caption>Checking password length before hashing it</caption>\n * sequelize.define('user', {\n *   password_hash: DataTypes.STRING,\n *   password: {\n *     type: DataTypes.VIRTUAL,\n *     set: function (val) {\n *        // Remember to set the data value, otherwise it won't be validated\n *        this.setDataValue('password', val);\n *        this.setDataValue('password_hash', this.salt + val);\n *      },\n *      validate: {\n *         isLongEnough: function (val) {\n *           if (val.length < 7) {\n *             throw new Error(\"Please choose a longer password\")\n *          }\n *       }\n *     }\n *   }\n * })\n *\n * # In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.\n *\n * @example <caption>Virtual with dependency fields</caption>\n * {\n *   active: {\n *     type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\n *     get: function() {\n *       return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)\n *     }\n *   }\n * }\n *\n */\n\n\nclass VIRTUAL extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} [ReturnType] return type for virtual type\n   * @param {Array} [fields] array of fields this virtual type is dependent on\n   */\n  constructor(ReturnType, fields) {\n    super();\n    if (typeof ReturnType === 'function') ReturnType = new ReturnType();\n    this.returnType = ReturnType;\n    this.fields = fields;\n  }\n\n}\n/**\n * An enumeration, Postgres Only\n *\n * @example\n * DataTypes.ENUM('value', 'another value')\n * DataTypes.ENUM(['value', 'another value'])\n * DataTypes.ENUM({\n *   values: ['value', 'another value']\n * })\n */\n\n\nclass ENUM extends ABSTRACT {\n  /**\n   * @param {...any|{ values: any[] }|any[]} args either array of values or options object with values array. It also supports variadic values\n   */\n  constructor() {\n    super();\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const value = args[0];\n    const options = typeof value === 'object' && !Array.isArray(value) && value || {\n      values: args.reduce((result, element) => {\n        return result.concat(Array.isArray(element) ? element : [element]);\n      }, [])\n    };\n    this.values = options.values;\n    this.options = options;\n  }\n\n  validate(value) {\n    if (!this.values.includes(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid choice in %j', value, this.values));\n    }\n\n    return true;\n  }\n\n}\n/**\n * An array of `type`. Only available in Postgres.\n *\n * @example\n * DataTypes.ARRAY(DataTypes.DECIMAL)\n */\n\n\nclass ARRAY extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} type type of array values\n   */\n  constructor(type) {\n    super();\n    const options = _.isPlainObject(type) ? type : {\n      type\n    };\n    this.options = options;\n    this.type = typeof options.type === 'function' ? new options.type() : options.type;\n  }\n\n  toSql() {\n    return `${this.type.toSql()}[]`;\n  }\n\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid array', value));\n    }\n\n    return true;\n  }\n\n  static is(obj, type) {\n    return obj instanceof ARRAY && obj.type instanceof type;\n  }\n\n}\n/**\n * A column storing Geometry information.\n * It is only available in PostgreSQL (with PostGIS), MariaDB or MySQL.\n *\n * GeoJSON is accepted as input and returned as output.\n *\n * In PostGIS, the GeoJSON is parsed using the PostGIS function `ST_GeomFromGeoJSON`.\n * In MySQL it is parsed using the function `GeomFromText`.\n *\n * Therefore, one can just follow the [GeoJSON spec](http://geojson.org/geojson-spec.html) for handling geometry objects.  See the following examples:\n *\n * @example <caption>Defining a Geometry type attribute</caption>\n * DataTypes.GEOMETRY\n * DataTypes.GEOMETRY('POINT')\n * DataTypes.GEOMETRY('POINT', 4326)\n *\n * @example <caption>Create a new point</caption>\n * const point = { type: 'Point', coordinates: [39.807222,-76.984722]};\n *\n * User.create({username: 'username', geometry: point });\n *\n * @example <caption>Create a new linestring</caption>\n * const line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };\n *\n * User.create({username: 'username', geometry: line });\n *\n * @example <caption>Create a new polygon</caption>\n * const polygon = { type: 'Polygon', coordinates: [\n *                 [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n *                   [100.0, 1.0], [100.0, 0.0] ]\n *                 ]};\n *\n * User.create({username: 'username', geometry: polygon });\n *\n * @example <caption>Create a new point with a custom SRID</caption>\n * const point = {\n *   type: 'Point',\n *   coordinates: [39.807222,-76.984722],\n *   crs: { type: 'name', properties: { name: 'EPSG:4326'} }\n * };\n *\n * User.create({username: 'username', geometry: point })\n *\n *\n * @see {@link DataTypes.GEOGRAPHY}\n */\n\n\nclass GEOMETRY extends ABSTRACT {\n  /**\n   * @param {string} [type] Type of geometry data\n   * @param {string} [srid] SRID of type\n   */\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : {\n      type,\n      srid\n    };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n\n  _stringify(value, options) {\n    return `GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n\n  _bindParam(value, options) {\n    return `GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n\n}\n\nGEOMETRY.prototype.escape = false;\n/**\n * A geography datatype represents two dimensional spacial objects in an elliptic coord system.\n *\n * __The difference from geometry and geography type:__\n *\n * PostGIS 1.5 introduced a new spatial type called geography, which uses geodetic measurement instead of Cartesian measurement.\n * Coordinate points in the geography type are always represented in WGS 84 lon lat degrees (SRID 4326),\n * but measurement functions and relationships ST_Distance, ST_DWithin, ST_Length, and ST_Area always return answers in meters or assume inputs in meters.\n *\n * __What is best to use? It depends:__\n *\n * When choosing between the geometry and geography type for data storage, you should consider what you’ll be using it for.\n * If all you do are simple measurements and relationship checks on your data, and your data covers a fairly large area, then most likely you’ll be better off storing your data using the new geography type.\n * Although the new geography data type can cover the globe, the geometry type is far from obsolete.\n * The geometry type has a much richer set of functions than geography, relationship checks are generally faster, and it has wider support currently across desktop and web-mapping tools\n *\n * @example <caption>Defining a Geography type attribute</caption>\n * DataTypes.GEOGRAPHY\n * DataTypes.GEOGRAPHY('POINT')\n * DataTypes.GEOGRAPHY('POINT', 4326)\n */\n\nclass GEOGRAPHY extends ABSTRACT {\n  /**\n   * @param {string} [type] Type of geography data\n   * @param {string} [srid] SRID of type\n   */\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : {\n      type,\n      srid\n    };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n\n  _stringify(value, options) {\n    return `GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n\n  _bindParam(value, options) {\n    return `GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n\n}\n\nGEOGRAPHY.prototype.escape = false;\n/**\n * The cidr type holds an IPv4 or IPv6 network specification. Takes 7 or 19 bytes.\n *\n * Only available for Postgres\n */\n\nclass CIDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isIPRange(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid CIDR', value));\n    }\n\n    return true;\n  }\n\n}\n/**\n * The INET type holds an IPv4 or IPv6 host address, and optionally its subnet. Takes 7 or 19 bytes\n *\n * Only available for Postgres\n */\n\n\nclass INET extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isIP(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid INET', value));\n    }\n\n    return true;\n  }\n\n}\n/**\n * The MACADDR type stores MAC addresses. Takes 6 bytes\n *\n * Only available for Postgres\n *\n */\n\n\nclass MACADDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isMACAddress(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid MACADDR', value));\n    }\n\n    return true;\n  }\n\n}\n/**\n * A convenience class holding commonly used data types. The data types are used when defining a new model using `Sequelize.define`, like this:\n * ```js\n * sequelize.define('model', {\n *   column: DataTypes.INTEGER\n * })\n * ```\n * When defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using `DataTypes.BLOB`, mean\n * that that column will be returned as an instance of `Buffer` when being fetched by sequelize.\n *\n * To provide a length for the data type, you can invoke it like a function: `INTEGER(2)`\n *\n * Some data types have special properties that can be accessed in order to change the data type.\n * For example, to get an unsigned integer with zerofill you can do `DataTypes.INTEGER.UNSIGNED.ZEROFILL`.\n * The order you access the properties in do not matter, so `DataTypes.INTEGER.ZEROFILL.UNSIGNED` is fine as well.\n *\n * * All number types (`INTEGER`, `BIGINT`, `FLOAT`, `DOUBLE`, `REAL`, `DECIMAL`) expose the properties `UNSIGNED` and `ZEROFILL`\n * * The `CHAR` and `STRING` types expose the `BINARY` property\n *\n * Three of the values provided here (`NOW`, `UUIDV1` and `UUIDV4`) are special default values, that should not be used to define types. Instead they are used as shorthands for\n * defining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: DataTypes.UUIDV1,\n *     primaryKey: true\n *   }\n * })\n * ```\n * There may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplished\n * using the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value\n * from a function.\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: function() {\n *       return generateMyId()\n *     },\n *     primaryKey: true\n *   }\n * })\n * ```\n */\n\n\nconst DataTypes = module.exports = {\n  ABSTRACT,\n  STRING,\n  CHAR,\n  TEXT,\n  NUMBER,\n  TINYINT,\n  SMALLINT,\n  MEDIUMINT,\n  INTEGER,\n  BIGINT,\n  FLOAT,\n  TIME,\n  DATE,\n  DATEONLY,\n  BOOLEAN,\n  NOW,\n  BLOB,\n  DECIMAL,\n  NUMERIC: DECIMAL,\n  UUID,\n  UUIDV1,\n  UUIDV4,\n  HSTORE,\n  JSON: JSONTYPE,\n  JSONB,\n  VIRTUAL,\n  ARRAY,\n  ENUM,\n  RANGE,\n  REAL,\n  'DOUBLE PRECISION': DOUBLE,\n  DOUBLE,\n  GEOMETRY,\n  GEOGRAPHY,\n  CIDR,\n  INET,\n  MACADDR,\n  CITEXT\n};\n\n_.each(DataTypes, (dataType, name) => {\n  // guard for aliases\n  if (!Object.prototype.hasOwnProperty.call(dataType, 'key')) {\n    dataType.types = {};\n    dataType.key = dataType.prototype.key = name;\n  }\n});\n\nconst dialectMap = {};\ndialectMap.postgres = require('./dialects/postgres/data-types')(DataTypes);\ndialectMap.mysql = require('./dialects/mysql/data-types')(DataTypes);\ndialectMap.mariadb = require('./dialects/mariadb/data-types')(DataTypes);\ndialectMap.sqlite = require('./dialects/sqlite/data-types')(DataTypes);\ndialectMap.mssql = require('./dialects/mssql/data-types')(DataTypes);\n\nconst dialectList = _.values(dialectMap);\n\nfor (const dataTypes of dialectList) {\n  _.each(dataTypes, (DataType, key) => {\n    if (!DataType.key) {\n      DataType.key = DataType.prototype.key = key;\n    }\n  });\n} // Wrap all data types to not require `new`\n\n\nfor (const dataTypes of [DataTypes, ...dialectList]) {\n  _.each(dataTypes, (DataType, key) => {\n    dataTypes[key] = classToInvokable(DataType);\n  });\n}\n\nObject.assign(DataTypes, dialectMap);","map":{"version":3,"names":["util","require","_","wkx","sequelizeErrors","Validator","validator","momentTz","moment","logger","warnings","classToInvokable","ABSTRACT","toString","options","toSql","key","stringify","value","_stringify","bindParam","_bindParam","name","warn","link","text","extend","oldType","prototype","dialectTypes","STRING","constructor","length","binary","_binary","_length","validate","Object","call","Buffer","isBuffer","ValidationError","format","BINARY","CHAR","TEXT","toLowerCase","CITEXT","NUMBER","_zerofill","zerofill","_decimals","decimals","_precision","precision","_scale","scale","_unsigned","unsigned","result","isFloat","String","number","undefined","UNSIGNED","ZEROFILL","INTEGER","isInt","TINYINT","SMALLINT","MEDIUMINT","BIGINT","FLOAT","REAL","DOUBLE","DECIMAL","filter","identity","join","isDecimal","protoExtensions","escape","_value","isNaN","isFinite","sign","floating","assign","BOOLEAN","isBoolean","_sanitize","type","parse","TIME","DATE","isDate","raw","Date","_isChanged","originalValue","getTime","_applyTimezone","date","timezone","tz","zone","utcOffset","DATEONLY","HSTORE","isPlainObject","JSONTYPE","JSON","JSONB","NOW","BLOB","Array","isArray","from","hex","_hexify","RANGE","subtype","_subtype","UUID","isUUID","acceptStrings","UUIDV1","UUIDV4","VIRTUAL","ReturnType","fields","returnType","ENUM","args","values","reduce","element","concat","includes","ARRAY","is","obj","GEOMETRY","srid","Geometry","parseGeoJSON","toWkt","GEOGRAPHY","CIDR","isIPRange","INET","isIP","MACADDR","isMACAddress","DataTypes","module","exports","NUMERIC","each","dataType","hasOwnProperty","types","dialectMap","postgres","mysql","mariadb","sqlite","mssql","dialectList","dataTypes","DataType"],"sources":["/home/brian/node_modules/sequelize/lib/data-types.js"],"sourcesContent":["'use strict';\n\nconst util = require('util');\nconst _ = require('lodash');\nconst wkx = require('wkx');\nconst sequelizeErrors = require('./errors');\nconst Validator = require('./utils/validator-extras').validator;\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\nconst { logger } = require('./utils/logger');\nconst warnings = {};\nconst { classToInvokable } = require('./utils/classToInvokable');\n\nclass ABSTRACT {\n  toString(options) {\n    return this.toSql(options);\n  }\n  toSql() {\n    return this.key;\n  }\n  stringify(value, options) {\n    if (this._stringify) {\n      return this._stringify(value, options);\n    }\n    return value;\n  }\n  bindParam(value, options) {\n    if (this._bindParam) {\n      return this._bindParam(value, options);\n    }\n    return options.bindParam(this.stringify(value, options));\n  }\n  static toString() {\n    return this.name;\n  }\n  static warn(link, text) {\n    if (!warnings[text]) {\n      warnings[text] = true;\n      logger.warn(`${text} \\n>> Check: ${link}`);\n    }\n  }\n  static extend(oldType) {\n    return new this(oldType.options);\n  }\n}\n\nABSTRACT.prototype.dialectTypes = '';\n\n/**\n * STRING A variable length string\n */\nclass STRING extends ABSTRACT {\n  /**\n   * @param {number} [length=255] length of string\n   * @param {boolean} [binary=false] Is this binary?\n   */\n  constructor(length, binary) {\n    super();\n    const options = typeof length === 'object' && length || { length, binary };\n    this.options = options;\n    this._binary = options.binary;\n    this._length = options.length || 255;\n  }\n  toSql() {\n    return `VARCHAR(${this._length})${this._binary ? ' BINARY' : ''}`;\n  }\n  validate(value) {\n    if (Object.prototype.toString.call(value) !== '[object String]') {\n      if (this.options.binary && Buffer.isBuffer(value) || typeof value === 'number') {\n        return true;\n      }\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n\n  get BINARY() {\n    this._binary = true;\n    this.options.binary = true;\n    return this;\n  }\n\n  static get BINARY() {\n    return new this().BINARY;\n  }\n}\n\n/**\n * CHAR A fixed length string\n */\nclass CHAR extends STRING {\n  /**\n   * @param {number} [length=255] length of string\n   * @param {boolean} [binary=false] Is this binary?\n   */\n  constructor(length, binary) {\n    super(typeof length === 'object' && length || { length, binary });\n  }\n  toSql() {\n    return `CHAR(${this._length})${this._binary ? ' BINARY' : ''}`;\n  }\n}\n\n/**\n * Unlimited length TEXT column\n */\nclass TEXT extends ABSTRACT {\n  /**\n   * @param {string} [length=''] could be tiny, medium, long.\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case 'tiny':\n        return 'TINYTEXT';\n      case 'medium':\n        return 'MEDIUMTEXT';\n      case 'long':\n        return 'LONGTEXT';\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * An unlimited length case-insensitive text column.\n * Original case is preserved but acts case-insensitive when comparing values (such as when finding or unique constraints).\n * Only available in Postgres and SQLite.\n *\n */\nclass CITEXT extends ABSTRACT {\n  toSql() {\n    return 'CITEXT';\n  }\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * Base number type which is used to build other types\n */\nclass NUMBER extends ABSTRACT {\n  /**\n   * @param {Object} options type options\n   * @param {string|number} [options.length] length of type, like `INT(4)`\n   * @param {boolean} [options.zerofill] Is zero filled?\n   * @param {boolean} [options.unsigned] Is unsigned?\n   * @param {string|number} [options.decimals] number of decimal points, used with length `FLOAT(5, 4)`\n   * @param {string|number} [options.precision] defines precision for decimal type\n   * @param {string|number} [options.scale] defines scale for decimal type\n   */\n  constructor(options = {}) {\n    super();\n    if (typeof options === 'number') {\n      options = {\n        length: options\n      };\n    }\n    this.options = options;\n    this._length = options.length;\n    this._zerofill = options.zerofill;\n    this._decimals = options.decimals;\n    this._precision = options.precision;\n    this._scale = options.scale;\n    this._unsigned = options.unsigned;\n  }\n  toSql() {\n    let result = this.key;\n    if (this._length) {\n      result += `(${this._length}`;\n      if (typeof this._decimals === 'number') {\n        result += `,${this._decimals}`;\n      }\n      result += ')';\n    }\n    if (this._unsigned) {\n      result += ' UNSIGNED';\n    }\n    if (this._zerofill) {\n      result += ' ZEROFILL';\n    }\n    return result;\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n  _stringify(number) {\n    if (typeof number === 'number' || typeof number === 'boolean' || number === null || number === undefined) {\n      return number;\n    }\n    if (typeof number.toString === 'function') {\n      return number.toString();\n    }\n    return number;\n  }\n\n  get UNSIGNED() {\n    this._unsigned = true;\n    this.options.unsigned = true;\n    return this;\n  }\n\n  get ZEROFILL() {\n    this._zerofill = true;\n    this.options.zerofill = true;\n    return this;\n  }\n\n  static get UNSIGNED() {\n    return new this().UNSIGNED;\n  }\n\n  static get ZEROFILL() {\n    return new this().ZEROFILL;\n  }\n}\n\n/**\n * A 32 bit integer\n */\nclass INTEGER extends NUMBER {\n  validate(value) {\n    if (!Validator.isInt(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n}\n\n/**\n * A 8 bit integer\n */\nclass TINYINT extends INTEGER {\n}\n\n/**\n * A 16 bit integer\n */\nclass SMALLINT extends INTEGER {\n}\n\n/**\n * A 24 bit integer\n */\nclass MEDIUMINT extends INTEGER {\n}\n\n/**\n * A 64 bit integer\n */\nclass BIGINT extends INTEGER {\n}\n\n/**\n * Floating point number (4-byte precision).\n */\nclass FLOAT extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `FLOAT(4)`\n   * @param {string|number} [decimals] number of decimal points, used with length `FLOAT(5, 4)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid float', value));\n    }\n    return true;\n  }\n}\n\n/**\n * Floating point number (4-byte precision).\n */\nclass REAL extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `REAL(4)`\n   * @param {string|number} [decimals] number of decimal points, used with length `REAL(5, 4)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n}\n\n/**\n * Floating point number (8-byte precision).\n */\nclass DOUBLE extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `DOUBLE PRECISION(25)`\n   * @param {string|number} [decimals] number of decimal points, used with length `DOUBLE PRECISION(25, 10)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n}\n\n/**\n * Decimal type, variable precision, take length as specified by user\n */\nclass DECIMAL extends NUMBER {\n  /**\n   * @param {string|number} [precision] defines precision\n   * @param {string|number} [scale] defines scale\n   */\n  constructor(precision, scale) {\n    super(typeof precision === 'object' && precision || { precision, scale });\n  }\n  toSql() {\n    if (this._precision || this._scale) {\n      return `DECIMAL(${[this._precision, this._scale].filter(_.identity).join(',')})`;\n    }\n    return 'DECIMAL';\n  }\n  validate(value) {\n    if (!Validator.isDecimal(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid decimal', value));\n    }\n    return true;\n  }\n}\n\n// TODO: Create intermediate class\nconst protoExtensions = {\n  escape: false,\n  _value(value) {\n    if (isNaN(value)) {\n      return 'NaN';\n    }\n    if (!isFinite(value)) {\n      const sign = value < 0 ? '-' : '';\n      return `${sign}Infinity`;\n    }\n\n    return value;\n  },\n  _stringify(value) {\n    return `'${this._value(value)}'`;\n  },\n  _bindParam(value, options) {\n    return options.bindParam(this._value(value));\n  }\n};\n\nfor (const floating of [FLOAT, DOUBLE, REAL]) {\n  Object.assign(floating.prototype, protoExtensions);\n}\n\n/**\n * A boolean / tinyint column, depending on dialect\n */\nclass BOOLEAN extends ABSTRACT {\n  toSql() {\n    return 'TINYINT(1)';\n  }\n  validate(value) {\n    if (!Validator.isBoolean(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid boolean', value));\n    }\n    return true;\n  }\n  _sanitize(value) {\n    if (value !== null && value !== undefined) {\n      if (Buffer.isBuffer(value) && value.length === 1) {\n        // Bit fields are returned as buffers\n        value = value[0];\n      }\n      const type = typeof value;\n      if (type === 'string') {\n        // Only take action on valid boolean strings.\n        return value === 'true' ? true : value === 'false' ? false : value;\n      }\n      if (type === 'number') {\n        // Only take action on valid boolean integers.\n        return value === 1 ? true : value === 0 ? false : value;\n      }\n    }\n    return value;\n  }\n}\n\n\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n/**\n * A time column\n *\n */\nclass TIME extends ABSTRACT {\n  toSql() {\n    return 'TIME';\n  }\n}\n\n/**\n * Date column with timezone, default is UTC\n */\nclass DATE extends ABSTRACT {\n  /**\n   * @param {string|number} [length] precision to allow storing milliseconds\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    return 'DATETIME';\n  }\n  validate(value) {\n    if (!Validator.isDate(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid date', value));\n    }\n    return true;\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {\n      return new Date(value);\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value &&\n      (value === originalValue ||\n        value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {\n      return false;\n    }\n    // not changed when set to same empty value\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n  _applyTimezone(date, options) {\n    if (options.timezone) {\n      if (momentTz.tz.zone(options.timezone)) {\n        return momentTz(date).tz(options.timezone);\n      }\n      return date = moment(date).utcOffset(options.timezone);\n    }\n    return momentTz(date);\n  }\n  _stringify(date, options) {\n    date = this._applyTimezone(date, options);\n    // Z here means current timezone, _not_ UTC\n    return date.format('YYYY-MM-DD HH:mm:ss.SSS Z');\n  }\n}\n\n/**\n * A date only column (no timestamp)\n */\nclass DATEONLY extends ABSTRACT {\n  toSql() {\n    return 'DATE';\n  }\n  _stringify(date) {\n    return moment(date).format('YYYY-MM-DD');\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !!value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value && originalValue === value) {\n      return false;\n    }\n    // not changed when set to same empty value\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n}\n\n/**\n * A key / value store column. Only available in Postgres.\n */\nclass HSTORE extends ABSTRACT {\n  validate(value) {\n    if (!_.isPlainObject(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid hstore', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A JSON string column. Available in MySQL, Postgres and SQLite\n */\nclass JSONTYPE extends ABSTRACT {\n  validate() {\n    return true;\n  }\n  _stringify(value) {\n    return JSON.stringify(value);\n  }\n}\n\n/**\n * A binary storage JSON column. Only available in Postgres.\n */\nclass JSONB extends JSONTYPE {\n}\n\n/**\n * A default value of the current timestamp\n */\nclass NOW extends ABSTRACT {\n}\n\n/**\n * Binary storage\n */\nclass BLOB extends ABSTRACT {\n  /**\n   * @param {string} [length=''] could be tiny, medium, long.\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case 'tiny':\n        return 'TINYBLOB';\n      case 'medium':\n        return 'MEDIUMBLOB';\n      case 'long':\n        return 'LONGBLOB';\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== 'string' && !Buffer.isBuffer(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid blob', value));\n    }\n    return true;\n  }\n  _stringify(value) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      }\n      else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    const hex = value.toString('hex');\n    return this._hexify(hex);\n  }\n  _hexify(hex) {\n    return `X'${hex}'`;\n  }\n  _bindParam(value, options) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      }\n      else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    return options.bindParam(value);\n  }\n}\n\n\nBLOB.prototype.escape = false;\n\n/**\n * Range types are data types representing a range of values of some element type (called the range's subtype).\n * Only available in Postgres. See [the Postgres documentation](http://www.postgresql.org/docs/9.4/static/rangetypes.html) for more details\n */\nclass RANGE extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} subtype A subtype for range, like RANGE(DATE)\n   */\n  constructor(subtype) {\n    super();\n    const options = _.isPlainObject(subtype) ? subtype : { subtype };\n    if (!options.subtype)\n      options.subtype = new INTEGER();\n    if (typeof options.subtype === 'function') {\n      options.subtype = new options.subtype();\n    }\n    this._subtype = options.subtype.key;\n    this.options = options;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid range', value));\n    }\n    if (value.length !== 2) {\n      throw new sequelizeErrors.ValidationError('A range must be an array with two elements');\n    }\n    return true;\n  }\n}\n\n/**\n * A column storing a unique universal identifier.\n * Use with `UUIDV1` or `UUIDV4` for default values.\n */\nclass UUID extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A default unique universal identifier generated following the UUID v1 standard\n */\nclass UUIDV1 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A default unique universal identifier generated following the UUID v4 standard\n */\nclass UUIDV4 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuidv4', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.\n *\n * You could also use it to validate a value before permuting and storing it. VIRTUAL also takes a return type and dependency fields as arguments\n * If a virtual attribute is present in `attributes` it will automatically pull in the extra fields as well.\n * Return type is mostly useful for setups that rely on types like GraphQL.\n *\n * @example <caption>Checking password length before hashing it</caption>\n * sequelize.define('user', {\n *   password_hash: DataTypes.STRING,\n *   password: {\n *     type: DataTypes.VIRTUAL,\n *     set: function (val) {\n *        // Remember to set the data value, otherwise it won't be validated\n *        this.setDataValue('password', val);\n *        this.setDataValue('password_hash', this.salt + val);\n *      },\n *      validate: {\n *         isLongEnough: function (val) {\n *           if (val.length < 7) {\n *             throw new Error(\"Please choose a longer password\")\n *          }\n *       }\n *     }\n *   }\n * })\n *\n * # In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.\n *\n * @example <caption>Virtual with dependency fields</caption>\n * {\n *   active: {\n *     type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\n *     get: function() {\n *       return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)\n *     }\n *   }\n * }\n *\n */\nclass VIRTUAL extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} [ReturnType] return type for virtual type\n   * @param {Array} [fields] array of fields this virtual type is dependent on\n   */\n  constructor(ReturnType, fields) {\n    super();\n    if (typeof ReturnType === 'function')\n      ReturnType = new ReturnType();\n    this.returnType = ReturnType;\n    this.fields = fields;\n  }\n}\n\n/**\n * An enumeration, Postgres Only\n *\n * @example\n * DataTypes.ENUM('value', 'another value')\n * DataTypes.ENUM(['value', 'another value'])\n * DataTypes.ENUM({\n *   values: ['value', 'another value']\n * })\n */\nclass ENUM extends ABSTRACT {\n  /**\n   * @param {...any|{ values: any[] }|any[]} args either array of values or options object with values array. It also supports variadic values\n   */\n  constructor(...args) {\n    super();\n    const value = args[0];\n    const options = typeof value === 'object' && !Array.isArray(value) && value || {\n      values: args.reduce((result, element) => {\n        return result.concat(Array.isArray(element) ? element : [element]);\n      }, [])\n    };\n    this.values = options.values;\n    this.options = options;\n  }\n  validate(value) {\n    if (!this.values.includes(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid choice in %j', value, this.values));\n    }\n    return true;\n  }\n}\n\n/**\n * An array of `type`. Only available in Postgres.\n *\n * @example\n * DataTypes.ARRAY(DataTypes.DECIMAL)\n */\nclass ARRAY extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} type type of array values\n   */\n  constructor(type) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type };\n    this.options = options;\n    this.type = typeof options.type === 'function' ? new options.type() : options.type;\n  }\n  toSql() {\n    return `${this.type.toSql()}[]`;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid array', value));\n    }\n    return true;\n  }\n  static is(obj, type) {\n    return obj instanceof ARRAY && obj.type instanceof type;\n  }\n}\n\n/**\n * A column storing Geometry information.\n * It is only available in PostgreSQL (with PostGIS), MariaDB or MySQL.\n *\n * GeoJSON is accepted as input and returned as output.\n *\n * In PostGIS, the GeoJSON is parsed using the PostGIS function `ST_GeomFromGeoJSON`.\n * In MySQL it is parsed using the function `GeomFromText`.\n *\n * Therefore, one can just follow the [GeoJSON spec](http://geojson.org/geojson-spec.html) for handling geometry objects.  See the following examples:\n *\n * @example <caption>Defining a Geometry type attribute</caption>\n * DataTypes.GEOMETRY\n * DataTypes.GEOMETRY('POINT')\n * DataTypes.GEOMETRY('POINT', 4326)\n *\n * @example <caption>Create a new point</caption>\n * const point = { type: 'Point', coordinates: [39.807222,-76.984722]};\n *\n * User.create({username: 'username', geometry: point });\n *\n * @example <caption>Create a new linestring</caption>\n * const line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };\n *\n * User.create({username: 'username', geometry: line });\n *\n * @example <caption>Create a new polygon</caption>\n * const polygon = { type: 'Polygon', coordinates: [\n *                 [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n *                   [100.0, 1.0], [100.0, 0.0] ]\n *                 ]};\n *\n * User.create({username: 'username', geometry: polygon });\n *\n * @example <caption>Create a new point with a custom SRID</caption>\n * const point = {\n *   type: 'Point',\n *   coordinates: [39.807222,-76.984722],\n *   crs: { type: 'name', properties: { name: 'EPSG:4326'} }\n * };\n *\n * User.create({username: 'username', geometry: point })\n *\n *\n * @see {@link DataTypes.GEOGRAPHY}\n */\nclass GEOMETRY extends ABSTRACT {\n  /**\n   * @param {string} [type] Type of geometry data\n   * @param {string} [srid] SRID of type\n   */\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type, srid };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\n\nGEOMETRY.prototype.escape = false;\n\n/**\n * A geography datatype represents two dimensional spacial objects in an elliptic coord system.\n *\n * __The difference from geometry and geography type:__\n *\n * PostGIS 1.5 introduced a new spatial type called geography, which uses geodetic measurement instead of Cartesian measurement.\n * Coordinate points in the geography type are always represented in WGS 84 lon lat degrees (SRID 4326),\n * but measurement functions and relationships ST_Distance, ST_DWithin, ST_Length, and ST_Area always return answers in meters or assume inputs in meters.\n *\n * __What is best to use? It depends:__\n *\n * When choosing between the geometry and geography type for data storage, you should consider what you’ll be using it for.\n * If all you do are simple measurements and relationship checks on your data, and your data covers a fairly large area, then most likely you’ll be better off storing your data using the new geography type.\n * Although the new geography data type can cover the globe, the geometry type is far from obsolete.\n * The geometry type has a much richer set of functions than geography, relationship checks are generally faster, and it has wider support currently across desktop and web-mapping tools\n *\n * @example <caption>Defining a Geography type attribute</caption>\n * DataTypes.GEOGRAPHY\n * DataTypes.GEOGRAPHY('POINT')\n * DataTypes.GEOGRAPHY('POINT', 4326)\n */\nclass GEOGRAPHY extends ABSTRACT {\n  /**\n   * @param {string} [type] Type of geography data\n   * @param {string} [srid] SRID of type\n   */\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type, srid };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\n\n\nGEOGRAPHY.prototype.escape = false;\n\n/**\n * The cidr type holds an IPv4 or IPv6 network specification. Takes 7 or 19 bytes.\n *\n * Only available for Postgres\n */\nclass CIDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isIPRange(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid CIDR', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The INET type holds an IPv4 or IPv6 host address, and optionally its subnet. Takes 7 or 19 bytes\n *\n * Only available for Postgres\n */\nclass INET extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isIP(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid INET', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The MACADDR type stores MAC addresses. Takes 6 bytes\n *\n * Only available for Postgres\n *\n */\nclass MACADDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isMACAddress(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid MACADDR', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A convenience class holding commonly used data types. The data types are used when defining a new model using `Sequelize.define`, like this:\n * ```js\n * sequelize.define('model', {\n *   column: DataTypes.INTEGER\n * })\n * ```\n * When defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using `DataTypes.BLOB`, mean\n * that that column will be returned as an instance of `Buffer` when being fetched by sequelize.\n *\n * To provide a length for the data type, you can invoke it like a function: `INTEGER(2)`\n *\n * Some data types have special properties that can be accessed in order to change the data type.\n * For example, to get an unsigned integer with zerofill you can do `DataTypes.INTEGER.UNSIGNED.ZEROFILL`.\n * The order you access the properties in do not matter, so `DataTypes.INTEGER.ZEROFILL.UNSIGNED` is fine as well.\n *\n * * All number types (`INTEGER`, `BIGINT`, `FLOAT`, `DOUBLE`, `REAL`, `DECIMAL`) expose the properties `UNSIGNED` and `ZEROFILL`\n * * The `CHAR` and `STRING` types expose the `BINARY` property\n *\n * Three of the values provided here (`NOW`, `UUIDV1` and `UUIDV4`) are special default values, that should not be used to define types. Instead they are used as shorthands for\n * defining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: DataTypes.UUIDV1,\n *     primaryKey: true\n *   }\n * })\n * ```\n * There may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplished\n * using the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value\n * from a function.\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: function() {\n *       return generateMyId()\n *     },\n *     primaryKey: true\n *   }\n * })\n * ```\n */\nconst DataTypes = module.exports = {\n  ABSTRACT,\n  STRING,\n  CHAR,\n  TEXT,\n  NUMBER,\n  TINYINT,\n  SMALLINT,\n  MEDIUMINT,\n  INTEGER,\n  BIGINT,\n  FLOAT,\n  TIME,\n  DATE,\n  DATEONLY,\n  BOOLEAN,\n  NOW,\n  BLOB,\n  DECIMAL,\n  NUMERIC: DECIMAL,\n  UUID,\n  UUIDV1,\n  UUIDV4,\n  HSTORE,\n  JSON: JSONTYPE,\n  JSONB,\n  VIRTUAL,\n  ARRAY,\n  ENUM,\n  RANGE,\n  REAL,\n  'DOUBLE PRECISION': DOUBLE,\n  DOUBLE,\n  GEOMETRY,\n  GEOGRAPHY,\n  CIDR,\n  INET,\n  MACADDR,\n  CITEXT\n};\n\n_.each(DataTypes, (dataType, name) => {\n  // guard for aliases\n  if (!Object.prototype.hasOwnProperty.call(dataType, 'key')) {\n    dataType.types = {};\n    dataType.key = dataType.prototype.key = name;\n  }\n});\n\nconst dialectMap = {};\ndialectMap.postgres = require('./dialects/postgres/data-types')(DataTypes);\ndialectMap.mysql = require('./dialects/mysql/data-types')(DataTypes);\ndialectMap.mariadb = require('./dialects/mariadb/data-types')(DataTypes);\ndialectMap.sqlite = require('./dialects/sqlite/data-types')(DataTypes);\ndialectMap.mssql = require('./dialects/mssql/data-types')(DataTypes);\n\nconst dialectList = _.values(dialectMap);\n\nfor (const dataTypes of dialectList) {\n  _.each(dataTypes, (DataType, key) => {\n    if (!DataType.key) {\n      DataType.key = DataType.prototype.key = key;\n    }\n  });\n}\n\n// Wrap all data types to not require `new`\nfor (const dataTypes of [DataTypes, ...dialectList]) {\n  _.each(dataTypes, (DataType, key) => {\n    dataTypes[key] = classToInvokable(DataType);\n  });\n}\n\nObject.assign(DataTypes, dialectMap);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}